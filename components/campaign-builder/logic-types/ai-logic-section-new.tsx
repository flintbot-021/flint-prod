'use client'\n\nimport React, { useState, useCallback, useMemo } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Input } from '@/components/ui/input'\nimport { Card } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Plus, X, Brain, Play, Check, ChevronDown, ChevronUp } from 'lucide-react'\nimport { cn } from '@/lib/utils'\nimport { CampaignSection } from '@/lib/types/campaign-builder'\nimport { titleToVariableName, isQuestionSection } from '@/lib/utils/section-variables'\n\ninterface OutputVariable {\n  id: string\n  name: string\n  description: string\n}\n\ninterface AILogicSectionProps {\n  settings: {\n    prompt: string\n    outputVariables: OutputVariable[]\n  }\n  isPreview?: boolean\n  onChange?: (settings: any) => void\n  className?: string\n  allSections?: CampaignSection[]\n  section?: CampaignSection\n}\n\n// ✅ SIMPLIFIED: Extract variables from section titles directly\nfunction extractAvailableVariables(sections: CampaignSection[], currentOrder: number): string[] {\n  return sections\n    .filter(s => s.order < currentOrder && isQuestionSection(s.type) && s.title)\n    .map(s => titleToVariableName(s.title))\n}\n\nexport function AILogicSection({\n  settings,\n  isPreview = false,\n  onChange,\n  className,\n  allSections = [],\n  section\n}: AILogicSectionProps) {\n  const [testResult, setTestResult] = useState<string>('')\n  const [isTestRunning, setIsTestRunning] = useState(false)\n  \n  // ✅ SIMPLIFIED: Get available variables from preceding question sections\n  const availableVariables = useMemo(() => {\n    if (allSections.length > 0 && section?.order !== undefined) {\n      return extractAvailableVariables(allSections, section.order)\n    }\n    return []\n  }, [allSections, section?.order])\n\n  const handleSettingChange = useCallback((key: string, value: any) => {\n    if (onChange) {\n      const newSettings = { ...settings, [key]: value }\n      onChange(newSettings)\n    }\n  }, [settings, onChange])\n\n  // Step completion logic (simplified)\n  const step1Complete = useMemo(() => {\n    return availableVariables.length > 0\n  }, [availableVariables])\n\n  const step2Complete = useMemo(() => {\n    return settings.prompt && settings.prompt.trim() !== ''\n  }, [settings.prompt])\n\n  const step3Complete = useMemo(() => {\n    return settings.outputVariables.length > 0 && \n           settings.outputVariables.every(v => v.name.trim() !== '' && v.description.trim() !== '')\n  }, [settings.outputVariables])\n\n  // Output variable management\n  const addOutputVariable = useCallback(() => {\n    const newVariable: OutputVariable = {\n      id: Date.now().toString(),\n      name: '',\n      description: ''\n    }\n    handleSettingChange('outputVariables', [...settings.outputVariables, newVariable])\n  }, [settings.outputVariables, handleSettingChange])\n\n  const updateOutputVariable = useCallback((id: string, field: string, value: string) => {\n    const updatedVariables = settings.outputVariables.map(variable =>\n      variable.id === id ? { ...variable, [field]: value } : variable\n    )\n    handleSettingChange('outputVariables', updatedVariables)\n  }, [settings.outputVariables, handleSettingChange])\n\n  const removeOutputVariable = useCallback((id: string) => {\n    const filteredVariables = settings.outputVariables.filter(variable => variable.id !== id)\n    handleSettingChange('outputVariables', filteredVariables)\n  }, [settings.outputVariables, handleSettingChange])\n\n  // Insert variable into prompt\n  const insertVariable = useCallback((variable: string) => {\n    const currentValue = settings.prompt || ''\n    const newValue = currentValue + `@${variable}`\n    handleSettingChange('prompt', newValue)\n  }, [settings.prompt, handleSettingChange])\n\n  const runTest = async () => {\n    setIsTestRunning(true)\n    try {\n      if (!settings.prompt?.trim()) {\n        setTestResult('Please write an AI prompt first.')\n        return\n      }\n      \n      if (settings.outputVariables.length === 0) {\n        setTestResult('Please define at least one output variable first.')\n        return\n      }\n\n      // ✅ SIMPLIFIED: Use sample data for testing\n      const sampleData: Record<string, string> = {}\n      availableVariables.forEach(variable => {\n        sampleData[variable] = `Sample ${variable.replace(/_/g, ' ')}`\n      })\n\n      const testRequest = {\n        prompt: settings.prompt,\n        variables: sampleData,\n        outputVariables: settings.outputVariables.map(v => ({\n          id: v.id,\n          name: v.name,\n          description: v.description\n        }))\n      }\n\n      const response = await fetch('/api/ai-processing', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(testRequest)\n      })\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n\n      const result = await response.json()\n\n      if (result.success) {\n        if (result.outputs && Object.keys(result.outputs).length > 0) {\n          const formattedResponse = Object.entries(result.outputs)\n            .map(([key, value]) => `${key}: ${value}`)\n            .join('\\n\\n')\n          \n          setTestResult(`✅ AI Test Results:\\n\\n${formattedResponse}`)\n        } else {\n          setTestResult('⚠️ AI processed successfully but returned no structured outputs.')\n        }\n      } else {\n        setTestResult(`❌ AI Test Failed: ${result.error || 'Unknown error occurred'}`)\n      }\n\n    } catch (error) {\n      setTestResult(`❌ Error: ${error instanceof Error ? error.message : 'Failed to test AI logic.'}`)\n    } finally {\n      setIsTestRunning(false)\n    }\n  }\n\n  if (isPreview) {\n    return null\n  }\n\n  return (\n    <div className={cn('py-16 px-6 max-w-4xl mx-auto space-y-12 text-white', className)}>\n      <div className=\"text-center space-y-4\">\n        <div className=\"flex items-center justify-center space-x-3\">\n          <Brain className=\"h-8 w-8 text-orange-600\" />\n          <h2 className=\"text-3xl font-bold text-white\">AI Logic Setup</h2>\n        </div>\n        <p className=\"text-lg text-gray-300 max-w-2xl mx-auto\">\n          Configure AI to process user responses and create personalized outputs.\n        </p>\n      </div>\n\n      <div className=\"space-y-8\">\n        {/* Step 1: Available Variables */}\n        <Card className=\"bg-gray-800 border-gray-700 p-8\">\n          <div className=\"flex items-center space-x-3 mb-6\">\n            <div className={cn(\n              'w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold',\n              step1Complete ? 'bg-green-600 text-white' : 'bg-orange-600 text-white'\n            )}>\n              {step1Complete ? <Check className=\"w-4 h-4\" /> : '1'}\n            </div>\n            <div>\n              <h3 className=\"text-xl font-semibold text-white\">Available Variables</h3>\n              <p className=\"text-gray-300\">Variables from your question sections</p>\n            </div>\n          </div>\n\n          {availableVariables.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-400 bg-gray-900 rounded-lg\">\n              <p className=\"font-medium\">No variables available</p>\n              <p className=\"text-sm\">Add question sections first to create variables for AI processing</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-gray-300 mb-4\">\n                These variables are automatically created from your question section titles:\n              </p>\n              <div className=\"grid grid-cols-2 gap-4\">\n                {availableVariables.map((variable) => (\n                  <div key={variable} className=\"bg-gray-900 p-3 rounded-lg\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge variant=\"secondary\" className=\"text-xs font-mono bg-blue-50 text-blue-700 border-blue-200\">\n                        @{variable}\n                      </Badge>\n                    </div>\n                    <p className=\"text-xs text-gray-400 mt-1\">From question section</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </Card>\n\n        {/* Step 2: AI Prompt */}\n        <Card className={cn('bg-gray-800 border-gray-700 p-8', !step1Complete && 'opacity-50 pointer-events-none')}>\n          <div className=\"flex items-center space-x-3 mb-6\">\n            <div className={cn(\n              'w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold',\n              !step1Complete ? 'bg-gray-400 text-white' :\n              step2Complete ? 'bg-green-600 text-white' : 'bg-orange-600 text-white'\n            )}>\n              {step2Complete ? <Check className=\"w-4 h-4\" /> : '2'}\n            </div>\n            <div>\n              <h3 className=\"text-xl font-semibold text-white\">Write AI Prompt</h3>\n              <p className=\"text-gray-300\">Tell the AI what to do with user responses</p>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <Label className=\"text-sm font-medium text-gray-300\">AI Prompt</Label>\n            \n            <Textarea\n              value={settings.prompt || ''}\n              onChange={(e) => handleSettingChange('prompt', e.target.value)}\n              placeholder=\"You are an expert assistant. Based on the user's name (@name) and their goal (@goal), provide personalized advice...\"\n              className=\"min-h-[200px] text-sm bg-gray-700 border-gray-600 text-white placeholder-gray-400\"\n              rows={8}\n            />\n\n            {availableVariables.length > 0 && (\n              <div>\n                <Label className=\"text-sm font-medium text-gray-300 mb-2 block\">\n                  Click to Insert Variables\n                </Label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {availableVariables.map((variable) => (\n                    <Badge\n                      key={variable}\n                      variant=\"outline\"\n                      className=\"cursor-pointer hover:bg-blue-900 hover:border-blue-500 transition-colors border-gray-600 text-gray-300\"\n                      onClick={() => insertVariable(variable)}\n                    >\n                      @{variable}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </Card>\n\n        {/* Step 3: Output Variables */}\n        <Card className={cn('bg-gray-800 border-gray-700 p-8', (!step1Complete || !step2Complete) && 'opacity-50 pointer-events-none')}>\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className={cn(\n                'w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold',\n                (!step1Complete || !step2Complete) ? 'bg-gray-400 text-white' :\n                step3Complete ? 'bg-green-600 text-white' : 'bg-orange-600 text-white'\n              )}>\n                {step3Complete ? <Check className=\"w-4 h-4\" /> : '3'}\n              </div>\n              <div>\n                <h3 className=\"text-xl font-semibold text-white\">Define AI Outputs</h3>\n                <p className=\"text-gray-300\">Specify what the AI should return</p>\n              </div>\n            </div>\n            <Button\n              onClick={addOutputVariable}\n              size=\"sm\"\n              className=\"bg-orange-600 hover:bg-orange-700 text-white\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Output\n            </Button>\n          </div>\n\n          <div className=\"space-y-4\">\n            {settings.outputVariables.map((variable) => (\n              <div key={variable.id} className=\"bg-gray-900 p-4 rounded-lg\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-300 mb-2 block\">\n                      Variable Name\n                    </Label>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-gray-400\">@</span>\n                      <Input\n                        value={variable.name}\n                        onChange={(e) => updateOutputVariable(variable.id, 'name', e.target.value)}\n                        placeholder=\"recommendation\"\n                        className=\"bg-gray-700 border-gray-600 text-white\"\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-300 mb-2 block\">\n                      Description\n                    </Label>\n                    <div className=\"flex items-center space-x-2\">\n                      <Input\n                        value={variable.description}\n                        onChange={(e) => updateOutputVariable(variable.id, 'description', e.target.value)}\n                        placeholder=\"A personalized recommendation\"\n                        className=\"bg-gray-700 border-gray-600 text-white\"\n                      />\n                      <Button\n                        onClick={() => removeOutputVariable(variable.id)}\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        className=\"text-red-400 hover:text-red-300 hover:bg-red-900/20\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n\n            {settings.outputVariables.length === 0 && (\n              <div className=\"text-center py-8 text-gray-400 bg-gray-900 rounded-lg\">\n                <p className=\"font-medium\">No output variables defined</p>\n                <p className=\"text-sm\">Click \"Add Output\" to define what the AI should return</p>\n              </div>\n            )}\n          </div>\n        </Card>\n\n        {/* Test Section */}\n        {step1Complete && step2Complete && step3Complete && (\n          <Card className=\"bg-gray-800 border-gray-700 p-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"text-lg font-semibold text-white\">Test Your AI Logic</h4>\n                <Button\n                  onClick={runTest}\n                  disabled={isTestRunning}\n                  className=\"bg-green-600 hover:bg-green-700 text-white\"\n                >\n                  {isTestRunning ? (\n                    <>\n                      <div className=\"animate-spin h-4 w-4 mr-2 border-2 border-white border-t-transparent rounded-full\" />\n                      Testing...\n                    </>\n                  ) : (\n                    <>\n                      <Play className=\"h-4 w-4 mr-2\" />\n                      Test AI\n                    </>\n                  )}\n                </Button>\n              </div>\n\n              {testResult && (\n                <div className=\"bg-gray-900 p-4 rounded-lg\">\n                  <pre className=\"text-sm text-gray-300 whitespace-pre-wrap\">{testResult}</pre>\n                </div>\n              )}\n            </div>\n          </Card>\n        )}\n      </div>\n    </div>\n  )\n}\n 