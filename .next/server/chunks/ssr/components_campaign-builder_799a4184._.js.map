{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/campaign-builder/top-bar.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useRef, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { \n  ArrowLeft, \n  Eye, \n  Globe, \n  Save, \n  Edit3,\n  Check,\n  X,\n  Loader2\n} from 'lucide-react'\nimport { cn } from '@/lib/utils'\n\ninterface CampaignBuilderTopBarProps {\n  campaignName: string\n  campaignStatus: 'draft' | 'published' | 'archived'\n  isPublished?: boolean\n  isSaving?: boolean\n  canPublish?: boolean\n  onCampaignNameChange?: (name: string) => void\n  onSave?: () => void\n  onPreview?: () => void\n  onPublish?: () => void\n  className?: string\n}\n\nexport function CampaignBuilderTopBar({\n  campaignName,\n  campaignStatus,\n  isPublished = false,\n  isSaving = false,\n  canPublish = true,\n  onCampaignNameChange,\n  onSave,\n  onPreview,\n  onPublish,\n  className\n}: CampaignBuilderTopBarProps) {\n  const router = useRouter()\n  const [isEditingName, setIsEditingName] = useState(false)\n  const [editedName, setEditedName] = useState(campaignName)\n  const [isSticky, setIsSticky] = useState(false)\n  const inputRef = useRef<HTMLInputElement>(null)\n  const topBarRef = useRef<HTMLDivElement>(null)\n\n  // Update editedName when campaignName prop changes\n  useEffect(() => {\n    setEditedName(campaignName)\n  }, [campaignName])\n\n  // Handle sticky behavior\n  useEffect(() => {\n    const handleScroll = () => {\n      if (topBarRef.current) {\n        const rect = topBarRef.current.getBoundingClientRect()\n        setIsSticky(rect.top <= 0)\n      }\n    }\n\n    window.addEventListener('scroll', handleScroll)\n    return () => window.removeEventListener('scroll', handleScroll)\n  }, [])\n\n  // Focus input when editing starts\n  useEffect(() => {\n    if (isEditingName && inputRef.current) {\n      inputRef.current.focus()\n      inputRef.current.select()\n    }\n  }, [isEditingName])\n\n  const handleNameEdit = () => {\n    setIsEditingName(true)\n  }\n\n  const handleNameSave = () => {\n    if (editedName.trim() && editedName !== campaignName) {\n      onCampaignNameChange?.(editedName.trim())\n    }\n    setIsEditingName(false)\n  }\n\n  const handleNameCancel = () => {\n    setEditedName(campaignName)\n    setIsEditingName(false)\n  }\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleNameSave()\n    } else if (e.key === 'Escape') {\n      handleNameCancel()\n    }\n  }\n\n  const handleBackToCampaigns = () => {\n    router.push('/dashboard/campaigns')\n  }\n\n  const getStatusColor = () => {\n    switch (campaignStatus) {\n      case 'published':\n        return 'bg-green-100 text-green-800 border-green-200'\n      case 'draft':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200'\n      case 'archived':\n        return 'bg-gray-100 text-gray-800 border-gray-200'\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200'\n    }\n  }\n\n  const getStatusText = () => {\n    switch (campaignStatus) {\n      case 'published':\n        return 'Published'\n      case 'draft':\n        return 'Draft'\n      case 'archived':\n        return 'Archived'\n      default:\n        return 'Unknown'\n    }\n  }\n\n  return (\n    <div\n      ref={topBarRef}\n      className={cn(\n        'bg-white border-b border-gray-200 transition-all duration-200',\n        isSticky && 'shadow-md',\n        className\n      )}\n      style={{\n        position: 'sticky',\n        top: 0,\n        zIndex: 50\n      }}\n    >\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Left Section - Navigation & Title */}\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleBackToCampaigns}\n              className=\"text-gray-600 hover:text-gray-900\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Campaigns\n            </Button>\n\n            <div className=\"h-6 w-px bg-gray-300\" />\n\n            {/* Campaign Name - Editable */}\n            <div className=\"flex items-center space-x-2\">\n              {isEditingName ? (\n                <div className=\"flex items-center space-x-2\">\n                  <Input\n                    ref={inputRef}\n                    value={editedName}\n                    onChange={(e) => setEditedName(e.target.value)}\n                    onKeyDown={handleKeyPress}\n                    onBlur={handleNameSave}\n                    className=\"h-8 text-lg font-semibold min-w-[200px]\"\n                    placeholder=\"Campaign name\"\n                  />\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleNameSave}\n                    className=\"h-8 w-8 p-0 text-green-600 hover:text-green-700\"\n                  >\n                    <Check className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleNameCancel}\n                    className=\"h-8 w-8 p-0 text-red-600 hover:text-red-700\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"flex items-center space-x-2\">\n                  <h1 className=\"text-lg font-semibold text-gray-900\">\n                    {campaignName}\n                  </h1>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleNameEdit}\n                    className=\"h-8 w-8 p-0 text-gray-400 hover:text-gray-600\"\n                  >\n                    <Edit3 className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              )}\n            </div>\n\n            {/* Status Badge */}\n            <div className={cn(\n              'px-2 py-1 rounded-full text-xs font-medium border',\n              getStatusColor()\n            )}>\n              {getStatusText()}\n            </div>\n          </div>\n\n          {/* Right Section - Actions */}\n          <div className=\"flex items-center space-x-3\">\n            {/* Save Button */}\n            {onSave && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={onSave}\n                disabled={isSaving}\n                className=\"text-gray-600 border-gray-300 hover:text-gray-900 hover:border-gray-400\"\n              >\n                {isSaving ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Saving...\n                  </>\n                ) : (\n                  <>\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save\n                  </>\n                )}\n              </Button>\n            )}\n\n            {/* Preview Button */}\n            {onPreview && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={onPreview}\n                className=\"text-blue-600 border-blue-300 hover:text-blue-700 hover:border-blue-400\"\n              >\n                <Eye className=\"h-4 w-4 mr-2\" />\n                Preview\n              </Button>\n            )}\n\n            {/* Publish/Unpublish Button */}\n            {onPublish && (\n              <Button\n                size=\"sm\"\n                onClick={onPublish}\n                disabled={!canPublish || isSaving}\n                className={cn(\n                  isPublished \n                    ? 'bg-orange-600 hover:bg-orange-700 text-white' \n                    : 'bg-green-600 hover:bg-green-700 text-white'\n                )}\n              >\n                <Globe className=\"h-4 w-4 mr-2\" />\n                {isPublished ? 'Unpublish' : 'Publish'}\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Progress/Loading Bar */}\n      {isSaving && (\n        <div className=\"h-1 bg-gray-200\">\n          <div className=\"h-full bg-blue-600 animate-pulse\" style={{ width: '100%' }} />\n        </div>\n      )}\n    </div>\n  )\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 390, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/campaign-builder/draggable-section-type.tsx"],"sourcesContent":["'use client'\n\nimport { useDraggable } from '@dnd-kit/core'\nimport { SectionType } from '@/lib/types/campaign-builder'\nimport { cn } from '@/lib/utils'\nimport * as Icons from 'lucide-react'\n\ninterface DraggableSectionTypeProps {\n  sectionType: SectionType\n  className?: string\n}\n\nexport function DraggableSectionType({ \n  sectionType, \n  className \n}: DraggableSectionTypeProps) {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    isDragging\n  } = useDraggable({\n    id: `section-type-${sectionType.id}`,\n    data: {\n      type: 'section-type',\n      sectionType: sectionType\n    }\n  })\n\n  const style = transform ? {\n    transform: `translate3d(${transform.x}px, ${transform.y}px, 0)`,\n  } : undefined\n\n  // Get the icon component dynamically\n  const IconComponent = Icons[sectionType.icon as keyof typeof Icons] as React.ComponentType<{\n    className?: string\n  }>\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      {...listeners}\n      {...attributes}\n      className={cn(\n        'group relative cursor-grab active:cursor-grabbing',\n        'p-3 rounded-lg border-2 border-dashed border-gray-200',\n        'hover:border-gray-300 hover:bg-gray-50',\n        'transition-all duration-200',\n        'bg-white',\n        isDragging && 'opacity-50 scale-95 shadow-lg border-blue-300',\n        className\n      )}\n    >\n      <div className=\"flex items-start space-x-3\">\n        {/* Icon */}\n        <div className={cn(\n          'flex-shrink-0 w-8 h-8 rounded-md flex items-center justify-center',\n          sectionType.color\n        )}>\n          {IconComponent && (\n            <IconComponent className=\"h-4 w-4\" />\n          )}\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 min-w-0\">\n          <h4 className=\"text-sm font-medium text-gray-900 truncate\">\n            {sectionType.name}\n          </h4>\n          <p className=\"text-xs text-gray-500 mt-1 line-clamp-2\">\n            {sectionType.description}\n          </p>\n        </div>\n      </div>\n\n      {/* Drag indicator */}\n      <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n        <div className=\"grid grid-cols-2 gap-0.5\">\n          {[...Array(6)].map((_, i) => (\n            <div \n              key={i} \n              className=\"w-1 h-1 bg-gray-400 rounded-full\"\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Dragging overlay */}\n      {isDragging && (\n        <div className=\"absolute inset-0 bg-blue-100 bg-opacity-50 rounded-lg border-2 border-blue-300 border-dashed\" />\n      )}\n    </div>\n  )\n} "],"names":[],"mappings":";;;;AAEA;AAEA;AACA;AALA;;;;;AAYO,SAAS,qBAAqB,EACnC,WAAW,EACX,SAAS,EACiB;IAC1B,MAAM,EACJ,UAAU,EACV,SAAS,EACT,UAAU,EACV,SAAS,EACT,UAAU,EACX,GAAG,CAAA,GAAA,2JAAA,CAAA,eAAY,AAAD,EAAE;QACf,IAAI,CAAC,aAAa,EAAE,YAAY,EAAE,EAAE;QACpC,MAAM;YACJ,MAAM;YACN,aAAa;QACf;IACF;IAEA,MAAM,QAAQ,YAAY;QACxB,WAAW,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,MAAM,CAAC;IACjE,IAAI;IAEJ,qCAAqC;IACrC,MAAM,gBAAgB,iKAAK,CAAC,YAAY,IAAI,CAAuB;IAInE,qBACE,8OAAC;QACC,KAAK;QACL,OAAO;QACN,GAAG,SAAS;QACZ,GAAG,UAAU;QACd,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,qDACA,yDACA,0CACA,+BACA,YACA,cAAc,iDACd;;0BAGF,8OAAC;gBAAI,WAAU;;kCAEb,8OAAC;wBAAI,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACf,qEACA,YAAY,KAAK;kCAEhB,+BACC,8OAAC;4BAAc,WAAU;;;;;;;;;;;kCAK7B,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAG,WAAU;0CACX,YAAY,IAAI;;;;;;0CAEnB,8OAAC;gCAAE,WAAU;0CACV,YAAY,WAAW;;;;;;;;;;;;;;;;;;0BAM9B,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAI,WAAU;8BACZ;2BAAI,MAAM;qBAAG,CAAC,GAAG,CAAC,CAAC,GAAG,kBACrB,8OAAC;4BAEC,WAAU;2BADL;;;;;;;;;;;;;;;YAQZ,4BACC,8OAAC;gBAAI,WAAU;;;;;;;;;;;;AAIvB","debugId":null}},
    {"offset": {"line": 513, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/campaign-builder/sections-menu.tsx"],"sourcesContent":["'use client'\n\nimport { useState } from 'react'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/badge'\nimport { DraggableSectionType } from './draggable-section-type'\nimport { \n  SECTION_TYPES, \n  SECTION_CATEGORIES, \n  getSectionTypesByCategory,\n  SectionType \n} from '@/lib/types/campaign-builder'\nimport { Search, ChevronDown, ChevronRight } from 'lucide-react'\nimport * as Icons from 'lucide-react'\nimport { cn } from '@/lib/utils'\n\ninterface SectionsMenuProps {\n  className?: string\n}\n\nexport function SectionsMenu({ className }: SectionsMenuProps) {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(\n    new Set(['input']) // Start with input category expanded\n  )\n\n  // Filter sections based on search term\n  const filteredSections = SECTION_TYPES.filter(section =>\n    section.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    section.description.toLowerCase().includes(searchTerm.toLowerCase())\n  )\n\n  const toggleCategory = (categoryId: string) => {\n    setExpandedCategories(prev => {\n      const newSet = new Set(prev)\n      if (newSet.has(categoryId)) {\n        newSet.delete(categoryId)\n      } else {\n        newSet.add(categoryId)\n      }\n      return newSet\n    })\n  }\n\n  const getSectionCount = (categoryId: string) => {\n    const categorySections = getSectionTypesByCategory(categoryId as SectionType['category'])\n    if (searchTerm) {\n      return categorySections.filter(section =>\n        section.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        section.description.toLowerCase().includes(searchTerm.toLowerCase())\n      ).length\n    }\n    return categorySections.length\n  }\n\n  const getCategorySections = (categoryId: string) => {\n    const categorySections = getSectionTypesByCategory(categoryId as SectionType['category'])\n    if (searchTerm) {\n      return categorySections.filter(section =>\n        section.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        section.description.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    }\n    return categorySections\n  }\n\n  return (\n    <div className={cn('h-full flex flex-col', className)}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-200\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">\n          Section Components\n        </h3>\n        \n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n          <Input\n            placeholder=\"Search sections...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        \n        {searchTerm && (\n          <div className=\"mt-2 text-sm text-gray-500\">\n            {filteredSections.length} section{filteredSections.length !== 1 ? 's' : ''} found\n          </div>\n        )}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {searchTerm ? (\n          /* Search Results */\n          <div className=\"p-4 space-y-3\">\n            {filteredSections.length > 0 ? (\n              filteredSections.map((sectionType) => (\n                <DraggableSectionType\n                  key={sectionType.id}\n                  sectionType={sectionType}\n                />\n              ))\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <Search className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                <p>No sections found</p>\n                <p className=\"text-sm\">Try a different search term</p>\n              </div>\n            )}\n          </div>\n        ) : (\n          /* Categorized Sections */\n          <div className=\"divide-y divide-gray-200\">\n            {SECTION_CATEGORIES.map((category) => {\n              const sectionCount = getSectionCount(category.id)\n              const isExpanded = expandedCategories.has(category.id)\n              const CategoryIcon = Icons[category.icon as keyof typeof Icons] as React.ComponentType<{\n                className?: string\n              }>\n\n              if (sectionCount === 0) return null\n\n              return (\n                <div key={category.id}>\n                  {/* Category Header */}\n                  <button\n                    onClick={() => toggleCategory(category.id)}\n                    className=\"w-full px-4 py-3 text-left hover:bg-gray-50 transition-colors\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"flex items-center space-x-2\">\n                          {isExpanded ? (\n                            <ChevronDown className=\"h-4 w-4 text-gray-400\" />\n                          ) : (\n                            <ChevronRight className=\"h-4 w-4 text-gray-400\" />\n                          )}\n                          {CategoryIcon && (\n                            <CategoryIcon className=\"h-4 w-4 text-gray-600\" />\n                          )}\n                        </div>\n                        <span className=\"font-medium text-gray-900\">\n                          {category.name}\n                        </span>\n                      </div>\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {sectionCount}\n                      </Badge>\n                    </div>\n                  </button>\n\n                  {/* Category Sections */}\n                  {isExpanded && (\n                    <div className=\"px-4 pb-4 space-y-3\">\n                      {getCategorySections(category.id).map((sectionType) => (\n                        <DraggableSectionType\n                          key={sectionType.id}\n                          sectionType={sectionType}\n                        />\n                      ))}\n                    </div>\n                  )}\n                </div>\n              )\n            })}\n          </div>\n        )}\n      </div>\n\n      {/* Footer Help */}\n      <div className=\"p-4 border-t border-gray-200 bg-gray-50\">\n        <div className=\"text-xs text-gray-500 space-y-1\">\n          <p>💡 <strong>Tip:</strong> Drag sections to the canvas to add them</p>\n          <p>🔍 Use search to quickly find specific section types</p>\n        </div>\n      </div>\n    </div>\n  )\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 839, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/campaign-builder/enhanced-section-card.tsx"],"sourcesContent":["'use client'\n\nimport { useState } from 'react'\nimport { useSortable } from '@dnd-kit/sortable'\nimport { CSS } from '@dnd-kit/utilities'\nimport { CampaignSection, getSectionTypeById } from '@/lib/types/campaign-builder'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { InlineEditableText } from '@/components/ui/inline-editable-text'\nimport { cn } from '@/lib/utils'\nimport * as Icons from 'lucide-react'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator\n} from '@/components/ui/dropdown-menu'\nimport {\n  GripVertical,\n  MoreVertical,\n  Trash2,\n  Settings,\n  Eye,\n  EyeOff,\n  Copy,\n  Loader2\n} from 'lucide-react'\n\ninterface EnhancedSectionCardProps {\n  section: CampaignSection\n  onUpdate: (sectionId: string, updates: Partial<CampaignSection>) => Promise<void>\n  onDelete: (sectionId: string) => void\n  onDuplicate: (sectionId: string) => void\n  onConfigure?: (sectionId: string) => void\n  className?: string\n  showConfiguration?: boolean\n}\n\nexport function EnhancedSectionCard({\n  section,\n  onUpdate,\n  onDelete,\n  onDuplicate,\n  onConfigure,\n  className,\n  showConfiguration = true\n}: EnhancedSectionCardProps) {\n  const [isSaving, setIsSaving] = useState(false)\n\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({\n    id: section.id,\n    data: {\n      type: 'campaign-section',\n      section\n    }\n  })\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  }\n\n  // Get section type information\n  const sectionType = getSectionTypeById(section.type)\n  const IconComponent = sectionType ? \n    Icons[sectionType.icon as keyof typeof Icons] as React.ComponentType<{ className?: string }> : \n    Icons.FileText\n\n  // Handle title updates\n  const handleTitleUpdate = async (newTitle: string) => {\n    if (newTitle.trim() === section.title) return\n    \n    setIsSaving(true)\n    try {\n      await onUpdate(section.id, { title: newTitle.trim() })\n    } catch (error) {\n      throw error // Let the inline editor handle the error\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  // Handle visibility toggle\n  const handleVisibilityToggle = async () => {\n    setIsSaving(true)\n    try {\n      await onUpdate(section.id, { isVisible: !section.isVisible })\n    } catch (error) {\n      console.error('Failed to update visibility:', error)\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  // Handle delete with confirmation\n  const handleDelete = () => {\n    if (confirm(`Are you sure you want to delete \"${section.title}\"?`)) {\n      onDelete(section.id)\n    }\n  }\n\n  // Handle duplicate\n  const handleDuplicate = () => {\n    onDuplicate(section.id)\n  }\n\n  // Handle configure\n  const handleConfigure = () => {\n    onConfigure?.(section.id)\n  }\n\n  // Title validation\n  const validateTitle = (title: string): string | null => {\n    if (!title.trim()) {\n      return 'Section title is required'\n    }\n    if (title.length > 100) {\n      return 'Title must be 100 characters or less'\n    }\n    return null\n  }\n\n  return (\n    <Card\n      ref={setNodeRef}\n      style={style}\n      className={cn(\n        'group relative transition-all duration-200',\n        isDragging && 'opacity-50 shadow-lg scale-105 rotate-2',\n        !section.isVisible && 'opacity-60',\n        'hover:shadow-md',\n        className\n      )}\n    >\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start space-x-3\">\n          {/* Drag Handle */}\n          <button\n            {...attributes}\n            {...listeners}\n            className=\"mt-2 p-1 text-gray-400 hover:text-gray-600 cursor-grab active:cursor-grabbing opacity-0 group-hover:opacity-100 transition-opacity\"\n            disabled={isSaving}\n          >\n            <GripVertical className=\"h-4 w-4\" />\n          </button>\n\n          {/* Section Icon */}\n          <div className={cn(\n            'flex-shrink-0 w-10 h-10 rounded-lg flex items-center justify-center mt-1',\n            sectionType?.color || 'bg-gray-100 text-gray-600',\n            !section.isVisible && 'opacity-60'\n          )}>\n            {IconComponent && (\n              <IconComponent className=\"h-5 w-5\" />\n            )}\n          </div>\n\n          {/* Content */}\n          <div className=\"flex-1 min-w-0\">\n            {/* Editable Title */}\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <InlineEditableText\n                value={section.title}\n                onSave={handleTitleUpdate}\n                variant=\"subheading\"\n                placeholder=\"Enter section title...\"\n                className={cn(\n                  'font-medium',\n                  section.isVisible ? 'text-gray-900' : 'text-gray-500'\n                )}\n                showEditIcon={false}\n                showSaveStatus={true}\n                validation={validateTitle}\n                maxLength={100}\n                required={true}\n                disabled={isSaving}\n              />\n              \n              {isSaving && (\n                <Loader2 className=\"h-4 w-4 animate-spin text-blue-500\" />\n              )}\n            </div>\n\n            {/* Section Type & Order */}\n            <div className=\"flex items-center justify-between mb-3\">\n              <div className=\"flex items-center space-x-2 text-xs text-gray-500\">\n                <span className=\"font-medium\">{sectionType?.name || section.type}</span>\n                <span>•</span>\n                <span>Order {section.order}</span>\n                <span>•</span>\n                <span className={cn(\n                  'px-2 py-1 rounded-full text-xs font-medium',\n                  sectionType?.category === 'input' && 'bg-blue-100 text-blue-700',\n                  sectionType?.category === 'content' && 'bg-green-100 text-green-700',\n                  sectionType?.category === 'logic' && 'bg-purple-100 text-purple-700',\n                  sectionType?.category === 'output' && 'bg-orange-100 text-orange-700'\n                )}>\n                  {sectionType?.category}\n                </span>\n              </div>\n              \n              {/* Visibility Indicator */}\n              {!section.isVisible && (\n                <div className=\"flex items-center space-x-1 text-xs text-orange-600 bg-orange-50 px-2 py-1 rounded-full\">\n                  <EyeOff className=\"h-3 w-3\" />\n                  <span>Hidden</span>\n                </div>\n              )}\n            </div>\n\n            {/* Section Description */}\n            {sectionType?.description && (\n              <p className=\"text-xs text-gray-500 mb-3 leading-relaxed\">\n                {sectionType.description}\n              </p>\n            )}\n\n            {/* Settings Preview */}\n            {section.settings && Object.keys(section.settings).length > 0 && (\n              <div className=\"bg-gray-50 rounded-md p-3 mb-3\">\n                <div className=\"text-xs text-gray-500 mb-2 font-medium\">Configuration:</div>\n                <div className=\"space-y-1\">\n                  {Object.entries(section.settings).slice(0, 3).map(([key, value]) => (\n                    <div key={key} className=\"flex justify-between text-xs\">\n                      <span className=\"text-gray-600 capitalize\">{key.replace(/([A-Z])/g, ' $1')}:</span>\n                      <span className=\"text-gray-900 font-medium truncate ml-2 max-w-32\">\n                        {String(value)}\n                      </span>\n                    </div>\n                  ))}\n                  {Object.keys(section.settings).length > 3 && (\n                    <div className=\"text-xs text-gray-400 pt-1 border-t border-gray-200\">\n                      +{Object.keys(section.settings).length - 3} more settings\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Quick Actions */}\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleVisibilityToggle}\n                disabled={isSaving}\n                className=\"h-7 px-2 text-xs\"\n              >\n                {section.isVisible ? (\n                  <>\n                    <Eye className=\"h-3 w-3 mr-1\" />\n                    Visible\n                  </>\n                ) : (\n                  <>\n                    <EyeOff className=\"h-3 w-3 mr-1\" />\n                    Hidden\n                  </>\n                )}\n              </Button>\n              \n              {showConfiguration && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleConfigure}\n                  disabled={isSaving}\n                  className=\"h-7 px-2 text-xs\"\n                >\n                  <Settings className=\"h-3 w-3 mr-1\" />\n                  Configure\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* Actions Menu */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-6 w-6 p-0 text-gray-400 hover:text-gray-600 opacity-0 group-hover:opacity-100 transition-opacity\"\n                disabled={isSaving}\n              >\n                <MoreVertical className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-48\">\n              {showConfiguration && (\n                <DropdownMenuItem onClick={handleConfigure}>\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  Configure Section\n                </DropdownMenuItem>\n              )}\n              \n              <DropdownMenuItem onClick={handleVisibilityToggle}>\n                {section.isVisible ? (\n                  <>\n                    <EyeOff className=\"h-4 w-4 mr-2\" />\n                    Hide Section\n                  </>\n                ) : (\n                  <>\n                    <Eye className=\"h-4 w-4 mr-2\" />\n                    Show Section\n                  </>\n                )}\n              </DropdownMenuItem>\n              \n              <DropdownMenuItem onClick={handleDuplicate}>\n                <Copy className=\"h-4 w-4 mr-2\" />\n                Duplicate\n              </DropdownMenuItem>\n              \n              <DropdownMenuSeparator />\n              \n              <DropdownMenuItem \n                onClick={handleDelete}\n                className=\"text-red-600 focus:text-red-600\"\n              >\n                <Trash2 className=\"h-4 w-4 mr-2\" />\n                Delete Section\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </CardContent>\n    </Card>\n  )\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1395, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/campaign-builder/publish-modal.tsx"],"sourcesContent":["'use client'\n\nimport React, { useState, useEffect, useMemo } from 'react'\nimport { Campaign } from '@/lib/types/database'\nimport { \n  publishCampaign, \n  unpublishCampaign, \n  checkUrlAvailability,\n  validateCampaignForPublishing,\n  generateCampaignSlug,\n  activateCampaign,\n  deactivateCampaign,\n  getCampaignActivationStatus\n} from '@/lib/data-access'\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Badge } from '@/components/ui/badge'\nimport { Switch } from '@/components/ui/switch'\nimport { toast } from '@/components/ui/use-toast'\nimport {\n  Globe,\n  Eye,\n  Share2,\n  Copy,\n  ExternalLink,\n  AlertCircle,\n  CheckCircle,\n  Loader2,\n  Zap,\n  Settings,\n  Lock,\n  Unlock\n} from 'lucide-react'\n\ninterface PublishModalProps {\n  campaign: Campaign | null\n  isOpen: boolean\n  onClose: () => void\n  onPublishSuccess: (updatedCampaign: Campaign) => void\n  className?: string\n}\n\ninterface ValidationError {\n  field: string\n  message: string\n}\n\ninterface UrlCheck {\n  available: boolean\n  suggestions?: string[]\n  checking: boolean\n  error?: string\n}\n\n// Simple modal component since Dialog is not available\nfunction Modal({ isOpen, onClose, children }: { isOpen: boolean; onClose: () => void; children: React.ReactNode }) {\n  if (!isOpen) return null\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n      <div className=\"fixed inset-0 bg-black/50\" onClick={onClose} />\n      <div className=\"relative bg-white rounded-lg shadow-lg max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\n        {children}\n      </div>\n    </div>\n  )\n}\n\n// Simple alert component since Alert is not available\nfunction Alert({ variant, children }: { variant?: 'default' | 'destructive'; children: React.ReactNode }) {\n  return (\n    <div className={cn(\n      'p-4 rounded-lg border',\n      variant === 'destructive' ? 'bg-red-50 border-red-200 text-red-800' : 'bg-blue-50 border-blue-200 text-blue-800'\n    )}>\n      {children}\n    </div>\n  )\n}\n\n// Simple separator component\nfunction Separator() {\n  return <div className=\"h-px bg-gray-200 my-4\" />\n}\n\nexport function PublishModal({\n  campaign,\n  isOpen,\n  onClose,\n  onPublishSuccess,\n  className\n}: PublishModalProps) {\n  // Form state\n  const [isPublishing, setIsPublishing] = useState(false)\n  const [useCustomUrl, setUseCustomUrl] = useState(false)\n  const [customUrl, setCustomUrl] = useState('')\n  const [validationErrors, setValidationErrors] = useState<string[]>([])\n  const [activeTab, setActiveTab] = useState<'url' | 'settings' | 'activation'>('url')\n  \n  // Activation state\n  const [activationStatus, setActivationStatus] = useState<{\n    isPublished: boolean\n    isActive: boolean\n    canActivate: boolean\n  }>({\n    isPublished: false,\n    isActive: false,\n    canActivate: false\n  })\n  const [isTogglingActivation, setIsTogglingActivation] = useState(false)\n  \n  // UI state\n  const [keepUrlOnUnpublish, setKeepUrlOnUnpublish] = useState(true)\n  const [urlCheck, setUrlCheck] = useState<UrlCheck>({\n    available: true,\n    checking: false\n  })\n  \n  // Reset form when modal opens/closes or campaign changes\n  useEffect(() => {\n    if (isOpen && campaign) {\n      setCustomUrl('')\n      setUseCustomUrl(false)\n      setKeepUrlOnUnpublish(true)\n      setValidationErrors([])\n      setUrlCheck({ available: true, checking: false })\n      \n      // Pre-populate with existing URL if published\n      if (campaign.status === 'published' && campaign.published_url) {\n        setCustomUrl(campaign.published_url)\n        setUseCustomUrl(true)\n      }\n    }\n  }, [isOpen, campaign])\n\n  // Validate campaign when modal opens\n  useEffect(() => {\n    const validateCampaign = async () => {\n      if (!isOpen || !campaign) return\n      \n      try {\n        const result = await validateCampaignForPublishing(campaign.id)\n        if (result.success && result.data) {\n          if (!result.data.isValid) {\n            setValidationErrors(\n              result.data.errors\n            )\n          } else {\n            setValidationErrors([])\n          }\n        }\n      } catch (error) {\n        console.error('Error validating campaign:', error)\n        setValidationErrors([\n          'Failed to validate campaign'\n        ])\n      }\n    }\n\n    validateCampaign()\n  }, [isOpen, campaign])\n\n  // Load activation status when modal opens\n  useEffect(() => {\n    const loadActivationStatus = async () => {\n      if (!isOpen || !campaign) return\n      \n      try {\n        const result = await getCampaignActivationStatus(campaign.id)\n        if (result.success && result.data) {\n          setActivationStatus(result.data)\n        }\n      } catch (error) {\n        console.error('Error loading activation status:', error)\n      }\n    }\n\n    loadActivationStatus()\n  }, [isOpen, campaign])\n\n  // Check URL availability when custom URL changes\n  useEffect(() => {\n    const checkUrl = async () => {\n      if (!useCustomUrl || !customUrl.trim() || customUrl.length < 3) {\n        setUrlCheck({ available: true, checking: false })\n        return\n      }\n\n      const slug = customUrl.trim().toLowerCase()\n      \n      // Basic format validation\n      const slugRegex = /^[a-z0-9-]+$/\n      if (!slugRegex.test(slug)) {\n        setUrlCheck({\n          available: false,\n          checking: false,\n          error: 'URL can only contain lowercase letters, numbers, and hyphens'\n        })\n        return\n      }\n\n      setUrlCheck(prev => ({ ...prev, checking: true }))\n\n      try {\n        const result = await checkUrlAvailability(slug, campaign?.id)\n        if (result.success && result.data) {\n          setUrlCheck({\n            available: result.data.available,\n            suggestions: result.data.suggestions,\n            checking: false,\n            error: result.data.available ? undefined : 'This URL is already taken'\n          })\n        } else {\n          setUrlCheck({\n            available: false,\n            checking: false,\n            error: 'Unable to check URL availability'\n          })\n        }\n      } catch (error) {\n        console.error('Error checking URL availability:', error)\n        setUrlCheck({\n          available: false,\n          checking: false,\n          error: 'Unable to check URL availability'\n        })\n      }\n    }\n\n    const timeoutId = setTimeout(checkUrl, 500) // Debounce\n    return () => clearTimeout(timeoutId)\n  }, [customUrl, useCustomUrl, campaign?.id])\n\n  // Generate suggested URL from campaign name\n  const suggestedUrl = useMemo(() => {\n    if (!campaign?.name) return ''\n    \n    return campaign.name\n      .toLowerCase()\n      .replace(/[^a-z0-9\\s-]/g, '')\n      .replace(/\\s+/g, '-')\n      .replace(/-+/g, '-')\n      .trim()\n      .substring(0, 50)\n      .replace(/^-+|-+$/g, '')\n  }, [campaign?.name])\n\n  const finalUrl = useCustomUrl ? customUrl.trim() : suggestedUrl\n  const fullUrl = finalUrl && typeof window !== 'undefined' ? `${window.location.origin}/c/${finalUrl}` : ''\n\n  const canPublish = campaign && \n    validationErrors.length === 0 && \n    (!useCustomUrl || (urlCheck.available && !urlCheck.checking)) &&\n    finalUrl.length >= 3\n\n  const handlePublish = async () => {\n    if (!campaign || !canPublish) return\n\n    try {\n      setIsPublishing(true)\n      \n      const slug = useCustomUrl ? customUrl.trim() : undefined\n      const result = await publishCampaign(campaign.id, slug)\n      \n      if (!result.success || !result.data) {\n        throw new Error(result.error || 'Failed to publish campaign')\n      }\n\n      onPublishSuccess(result.data)\n      \n      toast({\n        title: 'Campaign published!',\n        description: `Your campaign is now live at ${result.data.published_url}`,\n        duration: 5000\n      })\n      \n      onClose()\n    } catch (error) {\n      console.error('Error publishing campaign:', error)\n      const message = error instanceof Error ? error.message : 'Failed to publish campaign'\n      toast({\n        title: 'Publishing failed',\n        description: message,\n        variant: 'destructive'\n      })\n    } finally {\n      setIsPublishing(false)\n    }\n  }\n\n  const handleUnpublish = async () => {\n    if (!campaign) return\n\n    try {\n      setIsPublishing(true)\n      \n      const result = await unpublishCampaign(campaign.id, keepUrlOnUnpublish)\n      \n      if (!result.success || !result.data) {\n        throw new Error(result.error || 'Failed to unpublish campaign')\n      }\n\n      onPublishSuccess(result.data)\n      \n      toast({\n        title: 'Campaign unpublished',\n        description: keepUrlOnUnpublish \n          ? 'Campaign unpublished (URL preserved)' \n          : 'Campaign unpublished and URL cleared',\n        duration: 5000\n      })\n      \n      onClose()\n    } catch (error) {\n      console.error('Error unpublishing campaign:', error)\n      const message = error instanceof Error ? error.message : 'Failed to unpublish campaign'\n      toast({\n        title: 'Unpublish failed',\n        description: message,\n        variant: 'destructive'\n      })\n    } finally {\n      setIsPublishing(false)\n    }\n  }\n\n  const handleToggleActivation = async () => {\n    if (!campaign || !activationStatus.isPublished) return\n\n    try {\n      setIsTogglingActivation(true)\n      \n      const result = activationStatus.isActive \n        ? await deactivateCampaign(campaign.id)\n        : await activateCampaign(campaign.id)\n      \n      if (!result.success || !result.data) {\n        throw new Error(result.error || 'Failed to toggle campaign activation')\n      }\n\n      // Update activation status\n      setActivationStatus(prev => ({\n        ...prev,\n        isActive: !prev.isActive\n      }))\n\n      // Update the campaign object if needed\n      onPublishSuccess(result.data)\n      \n      toast({\n        title: activationStatus.isActive ? 'Campaign deactivated' : 'Campaign activated',\n        description: activationStatus.isActive \n          ? 'Your campaign is no longer publicly accessible'\n          : 'Your campaign is now live and accessible to visitors',\n        duration: 5000\n      })\n      \n    } catch (error) {\n      console.error('Error toggling activation:', error)\n      const message = error instanceof Error ? error.message : 'Failed to toggle activation'\n      toast({\n        title: 'Activation toggle failed',\n        description: message,\n        variant: 'destructive'\n      })\n    } finally {\n      setIsTogglingActivation(false)\n    }\n  }\n\n  const copyUrlToClipboard = async () => {\n    if (!fullUrl) return\n    \n    try {\n      await navigator.clipboard.writeText(fullUrl)\n      toast({\n        title: 'URL copied!',\n        description: 'The campaign URL has been copied to your clipboard'\n      })\n    } catch (error) {\n      console.error('Error copying URL:', error)\n      toast({\n        title: 'Copy failed',\n        description: 'Unable to copy URL to clipboard',\n        variant: 'destructive'\n      })\n    }\n  }\n\n  const openPreview = () => {\n    if (!campaign) return\n    const previewUrl = `/campaigns/${campaign.id}/preview`\n    window.open(previewUrl, '_blank', 'noopener,noreferrer')\n  }\n\n  const isPublished = campaign?.status === 'published'\n\n  if (!campaign) return null\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <div className={cn('p-6', className)}>\n        {/* Header */}\n        <div className=\"mb-6\">\n          <h2 className=\"text-lg font-semibold flex items-center gap-2\">\n            {isPublished ? (\n              <>\n                <Globe className=\"h-5 w-5 text-green-600\" />\n                Manage Published Campaign\n              </>\n            ) : (\n              <>\n                <Zap className=\"h-5 w-5 text-blue-600\" />\n                Publish Campaign\n              </>\n            )}\n          </h2>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            {isPublished \n              ? 'Your campaign is currently live. You can update the URL or unpublish it.'\n              : 'Make your campaign public and generate a unique URL for sharing.'\n            }\n          </p>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* Validation Errors */}\n          {validationErrors.length > 0 && (\n            <Alert variant=\"destructive\">\n              <div className=\"space-y-1\">\n                <p className=\"font-medium flex items-center gap-2\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  Cannot publish campaign:\n                </p>\n                <ul className=\"list-disc list-inside space-y-1 text-sm\">\n                  {validationErrors.map((error, index) => (\n                    <li key={index}>{error}</li>\n                  ))}\n                </ul>\n              </div>\n            </Alert>\n          )}\n\n          {/* Campaign Status */}\n          <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex items-center gap-2\">\n                {isPublished ? (\n                  <Unlock className=\"h-4 w-4 text-green-600\" />\n                ) : (\n                  <Lock className=\"h-4 w-4 text-gray-500\" />\n                )}\n                <span className=\"font-medium\">\n                  {campaign.name}\n                </span>\n              </div>\n              <Badge \n                variant={isPublished ? 'default' : 'secondary'}\n                className={isPublished ? 'bg-green-100 text-green-800' : ''}\n              >\n                {isPublished ? 'Published' : 'Draft'}\n              </Badge>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={openPreview}\n              className=\"flex items-center gap-2\"\n            >\n              <Eye className=\"h-4 w-4\" />\n              Preview\n            </Button>\n          </div>\n\n          <Separator />\n\n          {/* URL Configuration */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"custom-url-toggle\" className=\"flex items-center gap-2\">\n                <Settings className=\"h-4 w-4\" />\n                Custom URL\n              </Label>\n              <Switch\n                id=\"custom-url-toggle\"\n                checked={useCustomUrl}\n                onCheckedChange={setUseCustomUrl}\n              />\n            </div>\n\n            {useCustomUrl ? (\n              <div className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"custom-url\">Campaign URL</Label>\n                  <div className=\"flex\">\n                    <div className=\"flex items-center px-3 border border-r-0 border-gray-300 bg-gray-50 rounded-l-md text-sm text-gray-500\">\n                      {typeof window !== 'undefined' ? window.location.origin : ''}/c/\n                    </div>\n                    <Input\n                      id=\"custom-url\"\n                      value={customUrl}\n                      onChange={(e) => setCustomUrl(e.target.value)}\n                      placeholder=\"my-campaign\"\n                      className=\"rounded-l-none\"\n                    />\n                  </div>\n                  {urlCheck.checking && (\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <Loader2 className=\"h-3 w-3 animate-spin\" />\n                      Checking availability...\n                    </div>\n                  )}\n                  {!urlCheck.checking && urlCheck.error && (\n                    <div className=\"flex items-center gap-2 text-sm text-red-600\">\n                      <AlertCircle className=\"h-3 w-3\" />\n                      {urlCheck.error}\n                    </div>\n                  )}\n                  {!urlCheck.checking && urlCheck.available && customUrl.length >= 3 && (\n                    <div className=\"flex items-center gap-2 text-sm text-green-600\">\n                      <CheckCircle className=\"h-3 w-3\" />\n                      URL is available\n                    </div>\n                  )}\n                </div>\n\n                {/* URL Suggestions */}\n                {!urlCheck.available && urlCheck.suggestions && urlCheck.suggestions.length > 0 && (\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-sm text-gray-600\">Suggestions:</Label>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {urlCheck.suggestions.slice(0, 3).map((suggestion) => (\n                        <Button\n                          key={suggestion}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setCustomUrl(suggestion)}\n                          className=\"text-xs\"\n                        >\n                          {suggestion}\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                <Label>Suggested URL</Label>\n                <div className=\"flex items-center gap-2 p-3 bg-gray-50 rounded-md\">\n                  <Globe className=\"h-4 w-4 text-gray-500\" />\n                  <span className=\"text-sm font-mono\">\n                    {typeof window !== 'undefined' ? window.location.origin : ''}/c/{suggestedUrl || 'campaign'}\n                  </span>\n                </div>\n              </div>\n            )}\n\n            {/* Final URL Preview */}\n            {fullUrl && (\n              <div className=\"space-y-2\">\n                <Label>Public Campaign URL</Label>\n                <div className=\"flex items-center gap-2 p-3 border rounded-md bg-green-50 border-green-200\">\n                  <Globe className=\"h-4 w-4 text-green-600\" />\n                  <span className=\"flex-1 text-sm font-mono text-green-800 truncate\">\n                    {fullUrl}\n                  </span>\n                  <div className=\"flex gap-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={copyUrlToClipboard}\n                      className=\"h-8 w-8 p-0 text-green-600 hover:text-green-700\"\n                    >\n                      <Copy className=\"h-3 w-3\" />\n                    </Button>\n                    {isPublished && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => window.open(fullUrl, '_blank')}\n                        className=\"h-8 w-8 p-0 text-green-600 hover:text-green-700\"\n                      >\n                        <ExternalLink className=\"h-3 w-3\" />\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Unpublish Options */}\n          {isPublished && (\n            <>\n              <Separator />\n              <div className=\"space-y-3\">\n                <Label className=\"text-base font-medium\">Unpublish Options</Label>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label htmlFor=\"keep-url\" className=\"text-sm\">Keep URL reserved</Label>\n                    <p className=\"text-xs text-gray-600\">\n                      Preserve your URL when unpublishing so you can republish later\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"keep-url\"\n                    checked={keepUrlOnUnpublish}\n                    onCheckedChange={setKeepUrlOnUnpublish}\n                  />\n                </div>\n              </div>\n            </>\n          )}\n\n          {/* Campaign Activation Controls */}\n          {isPublished && activationStatus.canActivate && (\n            <>\n              <Separator />\n              <div className=\"space-y-4\">\n                <Label className=\"text-base font-medium\">Campaign Activation</Label>\n                \n                {/* Activation Status Display */}\n                <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"flex items-center gap-2\">\n                      {activationStatus.isActive ? (\n                        <div className=\"flex items-center gap-2 text-green-600\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                          <span className=\"font-medium\">Active</span>\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center gap-2 text-orange-600\">\n                          <div className=\"w-2 h-2 bg-orange-500 rounded-full\"></div>\n                          <span className=\"font-medium\">Inactive</span>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">\n                      {activationStatus.isActive \n                        ? 'Your campaign is publicly accessible'\n                        : 'Your campaign is not accessible to visitors'\n                      }\n                    </div>\n                  </div>\n                  \n                  <Button\n                    variant={activationStatus.isActive ? \"outline\" : \"default\"}\n                    size=\"sm\"\n                    onClick={handleToggleActivation}\n                    disabled={isTogglingActivation}\n                    className={cn(\n                      \"flex items-center gap-2\",\n                      activationStatus.isActive \n                        ? \"text-orange-600 border-orange-300 hover:bg-orange-50\" \n                        : \"bg-green-600 hover:bg-green-700 text-white\"\n                    )}\n                  >\n                    {isTogglingActivation && <Loader2 className=\"h-3 w-3 animate-spin\" />}\n                    {activationStatus.isActive ? (\n                      <>\n                        <Lock className=\"h-3 w-3\" />\n                        Deactivate\n                      </>\n                    ) : (\n                      <>\n                        <Unlock className=\"h-3 w-3\" />\n                        Activate\n                      </>\n                    )}\n                  </Button>\n                </div>\n\n                {/* Activation Info */}\n                <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                  <div className=\"flex gap-3\">\n                    <div className=\"flex-shrink-0 mt-0.5\">\n                      <AlertCircle className=\"h-4 w-4 text-blue-600\" />\n                    </div>\n                    <div className=\"space-y-2 text-sm text-blue-800\">\n                      <p className=\"font-medium\">About Campaign Activation:</p>\n                      <ul className=\"space-y-1 text-xs\">\n                        <li>• <strong>Active:</strong> Campaign is publicly accessible via its URL</li>\n                        <li>• <strong>Inactive:</strong> Campaign URL returns \"not available\" message</li>\n                        <li>• Deactivating preserves your URL and all campaign data</li>\n                        <li>• You can reactivate anytime without losing settings</li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex justify-end gap-3 mt-6 pt-4 border-t\">\n          <Button variant=\"outline\" onClick={onClose} disabled={isPublishing}>\n            Cancel\n          </Button>\n          \n          {isPublished ? (\n            <Button\n              variant=\"destructive\"\n              onClick={handleUnpublish}\n              disabled={isPublishing}\n              className=\"flex items-center gap-2\"\n            >\n              {isPublishing && <Loader2 className=\"h-4 w-4 animate-spin\" />}\n              Unpublish Campaign\n            </Button>\n          ) : (\n            <Button\n              onClick={handlePublish}\n              disabled={!canPublish || isPublishing}\n              className=\"flex items-center gap-2\"\n            >\n              {isPublishing && <Loader2 className=\"h-4 w-4 animate-spin\" />}\n              <Share2 className=\"h-4 w-4\" />\n              Publish Campaign\n            </Button>\n          )}\n        </div>\n      </div>\n    </Modal>\n  )\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2643, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/campaign-builder/section-top-bar.tsx"],"sourcesContent":["'use client'\n\nimport { useState } from 'react'\nimport { InlineEditableText } from '@/components/ui/inline-editable-text'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { CampaignSection, SECTION_TYPES, getSectionTypeById } from '@/lib/types/campaign-builder'\nimport { cn } from '@/lib/utils'\nimport * as Icons from 'lucide-react'\nimport {\n  Eye,\n  EyeOff,\n  MoreVertical,\n  Trash2,\n  Settings,\n  GripVertical,\n  ChevronDown,\n  ChevronUp\n} from 'lucide-react'\n\ninterface SectionTopBarProps {\n  section: CampaignSection\n  isPreview?: boolean\n  isCollapsed?: boolean\n  onNameChange: (name: string) => Promise<void>\n  onTypeChange: (type: string) => void\n  onPreviewToggle: () => void\n  onVisibilityToggle: () => void\n  onDelete: () => void\n  onConfigure: () => void\n  onCollapseToggle: () => void\n  className?: string\n  dragHandleProps?: Record<string, any>\n}\n\nexport function SectionTopBar({\n  section,\n  isPreview = false,\n  isCollapsed = false,\n  onNameChange,\n  onTypeChange,\n  onPreviewToggle,\n  onVisibilityToggle,\n  onDelete,\n  onConfigure,\n  onCollapseToggle,\n  className,\n  dragHandleProps\n}: SectionTopBarProps) {\n  const [isChangingType, setIsChangingType] = useState(false)\n\n  const sectionType = getSectionTypeById(section.type)\n  const IconComponent = sectionType ? \n    Icons[sectionType.icon as keyof typeof Icons] as React.ComponentType<{ className?: string }> : \n    Icons.FileText\n\n  // Get available section types for the dropdown\n  const availableTypes = SECTION_TYPES.filter(type => type.id !== section.type)\n\n  // Handle type change\n  const handleTypeChange = async (newType: string) => {\n    setIsChangingType(true)\n    try {\n      onTypeChange(newType)\n    } finally {\n      setIsChangingType(false)\n    }\n  }\n\n  // Validate section name\n  const validateName = (name: string): string | null => {\n    if (!name.trim()) {\n      return 'Section name is required'\n    }\n    if (name.length > 50) {\n      return 'Name must be 50 characters or less'\n    }\n    // Check for valid variable name (alphanumeric + underscores)\n    if (!/^[a-zA-Z][a-zA-Z0-9_]*$/.test(name.trim())) {\n      return 'Name must be a valid variable name (letters, numbers, underscores)'\n    }\n    return null\n  }\n\n  return (\n    <div className={cn(\n      'flex items-center justify-between p-3 bg-white border-b border-gray-200',\n      'hover:bg-gray-50 transition-colors group',\n      className\n    )}>\n      {/* Left Side - Drag Handle, Icon, Name, Type */}\n      <div className=\"flex items-center space-x-3 flex-1 min-w-0\">\n        {/* Drag Handle */}\n        <button\n          {...dragHandleProps}\n          className=\"text-gray-400 hover:text-gray-600 cursor-grab active:cursor-grabbing opacity-0 group-hover:opacity-100 transition-opacity\"\n        >\n          <GripVertical className=\"h-4 w-4\" />\n        </button>\n\n        {/* Section Icon */}\n        <div className={cn(\n          'flex-shrink-0 w-8 h-8 rounded-md flex items-center justify-center',\n          sectionType?.color || 'bg-gray-100 text-gray-600'\n        )}>\n          {IconComponent && (\n            <IconComponent className=\"h-4 w-4\" />\n          )}\n        </div>\n\n        {/* Section Name (Editable) */}\n        <div className=\"flex-1 min-w-0\">\n          <InlineEditableText\n            value={section.title}\n            onSave={onNameChange}\n            variant=\"body\"\n            placeholder=\"Enter section name...\"\n            className=\"font-medium text-gray-900\"\n            showEditIcon={false}\n            showSaveStatus={true}\n            validation={validateName}\n            maxLength={50}\n            required={true}\n          />\n        </div>\n\n        {/* Section Type Dropdown */}\n        <Select\n          value={section.type}\n          onValueChange={handleTypeChange}\n          disabled={isChangingType}\n        >\n          <SelectTrigger className=\"w-40 h-8 text-xs\">\n            <SelectValue>\n              <div className=\"flex items-center space-x-2\">\n                {IconComponent && <IconComponent className=\"h-3 w-3\" />}\n                <span className=\"truncate\">{sectionType?.name || section.type}</span>\n              </div>\n            </SelectValue>\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value={section.type}>\n              <div className=\"flex items-center space-x-2\">\n                {IconComponent && <IconComponent className=\"h-3 w-3\" />}\n                <span>{sectionType?.name || section.type}</span>\n                <Badge variant=\"secondary\" className=\"ml-2 text-xs\">Current</Badge>\n              </div>\n            </SelectItem>\n            {availableTypes.map((type) => {\n              const TypeIcon = Icons[type.icon as keyof typeof Icons] as React.ComponentType<{ className?: string }>\n              return (\n                <SelectItem key={type.id} value={type.id}>\n                  <div className=\"flex items-center space-x-2\">\n                    <TypeIcon className=\"h-3 w-3\" />\n                    <span>{type.name}</span>\n                    <Badge \n                      variant=\"outline\" \n                      className={cn(\n                        'ml-2 text-xs',\n                        type.category === 'input' && 'border-blue-200 text-blue-700',\n                        type.category === 'content' && 'border-green-200 text-green-700',\n                        type.category === 'logic' && 'border-purple-200 text-purple-700',\n                        type.category === 'output' && 'border-orange-200 text-orange-700'\n                      )}\n                    >\n                      {type.category}\n                    </Badge>\n                  </div>\n                </SelectItem>\n              )\n            })}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Right Side - Controls */}\n      <div className=\"flex items-center space-x-1\">\n        {/* Section Order Badge */}\n        <Badge variant=\"outline\" className=\"text-xs font-mono\">\n          #{section.order}\n        </Badge>\n\n        {/* Preview Toggle */}\n        <Button\n          variant={isPreview ? \"default\" : \"ghost\"}\n          size=\"sm\"\n          onClick={onPreviewToggle}\n          className=\"h-7 px-2 text-xs\"\n        >\n          {isPreview ? (\n            <>\n              <Eye className=\"h-3 w-3 mr-1\" />\n              Preview\n            </>\n          ) : (\n            <>\n              <Settings className=\"h-3 w-3 mr-1\" />\n              Edit\n            </>\n          )}\n        </Button>\n\n        {/* Visibility Toggle */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onVisibilityToggle}\n          className={cn(\n            \"h-7 px-2 text-xs\",\n            !section.isVisible && \"text-orange-600 bg-orange-50 hover:bg-orange-100\"\n          )}\n        >\n          {section.isVisible ? (\n            <Eye className=\"h-3 w-3\" />\n          ) : (\n            <EyeOff className=\"h-3 w-3\" />\n          )}\n        </Button>\n\n        {/* Collapse Toggle */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onCollapseToggle}\n          className=\"h-7 px-2 text-xs\"\n        >\n          {isCollapsed ? (\n            <ChevronDown className=\"h-3 w-3\" />\n          ) : (\n            <ChevronUp className=\"h-3 w-3\" />\n          )}\n        </Button>\n\n        {/* More Actions Menu */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-7 w-7 p-0 text-gray-400 hover:text-gray-600\"\n            >\n              <MoreVertical className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-48\">\n            <DropdownMenuItem onClick={onConfigure}>\n              <Settings className=\"h-4 w-4 mr-2\" />\n              Configure Section\n            </DropdownMenuItem>\n            \n            <DropdownMenuItem onClick={onVisibilityToggle}>\n              {section.isVisible ? (\n                <>\n                  <EyeOff className=\"h-4 w-4 mr-2\" />\n                  Hide Section\n                </>\n              ) : (\n                <>\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  Show Section\n                </>\n              )}\n            </DropdownMenuItem>\n            \n            <DropdownMenuItem \n              onClick={onDelete}\n              className=\"text-red-600 focus:text-red-600\"\n            >\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              Delete Section\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </div>\n  )\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3125, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/campaign-builder/section-bottom-bar.tsx"],"sourcesContent":["'use client'\n\nimport { InlineEditableText } from '@/components/ui/inline-editable-text'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Switch } from '@/components/ui/switch'\nimport { Label } from '@/components/ui/label'\nimport { CampaignSection, getSectionTypeById } from '@/lib/types/campaign-builder'\nimport { cn } from '@/lib/utils'\nimport { ChevronRight, AlertCircle } from 'lucide-react'\n\ninterface SectionBottomBarProps {\n  section: CampaignSection\n  isQuestion?: boolean\n  isRequired?: boolean\n  buttonLabel?: string\n  onRequiredChange?: (required: boolean) => void\n  onButtonLabelChange?: (label: string) => Promise<void>\n  className?: string\n  showButtonPreview?: boolean\n}\n\nexport function SectionBottomBar({\n  section,\n  isQuestion = false,\n  isRequired = false,\n  buttonLabel = 'Next',\n  onRequiredChange,\n  onButtonLabelChange,\n  className,\n  showButtonPreview = true\n}: SectionBottomBarProps) {\n  const sectionType = getSectionTypeById(section.type)\n  \n  // Determine if this section type typically has questions\n  const isQuestionType = sectionType?.category === 'input' || \n    ['multiple-choice', 'text-input', 'rating-scale', 'email-capture', 'contact-form'].includes(section.type)\n\n  // Validate button label\n  const validateButtonLabel = (label: string): string | null => {\n    if (!label.trim()) {\n      return 'Button label is required'\n    }\n    if (label.length > 30) {\n      return 'Button label must be 30 characters or less'\n    }\n    return null\n  }\n\n  // Don't render if no controls are needed\n  if (!isQuestionType && !showButtonPreview) {\n    return null\n  }\n\n  return (\n    <div className={cn(\n      'flex items-center justify-between p-3 bg-gray-50 border-t border-gray-200',\n      'rounded-b-lg',\n      className\n    )}>\n      {/* Left Side - Question Controls */}\n      <div className=\"flex items-center space-x-4\">\n        {/* Required Toggle for Question Types */}\n        {isQuestionType && onRequiredChange && (\n          <div className=\"flex items-center space-x-2\">\n            <Switch\n              id={`required-${section.id}`}\n              checked={isRequired}\n              onCheckedChange={onRequiredChange}\n              className=\"data-[state=checked]:bg-red-500\"\n            />\n            <Label \n              htmlFor={`required-${section.id}`}\n              className=\"text-sm font-medium cursor-pointer\"\n            >\n              Required\n            </Label>\n            {isRequired && (\n              <Badge variant=\"outline\" className=\"text-xs text-red-600 border-red-200\">\n                <AlertCircle className=\"h-3 w-3 mr-1\" />\n                Required\n              </Badge>\n            )}\n          </div>\n        )}\n\n        {/* Section Type Info */}\n        <div className=\"flex items-center space-x-2 text-xs text-gray-500\">\n          <span className=\"font-medium\">{sectionType?.name || section.type}</span>\n          {sectionType?.category && (\n            <>\n              <span>•</span>\n              <Badge \n                variant=\"outline\" \n                className={cn(\n                  'text-xs',\n                  sectionType.category === 'input' && 'border-blue-200 text-blue-700',\n                  sectionType.category === 'content' && 'border-green-200 text-green-700',\n                  sectionType.category === 'logic' && 'border-purple-200 text-purple-700',\n                  sectionType.category === 'output' && 'border-orange-200 text-orange-700'\n                )}\n              >\n                {sectionType.category}\n              </Badge>\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* Right Side - Button Controls */}\n      {showButtonPreview && (\n        <div className=\"flex items-center space-x-3\">\n          {/* Button Label Editor */}\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-xs text-gray-500 font-medium\">Button:</span>\n            {onButtonLabelChange ? (\n              <InlineEditableText\n                value={buttonLabel}\n                onSave={onButtonLabelChange}\n                variant=\"caption\"\n                placeholder=\"Enter button text...\"\n                className=\"font-medium text-gray-700 px-2 py-1 bg-white border border-gray-200 rounded\"\n                showEditIcon={false}\n                showSaveStatus={true}\n                validation={validateButtonLabel}\n                maxLength={30}\n                required={true}\n              />\n            ) : (\n              <span className=\"text-xs font-medium text-gray-700 px-2 py-1 bg-white border border-gray-200 rounded\">\n                {buttonLabel}\n              </span>\n            )}\n          </div>\n\n          {/* Button Preview */}\n          <Button\n            size=\"sm\"\n            className=\"h-7 px-3 text-xs pointer-events-none\"\n            disabled\n          >\n            {buttonLabel}\n            <ChevronRight className=\"h-3 w-3 ml-1\" />\n          </Button>\n        </div>\n      )}\n    </div>\n  )\n} "],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AATA;;;;;;;;;;AAsBO,SAAS,iBAAiB,EAC/B,OAAO,EACP,aAAa,KAAK,EAClB,aAAa,KAAK,EAClB,cAAc,MAAM,EACpB,gBAAgB,EAChB,mBAAmB,EACnB,SAAS,EACT,oBAAoB,IAAI,EACF;IACtB,MAAM,cAAc,CAAA,GAAA,mIAAA,CAAA,qBAAkB,AAAD,EAAE,QAAQ,IAAI;IAEnD,yDAAyD;IACzD,MAAM,iBAAiB,aAAa,aAAa,WAC/C;QAAC;QAAmB;QAAc;QAAgB;QAAiB;KAAe,CAAC,QAAQ,CAAC,QAAQ,IAAI;IAE1G,wBAAwB;IACxB,MAAM,sBAAsB,CAAC;QAC3B,IAAI,CAAC,MAAM,IAAI,IAAI;YACjB,OAAO;QACT;QACA,IAAI,MAAM,MAAM,GAAG,IAAI;YACrB,OAAO;QACT;QACA,OAAO;IACT;IAEA,yCAAyC;IACzC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB;QACzC,OAAO;IACT;IAEA,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACf,6EACA,gBACA;;0BAGA,8OAAC;gBAAI,WAAU;;oBAEZ,kBAAkB,kCACjB,8OAAC;wBAAI,WAAU;;0CACb,8OAAC,2HAAA,CAAA,SAAM;gCACL,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,EAAE;gCAC5B,SAAS;gCACT,iBAAiB;gCACjB,WAAU;;;;;;0CAEZ,8OAAC,0HAAA,CAAA,QAAK;gCACJ,SAAS,CAAC,SAAS,EAAE,QAAQ,EAAE,EAAE;gCACjC,WAAU;0CACX;;;;;;4BAGA,4BACC,8OAAC,0HAAA,CAAA,QAAK;gCAAC,SAAQ;gCAAU,WAAU;;kDACjC,8OAAC,oNAAA,CAAA,cAAW;wCAAC,WAAU;;;;;;oCAAiB;;;;;;;;;;;;;kCAQhD,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAK,WAAU;0CAAe,aAAa,QAAQ,QAAQ,IAAI;;;;;;4BAC/D,aAAa,0BACZ;;kDACE,8OAAC;kDAAK;;;;;;kDACN,8OAAC,0HAAA,CAAA,QAAK;wCACJ,SAAQ;wCACR,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,WACA,YAAY,QAAQ,KAAK,WAAW,iCACpC,YAAY,QAAQ,KAAK,aAAa,mCACtC,YAAY,QAAQ,KAAK,WAAW,qCACpC,YAAY,QAAQ,KAAK,YAAY;kDAGtC,YAAY,QAAQ;;;;;;;;;;;;;;;;;;;;YAQ9B,mCACC,8OAAC;gBAAI,WAAU;;kCAEb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAK,WAAU;0CAAoC;;;;;;4BACnD,oCACC,8OAAC,+IAAA,CAAA,qBAAkB;gCACjB,OAAO;gCACP,QAAQ;gCACR,SAAQ;gCACR,aAAY;gCACZ,WAAU;gCACV,cAAc;gCACd,gBAAgB;gCAChB,YAAY;gCACZ,WAAW;gCACX,UAAU;;;;;qDAGZ,8OAAC;gCAAK,WAAU;0CACb;;;;;;;;;;;;kCAMP,8OAAC,2HAAA,CAAA,SAAM;wBACL,MAAK;wBACL,WAAU;wBACV,QAAQ;;4BAEP;0CACD,8OAAC,sNAAA,CAAA,eAAY;gCAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;;AAMpC","debugId":null}},
    {"offset": {"line": 3348, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/campaign-builder/question-types/text-question.tsx"],"sourcesContent":["'use client'\n\nimport { useState } from 'react'\nimport { InlineEditableText } from '@/components/ui/inline-editable-text'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Label } from '@/components/ui/label'\nimport { Switch } from '@/components/ui/switch'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { CampaignSection } from '@/lib/types/campaign-builder'\nimport { cn } from '@/lib/utils'\nimport { Type, AlignLeft, Hash, Mail, Phone, Calendar } from 'lucide-react'\n\ninterface TextQuestionProps {\n  section: CampaignSection\n  isPreview?: boolean\n  onUpdate: (updates: Partial<CampaignSection>) => Promise<void>\n  className?: string\n}\n\ntype TextInputType = 'text' | 'textarea' | 'email' | 'phone' | 'number' | 'date'\n\ninterface TextQuestionSettings {\n  content?: string\n  placeholder?: string\n  inputType?: TextInputType\n  minLength?: number\n  maxLength?: number\n  required?: boolean\n  buttonLabel?: string\n  helpText?: string\n  validation?: {\n    pattern?: string\n    message?: string\n  }\n}\n\nexport function TextQuestion({ \n  section, \n  isPreview = false, \n  onUpdate, \n  className \n}: TextQuestionProps) {\n  const [isSaving, setIsSaving] = useState(false)\n  \n  // Get current settings with defaults\n  const settings = section.settings as TextQuestionSettings || {}\n  const {\n    content = '',\n    placeholder = 'Type your answer here...',\n    inputType = 'text',\n    minLength = 0,\n    maxLength = 500,\n    required = false,\n    buttonLabel = 'Next',\n    helpText = '',\n    validation = {}\n  } = settings\n\n  // Handle settings updates\n  const updateSettings = async (newSettings: Partial<TextQuestionSettings>) => {\n    setIsSaving(true)\n    try {\n      await onUpdate({\n        settings: {\n          ...settings,\n          ...newSettings\n        }\n      })\n    } catch (error) {\n      console.error('Failed to update text question settings:', error)\n      throw error\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  // Handle content change\n  const handleContentChange = async (newContent: string) => {\n    await updateSettings({ content: newContent })\n  }\n\n  // Handle placeholder change\n  const handlePlaceholderChange = async (newPlaceholder: string) => {\n    await updateSettings({ placeholder: newPlaceholder })\n  }\n\n  // Handle help text change\n  const handleHelpTextChange = async (newHelpText: string) => {\n    await updateSettings({ helpText: newHelpText })\n  }\n\n  // Input type icons\n  const getInputTypeIcon = (type: TextInputType) => {\n    switch (type) {\n      case 'textarea': return AlignLeft\n      case 'email': return Mail\n      case 'phone': return Phone\n      case 'number': return Hash\n      case 'date': return Calendar\n      default: return Type\n    }\n  }\n\n  // Validation\n  const validateContent = (text: string): string | null => {\n    if (!text.trim()) {\n      return 'Question text is required'\n    }\n    if (text.length > 200) {\n      return 'Question text must be 200 characters or less'\n    }\n    return null\n  }\n\n  if (isPreview) {\n    // Preview Mode - Show how the question appears to users\n    return (\n      <div className={cn('p-6', className)}>\n        <div className=\"space-y-4\">\n          {/* Question Text */}\n          <div>\n            <h3 className=\"text-lg font-medium mb-2\">\n              {content || 'Your question text here...'}\n              {required && <span className=\"text-red-500 ml-1\">*</span>}\n            </h3>\n            {helpText && (\n              <p className=\"text-sm text-gray-600 mb-4\">{helpText}</p>\n            )}\n          </div>\n\n          {/* Input Field */}\n          <div className=\"space-y-2\">\n            {inputType === 'textarea' ? (\n              <Textarea\n                placeholder={placeholder}\n                disabled\n                className=\"min-h-[100px] resize-none\"\n                maxLength={maxLength}\n              />\n            ) : (\n              <Input\n                type={inputType === 'text' ? 'text' : inputType}\n                placeholder={placeholder}\n                disabled\n                maxLength={maxLength}\n              />\n            )}\n            \n            {/* Character limit indicator */}\n            {maxLength > 0 && (\n              <div className=\"text-xs text-gray-500 text-right\">\n                0 / {maxLength} characters\n              </div>\n            )}\n          </div>\n\n          {/* Validation preview */}\n          {validation.pattern && (\n            <div className=\"text-xs text-gray-500\">\n              <strong>Format:</strong> {validation.message || 'Must match required pattern'}\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  // Edit Mode - Configuration interface\n  return (\n    <div className={cn('p-6', className)}>\n      <div className=\"space-y-6\">\n        {/* Question Content */}\n        <div>\n          <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n            Question Text {required && <span className=\"text-red-500\">*</span>}\n          </Label>\n          <InlineEditableText\n            value={content}\n            onSave={handleContentChange}\n            variant=\"body\"\n            placeholder=\"Enter your question text...\"\n            className=\"min-h-[60px] p-3 border border-gray-200 rounded-lg w-full\"\n            showEditIcon={false}\n            showSaveStatus={true}\n            multiline={true}\n            maxLength={200}\n            required={true}\n            validation={validateContent}\n          />\n        </div>\n\n        {/* Input Type Selection */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n              Input Type\n            </Label>\n            <Select\n              value={inputType}\n              onValueChange={(value: TextInputType) => updateSettings({ inputType: value })}\n              disabled={isSaving}\n            >\n              <SelectTrigger>\n                <SelectValue>\n                  <div className=\"flex items-center space-x-2\">\n                    {(() => {\n                      const Icon = getInputTypeIcon(inputType)\n                      return <Icon className=\"h-4 w-4\" />\n                    })()}\n                    <span className=\"capitalize\">{inputType === 'textarea' ? 'Long Text' : inputType}</span>\n                  </div>\n                </SelectValue>\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"text\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Type className=\"h-4 w-4\" />\n                    <span>Short Text</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"textarea\">\n                  <div className=\"flex items-center space-x-2\">\n                    <AlignLeft className=\"h-4 w-4\" />\n                    <span>Long Text</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"email\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Mail className=\"h-4 w-4\" />\n                    <span>Email</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"phone\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Phone className=\"h-4 w-4\" />\n                    <span>Phone</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"number\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Hash className=\"h-4 w-4\" />\n                    <span>Number</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"date\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Calendar className=\"h-4 w-4\" />\n                    <span>Date</span>\n                  </div>\n                </SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n              Character Limit\n            </Label>\n            <Input\n              type=\"number\"\n              value={maxLength}\n              onChange={(e) => updateSettings({ maxLength: parseInt(e.target.value) || 0 })}\n              min={0}\n              max={2000}\n              className=\"w-full\"\n              disabled={isSaving}\n            />\n          </div>\n        </div>\n\n        {/* Placeholder Text */}\n        <div>\n          <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n            Placeholder Text\n          </Label>\n          <InlineEditableText\n            value={placeholder}\n            onSave={handlePlaceholderChange}\n            variant=\"body\"\n            placeholder=\"Enter placeholder text...\"\n            className=\"p-3 border border-gray-200 rounded-lg w-full text-gray-500\"\n            showEditIcon={false}\n            showSaveStatus={true}\n            maxLength={100}\n          />\n        </div>\n\n        {/* Help Text */}\n        <div>\n          <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n            Help Text (Optional)\n          </Label>\n          <InlineEditableText\n            value={helpText}\n            onSave={handleHelpTextChange}\n            variant=\"body\"\n            placeholder=\"Add helpful instructions for users...\"\n            className=\"p-3 border border-gray-200 rounded-lg w-full text-gray-600\"\n            showEditIcon={false}\n            showSaveStatus={true}\n            maxLength={200}\n            multiline={true}\n          />\n        </div>\n\n        {/* Validation Options */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Switch\n              id=\"required\"\n              checked={required}\n              onCheckedChange={(checked) => updateSettings({ required: checked })}\n              disabled={isSaving}\n            />\n            <Label htmlFor=\"required\" className=\"text-sm font-medium cursor-pointer\">\n              Required field\n            </Label>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                Min Length\n              </Label>\n              <Input\n                type=\"number\"\n                value={minLength}\n                onChange={(e) => updateSettings({ minLength: parseInt(e.target.value) || 0 })}\n                min={0}\n                max={maxLength}\n                disabled={isSaving}\n              />\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                Validation Pattern (Regex)\n              </Label>\n              <Input\n                type=\"text\"\n                value={validation.pattern || ''}\n                onChange={(e) => updateSettings({ \n                  validation: { \n                    ...validation, \n                    pattern: e.target.value \n                  } \n                })}\n                placeholder=\"^[A-Za-z]+$\"\n                disabled={isSaving}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Preview Section */}\n        <div className=\"border-t pt-4\">\n          <Label className=\"text-sm font-medium text-gray-700 mb-3 block\">\n            Preview\n          </Label>\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <div className=\"space-y-3\">\n              <div className=\"font-medium\">\n                {content || 'Your question text here...'}\n                {required && <span className=\"text-red-500 ml-1\">*</span>}\n              </div>\n              {helpText && (\n                <div className=\"text-sm text-gray-600\">{helpText}</div>\n              )}\n              {inputType === 'textarea' ? (\n                <Textarea\n                  placeholder={placeholder}\n                  disabled\n                  className=\"bg-white\"\n                />\n              ) : (\n                <Input\n                  type={inputType}\n                  placeholder={placeholder}\n                  disabled\n                  className=\"bg-white\"\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Saving Indicator */}\n      {isSaving && (\n        <div className=\"absolute top-4 right-4\">\n          <div className=\"flex items-center space-x-2 text-blue-600 bg-blue-50 px-3 py-1 rounded-full\">\n            <div className=\"w-3 h-3 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\" />\n            <span className=\"text-xs font-medium\">Saving...</span>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4199, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/campaign-builder/question-types/multiple-choice-question.tsx"],"sourcesContent":["'use client'\n\nimport { useState } from 'react'\nimport { InlineEditableText } from '@/components/ui/inline-editable-text'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Switch } from '@/components/ui/switch'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { CampaignSection } from '@/lib/types/campaign-builder'\nimport { cn } from '@/lib/utils'\nimport { Plus, X, GripVertical, Circle, Square, CheckSquare } from 'lucide-react'\nimport { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core'\nimport { arrayMove, SortableContext, sortableKeyboardCoordinates, verticalListSortingStrategy } from '@dnd-kit/sortable'\nimport { useSortable } from '@dnd-kit/sortable'\nimport { CSS } from '@dnd-kit/utilities'\n\ninterface MultipleChoiceQuestionProps {\n  section: CampaignSection\n  isPreview?: boolean\n  onUpdate: (updates: Partial<CampaignSection>) => Promise<void>\n  className?: string\n}\n\ntype SelectionType = 'single' | 'multiple'\n\ninterface ChoiceOption {\n  id: string\n  text: string\n  order: number\n}\n\ninterface MultipleChoiceSettings {\n  content?: string\n  options?: ChoiceOption[]\n  selectionType?: SelectionType\n  minSelections?: number\n  maxSelections?: number\n  required?: boolean\n  buttonLabel?: string\n  helpText?: string\n  randomizeOrder?: boolean\n  allowOther?: boolean\n  otherLabel?: string\n}\n\n// Sortable Option Component\nfunction SortableOption({ \n  option, \n  onUpdate, \n  onDelete, \n  isPreview = false,\n  selectionType = 'single'\n}: {\n  option: ChoiceOption\n  onUpdate: (id: string, text: string) => void\n  onDelete: (id: string) => void\n  isPreview?: boolean\n  selectionType?: SelectionType\n}) {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({ id: option.id })\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  }\n\n  if (isPreview) {\n    return (\n      <label className={cn(\n        \"flex items-center space-x-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors\",\n        isDragging && \"opacity-50\"\n      )}>\n        {selectionType === 'single' ? (\n          <input type=\"radio\" name=\"preview-options\" className=\"h-4 w-4\" />\n        ) : (\n          <input type=\"checkbox\" className=\"h-4 w-4\" />\n        )}\n        <span className=\"flex-1\">{option.text || `Option ${option.order}`}</span>\n      </label>\n    )\n  }\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      className={cn(\n        \"flex items-center space-x-3 p-3 border border-gray-200 rounded-lg bg-white\",\n        isDragging && \"opacity-50 shadow-lg\"\n      )}\n    >\n      {/* Drag Handle */}\n      <div {...attributes} {...listeners} className=\"cursor-grab hover:cursor-grabbing\">\n        <GripVertical className=\"h-4 w-4 text-gray-400\" />\n      </div>\n\n      {/* Selection Type Icon */}\n      <div className=\"flex-shrink-0\">\n        {selectionType === 'single' ? (\n          <Circle className=\"h-4 w-4 text-gray-400\" />\n        ) : (\n          <Square className=\"h-4 w-4 text-gray-400\" />\n        )}\n      </div>\n\n      {/* Option Text */}\n      <div className=\"flex-1\">\n        <InlineEditableText\n          value={option.text}\n          onSave={(newText) => onUpdate(option.id, newText)}\n          variant=\"body\"\n          placeholder={`Option ${option.order}`}\n          className=\"w-full\"\n          showEditIcon={false}\n          showSaveStatus={false}\n          maxLength={100}\n        />\n      </div>\n\n      {/* Delete Button */}\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={() => onDelete(option.id)}\n        className=\"text-gray-400 hover:text-red-500 p-1\"\n      >\n        <X className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  )\n}\n\nexport function MultipleChoiceQuestion({ \n  section, \n  isPreview = false, \n  onUpdate, \n  className \n}: MultipleChoiceQuestionProps) {\n  const [isSaving, setIsSaving] = useState(false)\n  \n  // Get current settings with defaults\n  const settings = section.settings as MultipleChoiceSettings || {}\n  const {\n    content = '',\n    options = [\n      { id: '1', text: 'Option 1', order: 1 },\n      { id: '2', text: 'Option 2', order: 2 },\n      { id: '3', text: 'Option 3', order: 3 }\n    ],\n    selectionType = 'single',\n    minSelections = 1,\n    maxSelections = 1,\n    required = false,\n    buttonLabel = 'Next',\n    helpText = '',\n    randomizeOrder = false,\n    allowOther = false,\n    otherLabel = 'Other'\n  } = settings\n\n  // Configure sensors for drag and drop\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  )\n\n  // Handle settings updates\n  const updateSettings = async (newSettings: Partial<MultipleChoiceSettings>) => {\n    setIsSaving(true)\n    try {\n      await onUpdate({\n        settings: {\n          ...settings,\n          ...newSettings\n        }\n      })\n    } catch (error) {\n      console.error('Failed to update multiple choice settings:', error)\n      throw error\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  // Handle content change\n  const handleContentChange = async (newContent: string) => {\n    await updateSettings({ content: newContent })\n  }\n\n  // Handle help text change\n  const handleHelpTextChange = async (newHelpText: string) => {\n    await updateSettings({ helpText: newHelpText })\n  }\n\n  // Add new option\n  const handleAddOption = () => {\n    const newOption: ChoiceOption = {\n      id: `option-${Date.now()}`,\n      text: '',\n      order: options.length + 1\n    }\n    updateSettings({ options: [...options, newOption] })\n  }\n\n  // Update option text\n  const handleUpdateOption = (optionId: string, newText: string) => {\n    const updatedOptions = options.map(option =>\n      option.id === optionId ? { ...option, text: newText } : option\n    )\n    updateSettings({ options: updatedOptions })\n  }\n\n  // Delete option\n  const handleDeleteOption = (optionId: string) => {\n    if (options.length <= 2) {\n      alert('You must have at least 2 options')\n      return\n    }\n    \n    const updatedOptions = options\n      .filter(option => option.id !== optionId)\n      .map((option, index) => ({ ...option, order: index + 1 }))\n    \n    updateSettings({ options: updatedOptions })\n  }\n\n  // Handle drag end for reordering\n  const handleDragEnd = (event: any) => {\n    const { active, over } = event\n\n    if (active.id !== over.id) {\n      const oldIndex = options.findIndex(option => option.id === active.id)\n      const newIndex = options.findIndex(option => option.id === over.id)\n      \n      const reorderedOptions = arrayMove(options, oldIndex, newIndex)\n        .map((option, index) => ({ ...option, order: index + 1 }))\n      \n      updateSettings({ options: reorderedOptions })\n    }\n  }\n\n  // Handle selection type change\n  const handleSelectionTypeChange = (newType: SelectionType) => {\n    const updates: Partial<MultipleChoiceSettings> = {\n      selectionType: newType\n    }\n    \n    if (newType === 'single') {\n      updates.maxSelections = 1\n      updates.minSelections = 1\n    } else {\n      updates.maxSelections = options.length\n      updates.minSelections = 1\n    }\n    \n    updateSettings(updates)\n  }\n\n  // Validation\n  const validateContent = (text: string): string | null => {\n    if (!text.trim()) {\n      return 'Question text is required'\n    }\n    if (text.length > 200) {\n      return 'Question text must be 200 characters or less'\n    }\n    return null\n  }\n\n  // Sorted options for display\n  const sortedOptions = [...options].sort((a, b) => a.order - b.order)\n\n  if (isPreview) {\n    // Preview Mode - Show how the question appears to users\n    return (\n      <div className={cn('p-6', className)}>\n        <div className=\"space-y-4\">\n          {/* Question Text */}\n          <div>\n            <h3 className=\"text-lg font-medium mb-2\">\n              {content || 'Your question text here...'}\n              {required && <span className=\"text-red-500 ml-1\">*</span>}\n            </h3>\n            {helpText && (\n              <p className=\"text-sm text-gray-600 mb-4\">{helpText}</p>\n            )}\n            {selectionType === 'multiple' && (\n              <p className=\"text-sm text-gray-500 mb-4\">\n                Select {minSelections === maxSelections \n                  ? `exactly ${minSelections}` \n                  : `${minSelections}-${maxSelections}`\n                } option{maxSelections !== 1 ? 's' : ''}\n              </p>\n            )}\n          </div>\n\n          {/* Options */}\n          <div className=\"space-y-2\">\n            {(randomizeOrder ? [...sortedOptions].sort(() => Math.random() - 0.5) : sortedOptions).map((option) => (\n              <SortableOption\n                key={option.id}\n                option={option}\n                onUpdate={handleUpdateOption}\n                onDelete={handleDeleteOption}\n                isPreview={true}\n                selectionType={selectionType}\n              />\n            ))}\n\n            {/* Other Option */}\n            {allowOther && (\n              <label className=\"flex items-center space-x-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\">\n                {selectionType === 'single' ? (\n                  <input type=\"radio\" name=\"preview-options\" className=\"h-4 w-4\" />\n                ) : (\n                  <input type=\"checkbox\" className=\"h-4 w-4\" />\n                )}\n                <span className=\"flex-1\">{otherLabel}</span>\n                <Input placeholder=\"Please specify...\" className=\"w-32\" disabled />\n              </label>\n            )}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  // Edit Mode - Configuration interface\n  return (\n    <div className={cn('p-6', className)}>\n      <div className=\"space-y-6\">\n        {/* Question Content */}\n        <div>\n          <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n            Question Text {required && <span className=\"text-red-500\">*</span>}\n          </Label>\n          <InlineEditableText\n            value={content}\n            onSave={handleContentChange}\n            variant=\"body\"\n            placeholder=\"Enter your question text...\"\n            className=\"min-h-[60px] p-3 border border-gray-200 rounded-lg w-full\"\n            showEditIcon={false}\n            showSaveStatus={true}\n            multiline={true}\n            maxLength={200}\n            required={true}\n            validation={validateContent}\n          />\n        </div>\n\n        {/* Selection Type and Settings */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n              Selection Type\n            </Label>\n            <Select\n              value={selectionType}\n              onValueChange={handleSelectionTypeChange}\n              disabled={isSaving}\n            >\n              <SelectTrigger>\n                <SelectValue>\n                  <div className=\"flex items-center space-x-2\">\n                    {selectionType === 'single' ? (\n                      <Circle className=\"h-4 w-4\" />\n                    ) : (\n                      <CheckSquare className=\"h-4 w-4\" />\n                    )}\n                    <span className=\"capitalize\">{selectionType} Choice</span>\n                  </div>\n                </SelectValue>\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"single\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Circle className=\"h-4 w-4\" />\n                    <span>Single Choice</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"multiple\">\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckSquare className=\"h-4 w-4\" />\n                    <span>Multiple Choice</span>\n                  </div>\n                </SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {selectionType === 'multiple' && (\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                Selection Limits\n              </Label>\n              <div className=\"flex space-x-2\">\n                <Input\n                  type=\"number\"\n                  value={minSelections}\n                  onChange={(e) => updateSettings({ minSelections: parseInt(e.target.value) || 1 })}\n                  min={1}\n                  max={maxSelections}\n                  placeholder=\"Min\"\n                  className=\"w-20\"\n                  disabled={isSaving}\n                />\n                <span className=\"self-center text-gray-500\">to</span>\n                <Input\n                  type=\"number\"\n                  value={maxSelections}\n                  onChange={(e) => updateSettings({ maxSelections: parseInt(e.target.value) || 1 })}\n                  min={minSelections}\n                  max={options.length}\n                  placeholder=\"Max\"\n                  className=\"w-20\"\n                  disabled={isSaving}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Options Management */}\n        <div>\n          <div className=\"flex items-center justify-between mb-3\">\n            <Label className=\"text-sm font-medium text-gray-700\">\n              Answer Options ({options.length})\n            </Label>\n            <Button\n              onClick={handleAddOption}\n              size=\"sm\"\n              variant=\"outline\"\n              disabled={isSaving || options.length >= 10}\n            >\n              <Plus className=\"h-4 w-4 mr-1\" />\n              Add Option\n            </Button>\n          </div>\n\n          <DndContext\n            sensors={sensors}\n            collisionDetection={closestCenter}\n            onDragEnd={handleDragEnd}\n          >\n            <SortableContext items={options.map(o => o.id)} strategy={verticalListSortingStrategy}>\n              <div className=\"space-y-2\">\n                {sortedOptions.map((option) => (\n                  <SortableOption\n                    key={option.id}\n                    option={option}\n                    onUpdate={handleUpdateOption}\n                    onDelete={handleDeleteOption}\n                    selectionType={selectionType}\n                  />\n                ))}\n              </div>\n            </SortableContext>\n          </DndContext>\n        </div>\n\n        {/* Additional Options */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Switch\n              id=\"required\"\n              checked={required}\n              onCheckedChange={(checked) => updateSettings({ required: checked })}\n              disabled={isSaving}\n            />\n            <Label htmlFor=\"required\" className=\"text-sm font-medium cursor-pointer\">\n              Required field\n            </Label>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Switch\n              id=\"randomize\"\n              checked={randomizeOrder}\n              onCheckedChange={(checked) => updateSettings({ randomizeOrder: checked })}\n              disabled={isSaving}\n            />\n            <Label htmlFor=\"randomize\" className=\"text-sm font-medium cursor-pointer\">\n              Randomize option order\n            </Label>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Switch\n              id=\"allowOther\"\n              checked={allowOther}\n              onCheckedChange={(checked) => updateSettings({ allowOther: checked })}\n              disabled={isSaving}\n            />\n            <Label htmlFor=\"allowOther\" className=\"text-sm font-medium cursor-pointer\">\n              Allow \"Other\" option\n            </Label>\n          </div>\n        </div>\n\n        {/* Help Text */}\n        <div>\n          <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n            Help Text (Optional)\n          </Label>\n          <InlineEditableText\n            value={helpText}\n            onSave={handleHelpTextChange}\n            variant=\"body\"\n            placeholder=\"Add helpful instructions for users...\"\n            className=\"p-3 border border-gray-200 rounded-lg w-full text-gray-600\"\n            showEditIcon={false}\n            showSaveStatus={true}\n            maxLength={200}\n            multiline={true}\n          />\n        </div>\n\n        {/* Preview Section */}\n        <div className=\"border-t pt-4\">\n          <Label className=\"text-sm font-medium text-gray-700 mb-3 block\">\n            Preview\n          </Label>\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <MultipleChoiceQuestion\n              section={section}\n              isPreview={true}\n              onUpdate={onUpdate}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Saving Indicator */}\n      {isSaving && (\n        <div className=\"absolute top-4 right-4\">\n          <div className=\"flex items-center space-x-2 text-blue-600 bg-blue-50 px-3 py-1 rounded-full\">\n            <div className=\"w-3 h-3 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\" />\n            <span className=\"text-xs font-medium\">Saving...</span>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5190, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/campaign-builder/question-types/rating-scale-question.tsx"],"sourcesContent":["'use client'\n\nimport { useState } from 'react'\nimport { InlineEditableText } from '@/components/ui/inline-editable-text'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Switch } from '@/components/ui/switch'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Slider } from '@/components/ui/slider'\nimport { CampaignSection } from '@/lib/types/campaign-builder'\nimport { cn } from '@/lib/utils'\nimport { Star, Heart, ThumbsUp, Smile, Zap, Target } from 'lucide-react'\n\ninterface RatingScaleQuestionProps {\n  section: CampaignSection\n  isPreview?: boolean\n  onUpdate: (updates: Partial<CampaignSection>) => Promise<void>\n  className?: string\n}\n\ntype ScaleType = 'numbers' | 'stars' | 'hearts' | 'thumbs' | 'smileys' | 'custom'\ntype ScaleRange = 3 | 5 | 7 | 10\n\ninterface RatingScaleSettings {\n  content?: string\n  scaleType?: ScaleType\n  minValue?: number\n  maxValue?: number\n  step?: number\n  showLabels?: boolean\n  minLabel?: string\n  maxLabel?: string\n  centerLabel?: string\n  required?: boolean\n  buttonLabel?: string\n  helpText?: string\n  defaultValue?: number\n  showNumbers?: boolean\n}\n\nexport function RatingScaleQuestion({ \n  section, \n  isPreview = false, \n  onUpdate, \n  className \n}: RatingScaleQuestionProps) {\n  const [isSaving, setIsSaving] = useState(false)\n  const [previewValue, setPreviewValue] = useState<number[]>([])\n  \n  // Get current settings with defaults\n  const settings = section.settings as RatingScaleSettings || {}\n  const {\n    content = '',\n    scaleType = 'numbers',\n    minValue = 1,\n    maxValue = 5,\n    step = 1,\n    showLabels = true,\n    minLabel = 'Poor',\n    maxLabel = 'Excellent',\n    centerLabel = '',\n    required = false,\n    buttonLabel = 'Next',\n    helpText = '',\n    defaultValue = undefined,\n    showNumbers = true\n  } = settings\n\n  // Initialize preview value\n  useState(() => {\n    if (defaultValue !== undefined) {\n      setPreviewValue([defaultValue])\n    }\n  })\n\n  // Handle settings updates\n  const updateSettings = async (newSettings: Partial<RatingScaleSettings>) => {\n    setIsSaving(true)\n    try {\n      await onUpdate({\n        settings: {\n          ...settings,\n          ...newSettings\n        }\n      })\n    } catch (error) {\n      console.error('Failed to update rating scale settings:', error)\n      throw error\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  // Handle content change\n  const handleContentChange = async (newContent: string) => {\n    await updateSettings({ content: newContent })\n  }\n\n  // Handle help text change\n  const handleHelpTextChange = async (newHelpText: string) => {\n    await updateSettings({ helpText: newHelpText })\n  }\n\n  // Handle label changes\n  const handleMinLabelChange = async (newLabel: string) => {\n    await updateSettings({ minLabel: newLabel })\n  }\n\n  const handleMaxLabelChange = async (newLabel: string) => {\n    await updateSettings({ maxLabel: newLabel })\n  }\n\n  const handleCenterLabelChange = async (newLabel: string) => {\n    await updateSettings({ centerLabel: newLabel })\n  }\n\n  // Scale type icons and renderers\n  const getScaleTypeIcon = (type: ScaleType) => {\n    switch (type) {\n      case 'stars': return Star\n      case 'hearts': return Heart\n      case 'thumbs': return ThumbsUp\n      case 'smileys': return Smile\n      case 'custom': return Target\n      default: return Zap\n    }\n  }\n\n  // Render scale items based on type\n  const renderScaleItems = (value?: number, interactive = false) => {\n    const items = []\n    const range = maxValue - minValue + 1\n    \n    for (let i = minValue; i <= maxValue; i += step) {\n      const isSelected = value === i\n      const isHovered = interactive && previewValue[0] >= i\n      \n      items.push(\n        <div\n          key={i}\n          className={cn(\n            'flex flex-col items-center space-y-2 p-2 rounded-lg transition-all cursor-pointer',\n            interactive && 'hover:bg-gray-100',\n            isSelected && 'bg-blue-50 border-2 border-blue-300',\n            !isSelected && 'border-2 border-transparent'\n          )}\n          onClick={interactive ? () => setPreviewValue([i]) : undefined}\n        >\n          {/* Scale Icon/Visual */}\n          <div className={cn(\n            'flex items-center justify-center w-8 h-8 rounded-full transition-colors',\n            isSelected || isHovered ? 'text-blue-600' : 'text-gray-400'\n          )}>\n            {scaleType === 'numbers' && (\n              <span className=\"text-lg font-medium\">{i}</span>\n            )}\n            {scaleType === 'stars' && (\n              <Star className={cn('h-6 w-6', (isSelected || isHovered) && 'fill-current')} />\n            )}\n            {scaleType === 'hearts' && (\n              <Heart className={cn('h-6 w-6', (isSelected || isHovered) && 'fill-current')} />\n            )}\n            {scaleType === 'thumbs' && (\n              <ThumbsUp className={cn('h-6 w-6', (isSelected || isHovered) && 'fill-current')} />\n            )}\n            {scaleType === 'smileys' && (\n              <Smile className={cn('h-6 w-6', (isSelected || isHovered) && 'fill-current')} />\n            )}\n            {scaleType === 'custom' && (\n              <div className={cn(\n                'w-6 h-6 rounded-full border-2',\n                (isSelected || isHovered) ? 'bg-blue-600 border-blue-600' : 'border-gray-300'\n              )} />\n            )}\n          </div>\n          \n          {/* Number Label */}\n          {showNumbers && scaleType !== 'numbers' && (\n            <span className=\"text-xs text-gray-500\">{i}</span>\n          )}\n        </div>\n      )\n    }\n    \n    return items\n  }\n\n  // Render slider version\n  const renderSlider = () => (\n    <div className=\"space-y-4\">\n      <Slider\n        value={previewValue.length > 0 ? previewValue : defaultValue ? [defaultValue] : [minValue]}\n        onValueChange={setPreviewValue}\n        min={minValue}\n        max={maxValue}\n        step={step}\n        className=\"w-full\"\n        disabled={!isPreview}\n      />\n      \n      {/* Value display */}\n      <div className=\"text-center\">\n        <span className=\"text-lg font-medium text-blue-600\">\n          {previewValue[0] || defaultValue || minValue}\n        </span>\n      </div>\n    </div>\n  )\n\n  // Validation\n  const validateContent = (text: string): string | null => {\n    if (!text.trim()) {\n      return 'Question text is required'\n    }\n    if (text.length > 200) {\n      return 'Question text must be 200 characters or less'\n    }\n    return null\n  }\n\n  // Common scale presets\n  const scalePresets = [\n    { label: '1-3 Scale', min: 1, max: 3 },\n    { label: '1-5 Scale', min: 1, max: 5 },\n    { label: '1-7 Scale', min: 1, max: 7 },\n    { label: '1-10 Scale', min: 1, max: 10 },\n    { label: '0-10 Scale', min: 0, max: 10 }\n  ]\n\n  if (isPreview) {\n    // Preview Mode - Show how the question appears to users\n    return (\n      <div className={cn('p-6', className)}>\n        <div className=\"space-y-6\">\n          {/* Question Text */}\n          <div>\n            <h3 className=\"text-lg font-medium mb-2\">\n              {content || 'Your question text here...'}\n              {required && <span className=\"text-red-500 ml-1\">*</span>}\n            </h3>\n            {helpText && (\n              <p className=\"text-sm text-gray-600 mb-4\">{helpText}</p>\n            )}\n          </div>\n\n          {/* Scale Labels */}\n          {showLabels && (\n            <div className=\"flex justify-between text-sm text-gray-600\">\n              <span>{minLabel}</span>\n              {centerLabel && maxValue - minValue >= 4 && (\n                <span>{centerLabel}</span>\n              )}\n              <span>{maxLabel}</span>\n            </div>\n          )}\n\n          {/* Scale Display */}\n          {maxValue - minValue <= 7 ? (\n            <div className=\"flex justify-between items-center\">\n              {renderScaleItems(previewValue[0], true)}\n            </div>\n          ) : (\n            renderSlider()\n          )}\n\n          {/* Selected Value Display */}\n          {previewValue.length > 0 && (\n            <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n              <p className=\"text-sm text-blue-700\">\n                Selected: <span className=\"font-medium\">{previewValue[0]}</span>\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  // Edit Mode - Configuration interface\n  return (\n    <div className={cn('p-6', className)}>\n      <div className=\"space-y-6\">\n        {/* Question Content */}\n        <div>\n          <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n            Question Text {required && <span className=\"text-red-500\">*</span>}\n          </Label>\n          <InlineEditableText\n            value={content}\n            onSave={handleContentChange}\n            variant=\"body\"\n            placeholder=\"Enter your question text...\"\n            className=\"min-h-[60px] p-3 border border-gray-200 rounded-lg w-full\"\n            showEditIcon={false}\n            showSaveStatus={true}\n            multiline={true}\n            maxLength={200}\n            required={true}\n            validation={validateContent}\n          />\n        </div>\n\n        {/* Scale Type and Range */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n              Scale Type\n            </Label>\n            <Select\n              value={scaleType}\n              onValueChange={(value: ScaleType) => updateSettings({ scaleType: value })}\n              disabled={isSaving}\n            >\n              <SelectTrigger>\n                <SelectValue>\n                  <div className=\"flex items-center space-x-2\">\n                    {(() => {\n                      const Icon = getScaleTypeIcon(scaleType)\n                      return <Icon className=\"h-4 w-4\" />\n                    })()}\n                    <span className=\"capitalize\">{scaleType}</span>\n                  </div>\n                </SelectValue>\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"numbers\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Zap className=\"h-4 w-4\" />\n                    <span>Numbers</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"stars\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Star className=\"h-4 w-4\" />\n                    <span>Stars</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"hearts\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Heart className=\"h-4 w-4\" />\n                    <span>Hearts</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"thumbs\">\n                  <div className=\"flex items-center space-x-2\">\n                    <ThumbsUp className=\"h-4 w-4\" />\n                    <span>Thumbs Up</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"smileys\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Smile className=\"h-4 w-4\" />\n                    <span>Smileys</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"custom\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Target className=\"h-4 w-4\" />\n                    <span>Custom</span>\n                  </div>\n                </SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n              Scale Preset\n            </Label>\n            <Select\n              value={`${minValue}-${maxValue}`}\n              onValueChange={(value) => {\n                const preset = scalePresets.find(p => `${p.min}-${p.max}` === value)\n                if (preset) {\n                  updateSettings({ \n                    minValue: preset.min, \n                    maxValue: preset.max,\n                    defaultValue: undefined // Reset default when changing range\n                  })\n                }\n              }}\n              disabled={isSaving}\n            >\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {scalePresets.map((preset) => (\n                  <SelectItem key={`${preset.min}-${preset.max}`} value={`${preset.min}-${preset.max}`}>\n                    {preset.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Custom Range */}\n        <div className=\"grid grid-cols-3 gap-4\">\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n              Min Value\n            </Label>\n            <Input\n              type=\"number\"\n              value={minValue}\n              onChange={(e) => {\n                const newMin = parseInt(e.target.value)\n                if (!isNaN(newMin) && newMin < maxValue) {\n                  updateSettings({ minValue: newMin })\n                }\n              }}\n              min={0}\n              max={maxValue - 1}\n              disabled={isSaving}\n            />\n          </div>\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n              Max Value\n            </Label>\n            <Input\n              type=\"number\"\n              value={maxValue}\n              onChange={(e) => {\n                const newMax = parseInt(e.target.value)\n                if (!isNaN(newMax) && newMax > minValue) {\n                  updateSettings({ maxValue: newMax })\n                }\n              }}\n              min={minValue + 1}\n              max={20}\n              disabled={isSaving}\n            />\n          </div>\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n              Step\n            </Label>\n            <Input\n              type=\"number\"\n              value={step}\n              onChange={(e) => {\n                const newStep = parseInt(e.target.value) || 1\n                updateSettings({ step: newStep })\n              }}\n              min={1}\n              max={maxValue - minValue}\n              disabled={isSaving}\n            />\n          </div>\n        </div>\n\n        {/* Labels */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Switch\n              id=\"showLabels\"\n              checked={showLabels}\n              onCheckedChange={(checked) => updateSettings({ showLabels: checked })}\n              disabled={isSaving}\n            />\n            <Label htmlFor=\"showLabels\" className=\"text-sm font-medium cursor-pointer\">\n              Show scale labels\n            </Label>\n          </div>\n\n          {showLabels && (\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Min Label\n                </Label>\n                <InlineEditableText\n                  value={minLabel}\n                  onSave={handleMinLabelChange}\n                  variant=\"body\"\n                  placeholder=\"e.g., Poor, Disagree\"\n                  className=\"p-3 border border-gray-200 rounded-lg w-full\"\n                  showEditIcon={false}\n                  showSaveStatus={true}\n                  maxLength={50}\n                />\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Max Label\n                </Label>\n                <InlineEditableText\n                  value={maxLabel}\n                  onSave={handleMaxLabelChange}\n                  variant=\"body\"\n                  placeholder=\"e.g., Excellent, Agree\"\n                  className=\"p-3 border border-gray-200 rounded-lg w-full\"\n                  showEditIcon={false}\n                  showSaveStatus={true}\n                  maxLength={50}\n                />\n              </div>\n            </div>\n          )}\n\n          {showLabels && maxValue - minValue >= 4 && (\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                Center Label (Optional)\n              </Label>\n              <InlineEditableText\n                value={centerLabel}\n                onSave={handleCenterLabelChange}\n                variant=\"body\"\n                placeholder=\"e.g., Neutral, Okay\"\n                className=\"p-3 border border-gray-200 rounded-lg w-full\"\n                showEditIcon={false}\n                showSaveStatus={true}\n                maxLength={50}\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Additional Options */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Switch\n              id=\"required\"\n              checked={required}\n              onCheckedChange={(checked) => updateSettings({ required: checked })}\n              disabled={isSaving}\n            />\n            <Label htmlFor=\"required\" className=\"text-sm font-medium cursor-pointer\">\n              Required field\n            </Label>\n          </div>\n\n          {scaleType !== 'numbers' && (\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"showNumbers\"\n                checked={showNumbers}\n                onCheckedChange={(checked) => updateSettings({ showNumbers: checked })}\n                disabled={isSaving}\n              />\n              <Label htmlFor=\"showNumbers\" className=\"text-sm font-medium cursor-pointer\">\n                Show numbers below icons\n              </Label>\n            </div>\n          )}\n\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n              Default Value (Optional)\n            </Label>\n            <Input\n              type=\"number\"\n              value={defaultValue || ''}\n              onChange={(e) => {\n                const value = e.target.value ? parseInt(e.target.value) : undefined\n                updateSettings({ defaultValue: value })\n              }}\n              min={minValue}\n              max={maxValue}\n              placeholder=\"No default\"\n              disabled={isSaving}\n            />\n          </div>\n        </div>\n\n        {/* Help Text */}\n        <div>\n          <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n            Help Text (Optional)\n          </Label>\n          <InlineEditableText\n            value={helpText}\n            onSave={handleHelpTextChange}\n            variant=\"body\"\n            placeholder=\"Add helpful instructions for users...\"\n            className=\"p-3 border border-gray-200 rounded-lg w-full text-gray-600\"\n            showEditIcon={false}\n            showSaveStatus={true}\n            maxLength={200}\n            multiline={true}\n          />\n        </div>\n\n        {/* Preview Section */}\n        <div className=\"border-t pt-4\">\n          <Label className=\"text-sm font-medium text-gray-700 mb-3 block\">\n            Preview\n          </Label>\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <RatingScaleQuestion\n              section={section}\n              isPreview={true}\n              onUpdate={onUpdate}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Saving Indicator */}\n      {isSaving && (\n        <div className=\"absolute top-4 right-4\">\n          <div className=\"flex items-center space-x-2 text-blue-600 bg-blue-50 px-3 py-1 rounded-full\">\n            <div className=\"w-3 h-3 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\" />\n            <span className=\"text-xs font-medium\">Saving...</span>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6416, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/campaign-builder/question-types/capture-section.tsx"],"sourcesContent":["'use client'\n\nimport React, { useState, useEffect } from 'react'\nimport { CampaignSection } from '@/lib/types/campaign-builder'\nimport { cn } from '@/lib/utils'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Button } from '@/components/ui/button'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { AlertCircle, Check, Loader2, Mail, Phone, User, Users } from 'lucide-react'\nimport { useInlineEdit } from '@/hooks/use-inline-edit'\nimport { InlineEditableText } from '@/components/ui/inline-editable-text'\nimport { useCaptureSubmission, type CaptureFormData } from '@/hooks/use-capture-submission'\nimport { useCapture } from '@/contexts/capture-context'\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface CaptureFieldConfig {\n  name: string\n  email: string\n  phone: string\n}\n\nexport interface CaptureSettings {\n  title: string\n  subheading: string\n  enabledFields: {\n    name: boolean\n    email: boolean\n    phone: boolean\n  }\n  requiredFields: {\n    name: boolean\n    email: boolean\n    phone: boolean\n  }\n  fieldLabels: CaptureFieldConfig\n  fieldPlaceholders: CaptureFieldConfig\n  submitButtonText: string\n  gdprConsent: boolean\n  marketingConsent: boolean\n}\n\nexport interface CaptureValidationErrors {\n  name?: string\n  email?: string\n  phone?: string\n  gdprConsent?: string\n}\n\n// =============================================================================\n// VALIDATION FUNCTIONS\n// =============================================================================\n\nconst validateEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  return emailRegex.test(email)\n}\n\nconst validatePhone = (phone: string): boolean => {\n  // Remove all non-digit characters except + for international numbers\n  const cleanPhone = phone.replace(/[^\\d+]/g, '')\n  \n  // Check for valid international format or US format\n  const internationalRegex = /^\\+[1-9]\\d{6,14}$/\n  const usRegex = /^(\\+1)?[2-9]\\d{2}[2-9]\\d{2}\\d{4}$/\n  \n  return internationalRegex.test(cleanPhone) || usRegex.test(cleanPhone)\n}\n\nconst validateName = (name: string): boolean => {\n  // Allow letters, spaces, hyphens, apostrophes, and periods\n  const nameRegex = /^[a-zA-Z\\s\\-'.]+$/\n  return nameRegex.test(name.trim()) && name.trim().length >= 2\n}\n\nconst validateCaptureForm = (\n  data: CaptureFormData,\n  settings: CaptureSettings\n): CaptureValidationErrors => {\n  const errors: CaptureValidationErrors = {}\n\n  // Validate name field\n  if (settings.enabledFields.name && settings.requiredFields.name) {\n    if (!data.name?.trim()) {\n      errors.name = 'Name is required'\n    } else if (data.name.trim().length < 2) {\n      errors.name = 'Name must be at least 2 characters'\n    } else if (data.name.trim().length > 100) {\n      errors.name = 'Name must be less than 100 characters'\n    } else if (!validateName(data.name)) {\n      errors.name = 'Please enter a valid name (letters, spaces, hyphens, and apostrophes only)'\n    }\n  }\n\n  // Validate email field\n  if (settings.enabledFields.email && settings.requiredFields.email) {\n    if (!data.email?.trim()) {\n      errors.email = 'Email is required'\n    } else if (data.email.trim().length > 254) {\n      errors.email = 'Email address is too long'\n    } else if (!validateEmail(data.email.trim())) {\n      errors.email = 'Please enter a valid email address'\n    }\n  }\n\n  // Validate phone field\n  if (settings.enabledFields.phone && settings.requiredFields.phone) {\n    if (!data.phone?.trim()) {\n      errors.phone = 'Phone number is required'\n    } else if (!validatePhone(data.phone)) {\n      errors.phone = 'Please enter a valid phone number (e.g., +1 555-123-4567 or 555-123-4567)'\n    }\n  }\n\n  // Validate GDPR consent if enabled\n  if (settings.gdprConsent && !data.gdprConsent) {\n    errors.gdprConsent = 'You must accept the privacy policy to continue'\n  }\n\n  return errors\n}\n\n// =============================================================================\n// MAIN COMPONENT\n// =============================================================================\n\ninterface CaptureSectionProps {\n  section: CampaignSection\n  isPreview?: boolean\n  onUpdate: (updates: Partial<CampaignSection>) => Promise<void>\n  className?: string\n  campaignId?: string\n  onLeadCaptured?: (leadId: string) => void\n}\n\nexport function CaptureSection({\n  section,\n  isPreview = false,\n  onUpdate,\n  className,\n  campaignId,\n  onLeadCaptured\n}: CaptureSectionProps) {\n  // =============================================================================\n  // STATE MANAGEMENT\n  // =============================================================================\n\n  const settings = (section.settings as unknown) as CaptureSettings\n  const [formData, setFormData] = useState<CaptureFormData>({})\n  const [validationErrors, setValidationErrors] = useState<CaptureValidationErrors>({})\n\n  // =============================================================================\n  // CAPTURE SUBMISSION HOOK\n  // =============================================================================\n\n  const { markCaptureCompleted, setCaptureRequired } = useCapture()\n  \n  const {\n    submitCapture,\n    isSubmitting,\n    isSubmitted,\n    submitError,\n    resetSubmission\n  } = useCaptureSubmission({\n    campaignId: campaignId || '',\n    onSuccess: (lead) => {\n      console.log('Lead captured successfully:', lead.id)\n      markCaptureCompleted(lead.id)\n      onLeadCaptured?.(lead.id)\n    },\n    onError: (error) => {\n      console.error('Failed to capture lead:', error)\n    }\n  })\n\n  // Set capture as required when component mounts (only in preview mode)\n  useEffect(() => {\n    if (isPreview) {\n      setCaptureRequired(true)\n    }\n  }, [isPreview, setCaptureRequired])\n\n  // =============================================================================\n  // INLINE EDITING HOOKS\n  // =============================================================================\n\n  const titleEdit = useInlineEdit(settings.title || 'Get Your Results', {\n    onSave: async (value: string) => {\n      await onUpdate({\n        settings: { ...settings, title: value }\n      })\n    }\n  })\n\n  const subheadingEdit = useInlineEdit(settings.subheading || 'Enter your information to unlock your personalized results', {\n    onSave: async (value: string) => {\n      await onUpdate({\n        settings: { ...settings, subheading: value }\n      })\n    }\n  })\n\n  const submitButtonEdit = useInlineEdit(settings.submitButtonText || 'Get My Results', {\n    onSave: async (value: string) => {\n      await onUpdate({\n        settings: { ...settings, submitButtonText: value }\n      })\n    }\n  })\n\n  // =============================================================================\n  // EVENT HANDLERS\n  // =============================================================================\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    const errors = validateCaptureForm(formData, settings)\n    \n    if (Object.keys(errors).length > 0) {\n      setValidationErrors(errors)\n      return\n    }\n\n    // Clear validation errors and attempt submission\n    setValidationErrors({})\n    await submitCapture(formData)\n  }\n\n  const handleFieldChange = (field: keyof CaptureFormData, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n    \n    // Clear validation error when user starts typing\n    if (validationErrors[field as keyof CaptureValidationErrors]) {\n      setValidationErrors(prev => {\n        const updated = { ...prev }\n        delete updated[field as keyof CaptureValidationErrors]\n        return updated\n      })\n    }\n  }\n\n  const updateFieldSettings = async (field: string, updates: Partial<CaptureSettings>) => {\n    await onUpdate({\n      settings: { ...settings, ...updates }\n    })\n  }\n\n  // =============================================================================\n  // RENDER FUNCTIONS\n  // =============================================================================\n\n  const renderFieldCheckbox = (field: 'name' | 'email' | 'phone', icon: React.ComponentType<{ className?: string }>, label: string) => (\n    <div className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n      <div className=\"flex items-center space-x-2\">\n        {React.createElement(icon, { className: \"h-4 w-4 text-gray-500\" })}\n        <span className=\"text-sm font-medium\">{label}</span>\n      </div>\n      \n      <div className=\"flex items-center space-x-4 ml-auto\">\n        <div className=\"flex items-center space-x-2\">\n          <Checkbox\n            id={`enable-${field}`}\n            checked={settings.enabledFields[field]}\n            onCheckedChange={(checked) => {\n              updateFieldSettings(field, {\n                enabledFields: { ...settings.enabledFields, [field]: checked }\n              })\n            }}\n          />\n          <Label htmlFor={`enable-${field}`} className=\"text-xs text-gray-600\">\n            Enabled\n          </Label>\n        </div>\n        \n        {settings.enabledFields[field] && (\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id={`require-${field}`}\n              checked={settings.requiredFields[field]}\n              onCheckedChange={(checked) => {\n                updateFieldSettings(field, {\n                  requiredFields: { ...settings.requiredFields, [field]: checked }\n                })\n              }}\n            />\n            <Label htmlFor={`require-${field}`} className=\"text-xs text-gray-600\">\n              Required\n            </Label>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n\n  const renderFormField = (field: 'name' | 'email' | 'phone', icon: React.ComponentType<{ className?: string }>) => {\n    if (!settings.enabledFields[field]) return null\n\n    const hasError = validationErrors[field]\n\n    return (\n      <div className=\"space-y-2\">\n        <Label htmlFor={field} className=\"text-sm font-medium\">\n          {settings.fieldLabels[field]}\n          {settings.requiredFields[field] && <span className=\"text-red-500 ml-1\">*</span>}\n        </Label>\n        \n        <div className=\"relative\">\n          <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2\">\n            {React.createElement(icon, { className: \"h-4 w-4 text-gray-400\" })}\n          </div>\n          \n          <Input\n            id={field}\n            type={field === 'email' ? 'email' : field === 'phone' ? 'tel' : 'text'}\n            placeholder={settings.fieldPlaceholders[field]}\n            value={formData[field] || ''}\n            onChange={(e) => handleFieldChange(field, e.target.value)}\n            className={cn(\n              \"pl-10\",\n              hasError && \"border-red-500 focus:border-red-500\"\n            )}\n            required={settings.requiredFields[field]}\n          />\n        </div>\n        \n        {hasError && (\n          <div className=\"flex items-center space-x-1 text-red-600 text-xs\">\n            <AlertCircle className=\"h-3 w-3\" />\n            <span>{hasError}</span>\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  // =============================================================================\n  // MAIN RENDER\n  // =============================================================================\n\n  if (isPreview) {\n    return (\n      <Card className={cn(\"w-full max-w-md mx-auto\", className)}>\n        <CardHeader className=\"text-center space-y-2\">\n          <CardTitle className=\"text-xl font-bold\">{settings.title}</CardTitle>\n          <p className=\"text-gray-600 text-sm\">{settings.subheading}</p>\n        </CardHeader>\n        \n        <CardContent>\n          {isSubmitted ? (\n            <div className=\"text-center space-y-4\">\n              <div className=\"mx-auto w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                <Check className=\"h-6 w-6 text-green-600\" />\n              </div>\n              <div>\n                <h3 className=\"font-medium text-green-900\">Thank you!</h3>\n                <p className=\"text-sm text-green-600\">Your information has been saved.</p>\n              </div>\n            </div>\n          ) : (\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              {renderFormField('name', User)}\n              {renderFormField('email', Mail)}\n              {renderFormField('phone', Phone)}\n              \n              {(settings.gdprConsent || settings.marketingConsent) && (\n                <div className=\"space-y-3 pt-2\">\n                  {settings.gdprConsent && (\n                    <div className=\"flex items-start space-x-2\">\n                      <Checkbox\n                        id=\"gdpr-consent\"\n                        checked={formData.gdprConsent || false}\n                        onCheckedChange={(checked) => handleFieldChange('gdprConsent', checked)}\n                      />\n                      <Label htmlFor=\"gdpr-consent\" className=\"text-xs text-gray-600 leading-relaxed\">\n                        I agree to the privacy policy and terms of service *\n                      </Label>\n                    </div>\n                  )}\n                  \n                  {settings.marketingConsent && (\n                    <div className=\"flex items-start space-x-2\">\n                      <Checkbox\n                        id=\"marketing-consent\"\n                        checked={formData.marketingConsent || false}\n                        onCheckedChange={(checked) => handleFieldChange('marketingConsent', checked)}\n                      />\n                      <Label htmlFor=\"marketing-consent\" className=\"text-xs text-gray-600 leading-relaxed\">\n                        I would like to receive marketing emails and updates\n                      </Label>\n                    </div>\n                  )}\n                </div>\n              )}\n              \n              {validationErrors.gdprConsent && (\n                <div className=\"flex items-center space-x-1 text-red-600 text-xs\">\n                  <AlertCircle className=\"h-3 w-3\" />\n                  <span>{validationErrors.gdprConsent}</span>\n                </div>\n              )}\n              \n              {submitError && (\n                <div className=\"flex items-center space-x-1 text-red-600 text-sm p-3 bg-red-50 border border-red-200 rounded-md\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <span>{submitError}</span>\n                </div>\n              )}\n              \n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isSubmitting}\n              >\n                {isSubmitting && <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />}\n                {settings.submitButtonText}\n              </Button>\n            </form>\n          )}\n        </CardContent>\n      </Card>\n    )\n  }\n\n  // Edit Mode\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Header Section */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center space-x-2\">\n          <Users className=\"h-5 w-5 text-green-600\" />\n          <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n            Lead Capture\n          </Badge>\n        </div>\n        \n        <div className=\"space-y-3\">\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700\">Title</Label>\n            <InlineEditableText\n              value={titleEdit.value}\n              onSave={titleEdit.save}\n              placeholder=\"Enter section title...\"\n              className=\"text-lg font-semibold\"\n            />\n          </div>\n          \n          <div>\n            <Label className=\"text-sm font-medium text-gray-700\">Subheading</Label>\n            <InlineEditableText\n              value={subheadingEdit.value}\n              onSave={subheadingEdit.save}\n              placeholder=\"Enter section subheading...\"\n              className=\"text-gray-600\"\n              multiline={true}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Field Configuration */}\n      <div className=\"space-y-4\">\n        <Label className=\"text-sm font-medium text-gray-700\">Form Fields</Label>\n        <div className=\"space-y-3\">\n          {renderFieldCheckbox('name', User, 'Name')}\n          {renderFieldCheckbox('email', Mail, 'Email')}\n          {renderFieldCheckbox('phone', Phone, 'Phone')}\n        </div>\n      </div>\n\n      {/* Submit Button Configuration */}\n      <div className=\"space-y-2\">\n        <Label className=\"text-sm font-medium text-gray-700\">Submit Button Text</Label>\n        <InlineEditableText\n          value={submitButtonEdit.value}\n          onSave={submitButtonEdit.save}\n          placeholder=\"Get My Results\"\n          className=\"font-medium\"\n        />\n      </div>\n\n      {/* Consent Options */}\n      <div className=\"space-y-4\">\n        <Label className=\"text-sm font-medium text-gray-700\">Consent Options</Label>\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"gdpr-consent-toggle\"\n              checked={settings.gdprConsent}\n              onCheckedChange={(checked) => {\n                updateFieldSettings('gdpr', { gdprConsent: checked === true })\n              }}\n            />\n            <Label htmlFor=\"gdpr-consent-toggle\" className=\"text-sm\">\n              Require GDPR consent checkbox\n            </Label>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"marketing-consent-toggle\"\n              checked={settings.marketingConsent}\n              onCheckedChange={(checked) => {\n                updateFieldSettings('marketing', { marketingConsent: checked === true })\n              }}\n            />\n            <Label htmlFor=\"marketing-consent-toggle\" className=\"text-sm\">\n              Show marketing consent checkbox\n            </Label>\n          </div>\n        </div>\n      </div>\n\n      {/* Preview Section */}\n      <div className=\"pt-4 border-t\">\n        <Label className=\"text-sm font-medium text-gray-700 mb-3 block\">Preview</Label>\n        <div className=\"scale-90 origin-top-left\">\n          <CaptureSection\n            section={section}\n            isPreview={true}\n            onUpdate={onUpdate}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CaptureSection "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 7334, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/campaign-builder/content-types/info-section.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useRef } from 'react'\nimport { InlineEditableText } from '@/components/ui/inline-editable-text'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Switch } from '@/components/ui/switch'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { CampaignSection } from '@/lib/types/campaign-builder'\nimport { cn } from '@/lib/utils'\nimport { \n  Image as ImageIcon, \n  Upload, \n  X, \n  AlignLeft, \n  AlignCenter, \n  AlignRight,\n  Type,\n  Layout,\n  Eye,\n  Edit3\n} from 'lucide-react'\n\ninterface InfoSectionProps {\n  section: CampaignSection\n  isPreview?: boolean\n  onUpdate: (updates: Partial<CampaignSection>) => Promise<void>\n  className?: string\n}\n\ntype TextAlign = 'left' | 'center' | 'right'\ntype ImagePosition = 'top' | 'left' | 'right' | 'background'\ntype SectionLayout = 'text-only' | 'image-only' | 'text-with-image' | 'full-background'\n\ninterface InfoSectionSettings {\n  title?: string\n  content?: string\n  imageUrl?: string\n  imageAlt?: string\n  textAlign?: TextAlign\n  imagePosition?: ImagePosition\n  layout?: SectionLayout\n  backgroundColor?: string\n  textColor?: string\n  titleSize?: 'small' | 'medium' | 'large' | 'xl'\n  showTitle?: boolean\n  buttonLabel?: string\n  buttonUrl?: string\n  showButton?: boolean\n}\n\nexport function InfoSection({ \n  section, \n  isPreview = false, \n  onUpdate, \n  className \n}: InfoSectionProps) {\n  const [isSaving, setIsSaving] = useState(false)\n  const [isUploading, setIsUploading] = useState(false)\n  const fileInputRef = useRef<HTMLInputElement>(null)\n  \n  // Get current settings with defaults\n  const settings = section.settings as InfoSectionSettings || {}\n  const {\n    title = '',\n    content = '',\n    imageUrl = '',\n    imageAlt = '',\n    textAlign = 'left',\n    imagePosition = 'top',\n    layout = 'text-only',\n    backgroundColor = '',\n    textColor = '',\n    titleSize = 'large',\n    showTitle = true,\n    buttonLabel = 'Continue',\n    buttonUrl = '',\n    showButton = false\n  } = settings\n\n  // Handle settings updates\n  const updateSettings = async (newSettings: Partial<InfoSectionSettings>) => {\n    setIsSaving(true)\n    try {\n      await onUpdate({\n        settings: {\n          ...settings,\n          ...newSettings\n        }\n      })\n    } catch (error) {\n      console.error('Failed to update info section settings:', error)\n      throw error\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  // Handle text field changes\n  const handleTitleChange = async (newTitle: string) => {\n    await updateSettings({ title: newTitle })\n  }\n\n  const handleContentChange = async (newContent: string) => {\n    await updateSettings({ content: newContent })\n  }\n\n  const handleImageAltChange = async (newAlt: string) => {\n    await updateSettings({ imageAlt: newAlt })\n  }\n\n  const handleButtonLabelChange = async (newLabel: string) => {\n    await updateSettings({ buttonLabel: newLabel })\n  }\n\n  // Handle image upload\n  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (!file) return\n\n    // Check file type\n    if (!file.type.startsWith('image/')) {\n      alert('Please select an image file')\n      return\n    }\n\n    // Check file size (5MB limit)\n    if (file.size > 5 * 1024 * 1024) {\n      alert('Image must be smaller than 5MB')\n      return\n    }\n\n    setIsUploading(true)\n    try {\n      // For demo purposes, create a data URL\n      // In production, this would upload to a proper image service\n      const reader = new FileReader()\n      reader.onload = async (e) => {\n        const imageUrl = e.target?.result as string\n        await updateSettings({ \n          imageUrl,\n          imageAlt: imageAlt || file.name.replace(/\\.[^/.]+$/, \"\")\n        })\n      }\n      reader.readAsDataURL(file)\n    } catch (error) {\n      console.error('Failed to upload image:', error)\n      alert('Failed to upload image. Please try again.')\n    } finally {\n      setIsUploading(false)\n    }\n  }\n\n  // Handle image removal\n  const handleImageRemove = async () => {\n    await updateSettings({ imageUrl: '', imageAlt: '' })\n  }\n\n  // Layout validation\n  const validateTitle = (text: string): string | null => {\n    if (showTitle && !text.trim()) {\n      return 'Title is required when title display is enabled'\n    }\n    if (text.length > 100) {\n      return 'Title must be 100 characters or less'\n    }\n    return null\n  }\n\n  const validateContent = (text: string): string | null => {\n    if (!text.trim()) {\n      return 'Content is required'\n    }\n    if (text.length > 2000) {\n      return 'Content must be 2000 characters or less'\n    }\n    return null\n  }\n\n  // Get title size classes\n  const getTitleSizeClass = () => {\n    switch (titleSize) {\n      case 'small': return 'text-lg'\n      case 'medium': return 'text-xl'\n      case 'large': return 'text-2xl'\n      case 'xl': return 'text-3xl'\n      default: return 'text-2xl'\n    }\n  }\n\n  // Get text alignment classes\n  const getTextAlignClass = () => {\n    switch (textAlign) {\n      case 'center': return 'text-center'\n      case 'right': return 'text-right'\n      default: return 'text-left'\n    }\n  }\n\n  if (isPreview) {\n    // Preview Mode - Show how the section appears to users\n    return (\n      <div \n        className={cn('relative overflow-hidden', className)}\n        style={{\n          backgroundColor: backgroundColor || undefined,\n          color: textColor || undefined\n        }}\n      >\n        {/* Background Image */}\n        {layout === 'full-background' && imageUrl && (\n          <div \n            className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n            style={{ backgroundImage: `url(${imageUrl})` }}\n          >\n            <div className=\"absolute inset-0 bg-black bg-opacity-40\" />\n          </div>\n        )}\n\n        <div className={cn(\n          'relative z-10 p-6',\n          layout === 'full-background' && 'text-white min-h-[400px] flex flex-col justify-center'\n        )}>\n          {/* Text and Image Layout */}\n          {layout === 'text-with-image' && imagePosition === 'left' ? (\n            <div className=\"flex items-start space-x-6\">\n              {/* Left Image */}\n              {imageUrl && (\n                <div className=\"flex-shrink-0 w-1/3\">\n                  <img\n                    src={imageUrl}\n                    alt={imageAlt}\n                    className=\"w-full h-auto rounded-lg object-cover\"\n                  />\n                </div>\n              )}\n              \n              {/* Text Content */}\n              <div className={cn('flex-1', getTextAlignClass())}>\n                {showTitle && title && (\n                  <h2 className={cn('font-bold mb-4', getTitleSizeClass())}>\n                    {title}\n                  </h2>\n                )}\n                {content && (\n                  <div className=\"prose max-w-none\">\n                    <p className=\"whitespace-pre-wrap\">{content}</p>\n                  </div>\n                )}\n                {showButton && buttonLabel && (\n                  <Button className=\"mt-6\" disabled>\n                    {buttonLabel}\n                  </Button>\n                )}\n              </div>\n            </div>\n          ) : layout === 'text-with-image' && imagePosition === 'right' ? (\n            <div className=\"flex items-start space-x-6\">\n              {/* Text Content */}\n              <div className={cn('flex-1', getTextAlignClass())}>\n                {showTitle && title && (\n                  <h2 className={cn('font-bold mb-4', getTitleSizeClass())}>\n                    {title}\n                  </h2>\n                )}\n                {content && (\n                  <div className=\"prose max-w-none\">\n                    <p className=\"whitespace-pre-wrap\">{content}</p>\n                  </div>\n                )}\n                {showButton && buttonLabel && (\n                  <Button className=\"mt-6\" disabled>\n                    {buttonLabel}\n                  </Button>\n                )}\n              </div>\n              \n              {/* Right Image */}\n              {imageUrl && (\n                <div className=\"flex-shrink-0 w-1/3\">\n                  <img\n                    src={imageUrl}\n                    alt={imageAlt}\n                    className=\"w-full h-auto rounded-lg object-cover\"\n                  />\n                </div>\n              )}\n            </div>\n          ) : (\n            // Default layout (top image, text only, etc.)\n            <div className={cn('space-y-6', getTextAlignClass())}>\n              {/* Top Image */}\n              {(layout === 'image-only' || (layout === 'text-with-image' && imagePosition === 'top')) && imageUrl && (\n                <div className=\"w-full\">\n                  <img\n                    src={imageUrl}\n                    alt={imageAlt}\n                    className=\"w-full h-auto rounded-lg object-cover max-h-80\"\n                  />\n                </div>\n              )}\n\n              {/* Text Content */}\n              {layout !== 'image-only' && (\n                <div>\n                  {showTitle && title && (\n                    <h2 className={cn('font-bold mb-4', getTitleSizeClass())}>\n                      {title}\n                    </h2>\n                  )}\n                  {content && (\n                    <div className=\"prose max-w-none\">\n                      <p className=\"whitespace-pre-wrap\">{content}</p>\n                    </div>\n                  )}\n                  {showButton && buttonLabel && (\n                    <Button className=\"mt-6\" disabled>\n                      {buttonLabel}\n                    </Button>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  // Edit Mode - Configuration interface\n  return (\n    <div className={cn('p-6', className)}>\n      <div className=\"space-y-6\">\n        {/* Layout Selection */}\n        <div>\n          <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n            Section Layout\n          </Label>\n          <Select\n            value={layout}\n            onValueChange={(value: SectionLayout) => updateSettings({ layout: value })}\n            disabled={isSaving}\n          >\n            <SelectTrigger>\n              <SelectValue>\n                <div className=\"flex items-center space-x-2\">\n                  <Layout className=\"h-4 w-4\" />\n                  <span className=\"capitalize\">{layout.replace('-', ' ')}</span>\n                </div>\n              </SelectValue>\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"text-only\">\n                <div className=\"flex items-center space-x-2\">\n                  <Type className=\"h-4 w-4\" />\n                  <span>Text Only</span>\n                </div>\n              </SelectItem>\n              <SelectItem value=\"image-only\">\n                <div className=\"flex items-center space-x-2\">\n                  <ImageIcon className=\"h-4 w-4\" />\n                  <span>Image Only</span>\n                </div>\n              </SelectItem>\n              <SelectItem value=\"text-with-image\">\n                <div className=\"flex items-center space-x-2\">\n                  <Layout className=\"h-4 w-4\" />\n                  <span>Text with Image</span>\n                </div>\n              </SelectItem>\n              <SelectItem value=\"full-background\">\n                <div className=\"flex items-center space-x-2\">\n                  <ImageIcon className=\"h-4 w-4\" />\n                  <span>Full Background</span>\n                </div>\n              </SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Title Section */}\n        {layout !== 'image-only' && (\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"showTitle\"\n                checked={showTitle}\n                onCheckedChange={(checked) => updateSettings({ showTitle: checked })}\n                disabled={isSaving}\n              />\n              <Label htmlFor=\"showTitle\" className=\"text-sm font-medium cursor-pointer\">\n                Show title\n              </Label>\n            </div>\n\n            {showTitle && (\n              <>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                    Title\n                  </Label>\n                  <InlineEditableText\n                    value={title}\n                    onSave={handleTitleChange}\n                    variant=\"heading\"\n                    placeholder=\"Enter section title...\"\n                    className=\"p-3 border border-gray-200 rounded-lg w-full font-medium\"\n                    showEditIcon={false}\n                    showSaveStatus={true}\n                    maxLength={100}\n                    required={showTitle}\n                    validation={validateTitle}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                      Title Size\n                    </Label>\n                    <Select\n                      value={titleSize}\n                      onValueChange={(value: typeof titleSize) => updateSettings({ titleSize: value })}\n                      disabled={isSaving}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"small\">Small</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"large\">Large</SelectItem>\n                        <SelectItem value=\"xl\">Extra Large</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                      Text Alignment\n                    </Label>\n                    <Select\n                      value={textAlign}\n                      onValueChange={(value: TextAlign) => updateSettings({ textAlign: value })}\n                      disabled={isSaving}\n                    >\n                      <SelectTrigger>\n                        <SelectValue>\n                          <div className=\"flex items-center space-x-2\">\n                            {textAlign === 'left' && <AlignLeft className=\"h-4 w-4\" />}\n                            {textAlign === 'center' && <AlignCenter className=\"h-4 w-4\" />}\n                            {textAlign === 'right' && <AlignRight className=\"h-4 w-4\" />}\n                            <span className=\"capitalize\">{textAlign}</span>\n                          </div>\n                        </SelectValue>\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"left\">\n                          <div className=\"flex items-center space-x-2\">\n                            <AlignLeft className=\"h-4 w-4\" />\n                            <span>Left</span>\n                          </div>\n                        </SelectItem>\n                        <SelectItem value=\"center\">\n                          <div className=\"flex items-center space-x-2\">\n                            <AlignCenter className=\"h-4 w-4\" />\n                            <span>Center</span>\n                          </div>\n                        </SelectItem>\n                        <SelectItem value=\"right\">\n                          <div className=\"flex items-center space-x-2\">\n                            <AlignRight className=\"h-4 w-4\" />\n                            <span>Right</span>\n                          </div>\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </>\n            )}\n          </div>\n        )}\n\n        {/* Content Section */}\n        {layout !== 'image-only' && (\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n              Content\n            </Label>\n            <InlineEditableText\n              value={content}\n              onSave={handleContentChange}\n              variant=\"body\"\n              placeholder=\"Enter your content text...\"\n              className=\"min-h-[120px] p-3 border border-gray-200 rounded-lg w-full\"\n              showEditIcon={false}\n              showSaveStatus={true}\n              multiline={true}\n              maxLength={2000}\n              required={true}\n              validation={validateContent}\n            />\n          </div>\n        )}\n\n        {/* Image Section */}\n        {layout !== 'text-only' && (\n          <div className=\"space-y-4\">\n            <Label className=\"text-sm font-medium text-gray-700 block\">\n              Image\n            </Label>\n\n            {/* Image Upload/Display */}\n            {imageUrl ? (\n              <div className=\"relative\">\n                <img\n                  src={imageUrl}\n                  alt={imageAlt}\n                  className=\"w-full h-48 object-cover rounded-lg border border-gray-200\"\n                />\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  className=\"absolute top-2 right-2\"\n                  onClick={handleImageRemove}\n                  disabled={isSaving}\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ) : (\n              <div\n                className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer hover:border-gray-400 transition-colors\"\n                onClick={() => fileInputRef.current?.click()}\n              >\n                {isUploading ? (\n                  <div className=\"flex items-center justify-center space-x-2\">\n                    <div className=\"w-5 h-5 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\" />\n                    <span className=\"text-blue-600\">Uploading...</span>\n                  </div>\n                ) : (\n                  <>\n                    <Upload className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n                    <p className=\"text-sm text-gray-600\">\n                      Click to upload an image\n                    </p>\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      JPG, PNG up to 5MB\n                    </p>\n                  </>\n                )}\n              </div>\n            )}\n\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={handleImageUpload}\n              className=\"hidden\"\n            />\n\n            {/* Image Alt Text */}\n            {imageUrl && (\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Image Alt Text\n                </Label>\n                <InlineEditableText\n                  value={imageAlt}\n                  onSave={handleImageAltChange}\n                  variant=\"body\"\n                  placeholder=\"Describe this image for accessibility...\"\n                  className=\"p-3 border border-gray-200 rounded-lg w-full text-gray-600\"\n                  showEditIcon={false}\n                  showSaveStatus={true}\n                  maxLength={200}\n                />\n              </div>\n            )}\n\n            {/* Image Position for text-with-image layout */}\n            {layout === 'text-with-image' && (\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Image Position\n                </Label>\n                <Select\n                  value={imagePosition}\n                  onValueChange={(value: ImagePosition) => updateSettings({ imagePosition: value })}\n                  disabled={isSaving}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"top\">Top</SelectItem>\n                    <SelectItem value=\"left\">Left</SelectItem>\n                    <SelectItem value=\"right\">Right</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Button Section */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Switch\n              id=\"showButton\"\n              checked={showButton}\n              onCheckedChange={(checked) => updateSettings({ showButton: checked })}\n              disabled={isSaving}\n            />\n            <Label htmlFor=\"showButton\" className=\"text-sm font-medium cursor-pointer\">\n              Show button\n            </Label>\n          </div>\n\n          {showButton && (\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Button Label\n                </Label>\n                <InlineEditableText\n                  value={buttonLabel}\n                  onSave={handleButtonLabelChange}\n                  variant=\"body\"\n                  placeholder=\"Continue\"\n                  className=\"p-3 border border-gray-200 rounded-lg w-full\"\n                  showEditIcon={false}\n                  showSaveStatus={true}\n                  maxLength={50}\n                />\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Button URL (Optional)\n                </Label>\n                <Input\n                  value={buttonUrl}\n                  onChange={(e) => updateSettings({ buttonUrl: e.target.value })}\n                  placeholder=\"https://example.com\"\n                  disabled={isSaving}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Style Options */}\n        <div className=\"space-y-4\">\n          <Label className=\"text-sm font-medium text-gray-700 block\">\n            Style Options\n          </Label>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                Background Color\n              </Label>\n              <Input\n                type=\"color\"\n                value={backgroundColor}\n                onChange={(e) => updateSettings({ backgroundColor: e.target.value })}\n                className=\"w-full h-10\"\n                disabled={isSaving}\n              />\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                Text Color\n              </Label>\n              <Input\n                type=\"color\"\n                value={textColor}\n                onChange={(e) => updateSettings({ textColor: e.target.value })}\n                className=\"w-full h-10\"\n                disabled={isSaving}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Preview Section */}\n        <div className=\"border-t pt-4\">\n          <Label className=\"text-sm font-medium text-gray-700 mb-3 block\">\n            Preview\n          </Label>\n          <div className=\"bg-gray-50 rounded-lg overflow-hidden\">\n            <InfoSection\n              section={section}\n              isPreview={true}\n              onUpdate={onUpdate}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Saving Indicator */}\n      {isSaving && (\n        <div className=\"absolute top-4 right-4\">\n          <div className=\"flex items-center space-x-2 text-blue-600 bg-blue-50 px-3 py-1 rounded-full\">\n            <div className=\"w-3 h-3 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\" />\n            <span className=\"text-xs font-medium\">Saving...</span>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 8802, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/campaign-builder/results-gate.tsx"],"sourcesContent":["'use client'\n\nimport React from 'react'\nimport { useResultsGating } from '@/contexts/capture-context'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Lock, CheckCircle } from 'lucide-react'\nimport { cn } from '@/lib/utils'\n\ninterface ResultsGateProps {\n  children: React.ReactNode\n  className?: string\n  lockedTitle?: string\n  lockedMessage?: string\n  showProgress?: boolean\n}\n\nexport function ResultsGate({\n  children,\n  className,\n  lockedTitle = \"Results Locked\",\n  lockedMessage = \"Complete the form above to unlock your personalized results.\",\n  showProgress = true\n}: ResultsGateProps) {\n  const { isResultsLocked, canAccessResults, captureCompleted } = useResultsGating()\n\n  if (canAccessResults) {\n    return <>{children}</>\n  }\n\n  return (\n    <div className={cn(\"relative\", className)}>\n      {/* Blurred/Hidden Content */}\n      <div className=\"filter blur-sm pointer-events-none select-none opacity-30\">\n        {children}\n      </div>\n      \n      {/* Lock Overlay */}\n      <div className=\"absolute inset-0 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md mx-auto bg-white/95 backdrop-blur-sm border-2 border-gray-200 shadow-lg\">\n          <CardHeader className=\"text-center space-y-3\">\n            <div className=\"mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center\">\n              {captureCompleted ? (\n                <CheckCircle className=\"h-8 w-8 text-green-600\" />\n              ) : (\n                <Lock className=\"h-8 w-8 text-gray-600\" />\n              )}\n            </div>\n            <CardTitle className=\"text-xl font-bold text-gray-900\">\n              {lockedTitle}\n            </CardTitle>\n          </CardHeader>\n          \n          <CardContent className=\"text-center space-y-4\">\n            <p className=\"text-gray-600\">\n              {lockedMessage}\n            </p>\n            \n            {showProgress && (\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-center space-x-2 text-sm text-gray-500\">\n                  <div className={cn(\n                    \"w-3 h-3 rounded-full\",\n                    captureCompleted ? \"bg-green-500\" : \"bg-gray-300\"\n                  )} />\n                  <span>Form Completion</span>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\nexport default ResultsGate "],"names":[],"mappings":";;;;;AAGA;AACA;AACA;AAAA;AACA;AANA;;;;;;AAgBO,SAAS,YAAY,EAC1B,QAAQ,EACR,SAAS,EACT,cAAc,gBAAgB,EAC9B,gBAAgB,8DAA8D,EAC9E,eAAe,IAAI,EACF;IACjB,MAAM,EAAE,eAAe,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,GAAG,CAAA,GAAA,+HAAA,CAAA,mBAAgB,AAAD;IAE/E,IAAI,kBAAkB;QACpB,qBAAO;sBAAG;;IACZ;IAEA,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,YAAY;;0BAE7B,8OAAC;gBAAI,WAAU;0BACZ;;;;;;0BAIH,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,yHAAA,CAAA,OAAI;oBAAC,WAAU;;sCACd,8OAAC,yHAAA,CAAA,aAAU;4BAAC,WAAU;;8CACpB,8OAAC;oCAAI,WAAU;8CACZ,iCACC,8OAAC,2NAAA,CAAA,cAAW;wCAAC,WAAU;;;;;6DAEvB,8OAAC,kMAAA,CAAA,OAAI;wCAAC,WAAU;;;;;;;;;;;8CAGpB,8OAAC,yHAAA,CAAA,YAAS;oCAAC,WAAU;8CAClB;;;;;;;;;;;;sCAIL,8OAAC,yHAAA,CAAA,cAAW;4BAAC,WAAU;;8CACrB,8OAAC;oCAAE,WAAU;8CACV;;;;;;gCAGF,8BACC,8OAAC;oCAAI,WAAU;8CACb,cAAA,8OAAC;wCAAI,WAAU;;0DACb,8OAAC;gDAAI,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACf,wBACA,mBAAmB,iBAAiB;;;;;;0DAEtC,8OAAC;0DAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASxB;uCAEe","debugId":null}},
    {"offset": {"line": 8950, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/campaign-builder/content-types/output-section.tsx"],"sourcesContent":["'use client'\n\nimport React, { useState, useMemo } from 'react'\nimport { CampaignSection } from '@/lib/types/campaign-builder'\nimport { cn } from '@/lib/utils'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Badge } from '@/components/ui/badge'\nimport { Switch } from '@/components/ui/switch'\nimport { Target, Download, ExternalLink, FileText, Settings, Eye, Code } from 'lucide-react'\nimport { useInlineEdit } from '@/hooks/use-inline-edit'\nimport { InlineEditableText } from '@/components/ui/inline-editable-text'\nimport { ResultsGate } from '../results-gate'\nimport { VariableInterpolatedContent } from '@/components/ui/variable-interpolated-content'\nimport { useVariableAccess } from '@/hooks/use-variable-access'\nimport type { \n  OutputSectionSettings, \n  VariableInterpolationContext \n} from '@/lib/types/output-section'\nimport { InlineContentEditor } from '@/components/ui/inline-content-editor'\nimport { ImageUpload, ImageInfo } from '@/components/ui/image-upload'\nimport { ResponsivePreview } from '@/components/ui/responsive-preview'\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\ninterface OutputSectionProps {\n  section: CampaignSection\n  isPreview?: boolean\n  onUpdate: (updates: Partial<CampaignSection>) => Promise<void>\n  className?: string\n}\n\n// =============================================================================\n// MAIN COMPONENT\n// =============================================================================\n\nexport function OutputSection({\n  section,\n  isPreview = false,\n  onUpdate,\n  className\n}: OutputSectionProps) {\n  const settings = (section.settings as unknown) as OutputSectionSettings\n  const [showDebugInfo, setShowDebugInfo] = useState(false)\n  const [previewMode, setPreviewMode] = useState(false)\n\n  // Get available variables from the campaign\n  const variableAccess = useVariableAccess([], 0) // Empty sections array and 0 order for now\n  const availableVariables = variableAccess.availableVariables || []\n  \n  // Create sample values for preview (this would come from actual campaign data in production)\n  const sampleValues = useMemo(() => {\n    const values: Record<string, any> = {}\n    availableVariables.forEach(variable => {\n      // Create sample values based on variable type\n      if (variable.type === 'text') {\n        values[variable.name] = `Sample ${variable.name}`\n      } else if (variable.type === 'number') {\n        values[variable.name] = 42\n      } else if (variable.type === 'boolean') {\n        values[variable.name] = true\n      } else if (variable.type === 'array') {\n        values[variable.name] = ['Option 1', 'Option 2']\n      } else if (variable.type === 'object') {\n        values[variable.name] = { sample: 'data' }\n      } else {\n        values[variable.name] = `Sample ${variable.name}`\n      }\n    })\n    \n    // Add some common sample variables for demo\n    values.name = 'John Doe'\n    values.email = 'john@example.com'\n    values.score = 85\n    values.recommendation = 'You are doing great! Keep up the excellent work.'\n    \n    return values\n  }, [availableVariables])\n\n  // Create variable interpolation context\n  const variableContext = useMemo((): VariableInterpolationContext => ({\n    variables: sampleValues,\n    availableVariables,\n    formatters: {},\n    conditionalRules: settings.conditionalContent || []\n  }), [sampleValues, availableVariables, settings.conditionalContent])\n\n  // =============================================================================\n  // INLINE EDITING HOOKS\n  // =============================================================================\n\n  const titleEdit = useInlineEdit(settings.title || 'Your Results', {\n    onSave: async (value: string) => {\n      await onUpdate({\n        settings: { ...settings, title: value }\n      })\n    }\n  })\n\n  // Replace the basic contentEdit with enhanced inline editing\n  const handleContentChange = async (value: string) => {\n    await onUpdate({\n      settings: { ...settings, content: value }\n    })\n  }\n\n  // Add image upload handler\n  const handleImageChange = async (image: ImageInfo | null) => {\n    await onUpdate({\n      settings: { \n        ...settings, \n        headerImage: image,\n        enableVariableInterpolation: settings.enableVariableInterpolation !== false\n      }\n    })\n  }\n\n  // =============================================================================\n  // EVENT HANDLERS\n  // =============================================================================\n\n  const handleEnableInterpolation = async (enabled: boolean) => {\n    await onUpdate({\n      settings: { \n        ...settings, \n        enableVariableInterpolation: enabled \n      }\n    })\n  }\n\n  const handleSettingsUpdate = async (newSettings: Partial<OutputSectionSettings>) => {\n    await onUpdate({\n      settings: { ...settings, ...newSettings }\n    })\n  }\n\n  // =============================================================================\n  // RENDER FUNCTIONS\n  // =============================================================================\n\n  const renderOutputContent = () => {\n    const enableInterpolation = settings.enableVariableInterpolation !== false\n\n    switch (section.type) {\n      case 'output-results':\n        return (\n          <Card className=\"w-full max-w-2xl mx-auto\">\n            {/* Header Image */}\n            {(settings as any).headerImage && (\n              <div className=\"relative\">\n                <img\n                  src={(settings as any).headerImage.url}\n                  alt={(settings as any).headerImage.alt || 'Header image'}\n                  className={cn(\n                    \"w-full object-cover rounded-t-lg\",\n                    (settings as any).headerImage.sizing === 'small' && \"h-32\",\n                    (settings as any).headerImage.sizing === 'medium' && \"h-48\",\n                    (settings as any).headerImage.sizing === 'large' && \"h-64\",\n                    !(settings as any).headerImage.sizing && \"h-48\"\n                  )}\n                />\n                {(settings as any).headerImage.caption && (\n                  <div className=\"absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 text-white text-xs p-2\">\n                    {(settings as any).headerImage.caption}\n                  </div>\n                )}\n              </div>\n            )}\n\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"text-2xl font-bold\">\n                {enableInterpolation ? (\n                  <VariableInterpolatedContent\n                    content={settings.title}\n                    context={variableContext}\n                    showPreview={true}\n                    enableRealTimeProcessing={true}\n                  />\n                ) : (\n                  settings.title\n                )}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"prose prose-sm max-w-none\">\n                {enableInterpolation ? (\n                  <VariableInterpolatedContent\n                    content={settings.content}\n                    context={variableContext}\n                    showPreview={true}\n                    enableRealTimeProcessing={true}\n                    highlightVariables={isPreview}\n                  />\n                ) : (\n                  <div dangerouslySetInnerHTML={{ __html: settings.content }} />\n                )}\n              </div>\n              {settings.showScore && (\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                  <p className=\"text-sm text-blue-600\">\n                    {enableInterpolation ? (\n                      <VariableInterpolatedContent\n                        content=\"Score: @score/100\"\n                        context={variableContext}\n                        showPreview={true}\n                        enableRealTimeProcessing={true}\n                      />\n                    ) : (\n                      'Score: 85/100'\n                    )}\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )\n\n      case 'output-download':\n        return (\n          <Card className=\"w-full max-w-md mx-auto\">\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"text-xl font-bold\">\n                {enableInterpolation ? (\n                  <VariableInterpolatedContent\n                    content={settings.title}\n                    context={variableContext}\n                    showPreview={true}\n                    enableRealTimeProcessing={true}\n                  />\n                ) : (\n                  settings.title\n                )}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-center space-y-4\">\n              <div className=\"text-gray-600\">\n                {enableInterpolation ? (\n                  <VariableInterpolatedContent\n                    content={settings.content}\n                    context={variableContext}\n                    showPreview={true}\n                    enableRealTimeProcessing={true}\n                  />\n                ) : (\n                  settings.content\n                )}\n              </div>\n              <Button \n                className=\"w-full\"\n                onClick={() => {\n                  if (settings.fileUrl) {\n                    window.open(settings.fileUrl, '_blank')\n                  }\n                }}\n                disabled={!settings.fileUrl}\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                {enableInterpolation ? (\n                  <VariableInterpolatedContent\n                    content={settings.fileName || 'Download @name Report'}\n                    context={variableContext}\n                    showPreview={true}\n                    enableRealTimeProcessing={true}\n                  />\n                ) : (\n                  settings.fileName || 'Download Resource'\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n        )\n\n      case 'output-redirect':\n        return (\n          <Card className=\"w-full max-w-md mx-auto\">\n            <CardContent className=\"text-center space-y-4 pt-6\">\n              <div className=\"mx-auto w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                <ExternalLink className=\"h-6 w-6 text-blue-600\" />\n              </div>\n              <div>\n                <h3 className=\"font-medium text-gray-900\">\n                  {enableInterpolation ? (\n                    <VariableInterpolatedContent\n                      content={settings.message || 'Redirecting @name...'}\n                      context={variableContext}\n                      showPreview={true}\n                      enableRealTimeProcessing={true}\n                    />\n                  ) : (\n                    settings.message || 'Redirecting...'\n                  )}\n                </h3>\n                <p className=\"text-sm text-gray-500 mt-1\">\n                  You will be redirected in {settings.delay || 0} seconds\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        )\n\n      default:\n        return (\n          <Card className=\"w-full max-w-md mx-auto\">\n            <CardContent className=\"text-center space-y-4 pt-6\">\n              <div className=\"mx-auto w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center\">\n                <Target className=\"h-6 w-6 text-gray-600\" />\n              </div>\n              <div>\n                <h3 className=\"font-medium text-gray-900\">\n                  {enableInterpolation ? (\n                    <VariableInterpolatedContent\n                      content={settings.title}\n                      context={variableContext}\n                      showPreview={true}\n                      enableRealTimeProcessing={true}\n                    />\n                  ) : (\n                    settings.title\n                  )}\n                </h3>\n                <div className=\"text-sm text-gray-500 mt-1\">\n                  {enableInterpolation ? (\n                    <VariableInterpolatedContent\n                      content={settings.content}\n                      context={variableContext}\n                      showPreview={true}\n                      enableRealTimeProcessing={true}\n                    />\n                  ) : (\n                    settings.content\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )\n    }\n  }\n\n  // =============================================================================\n  // MAIN RENDER\n  // =============================================================================\n\n  if (isPreview) {\n    return (\n      <ResultsGate className={className}>\n        <div className=\"py-8\">\n          {renderOutputContent()}\n        </div>\n      </ResultsGate>\n    )\n  }\n\n  // Edit Mode\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Header Section */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center space-x-2\">\n          <Target className=\"h-5 w-5 text-emerald-600\" />\n          <Badge variant=\"outline\" className=\"bg-emerald-50 text-emerald-700 border-emerald-200\">\n            {section.type === 'output-results' ? 'Results Page' : \n             section.type === 'output-download' ? 'Download Link' :\n             section.type === 'output-redirect' ? 'Redirect' : 'Output'}\n          </Badge>\n        </div>\n        \n        <div className=\"space-y-3\">\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700\">Title</Label>\n            <InlineContentEditor\n              content={settings.title || 'Your Results'}\n              onChange={async (value) => {\n                await onUpdate({\n                  settings: { ...settings, title: value }\n                })\n              }}\n              placeholder=\"Enter section title...\"\n              enableRichText={false}\n              enableImages={false}\n              enableVariables={settings.enableVariableInterpolation !== false}\n              variableContext={variableContext}\n              className=\"mt-1\"\n            />\n            {settings.enableVariableInterpolation && (\n              <div className=\"text-xs text-gray-500 mt-1\">\n                Use @variableName to insert dynamic content. Examples: @name, @score, @recommendation\n              </div>\n            )}\n          </div>\n          \n          <div>\n            <Label className=\"text-sm font-medium text-gray-700\">Content</Label>\n            <InlineContentEditor\n              content={settings.content || 'Based on your answers...'}\n              onChange={handleContentChange}\n              placeholder=\"Enter section content...\"\n              enableRichText={true}\n              enableImages={true}\n              enableVariables={settings.enableVariableInterpolation !== false}\n              variableContext={variableContext}\n              showWordCount={true}\n              allowFullscreen={true}\n              className=\"mt-1\"\n            />\n            {settings.enableVariableInterpolation && (\n              <div className=\"text-xs text-gray-500 mt-1\">\n                Supports variable interpolation, conditional content, and formatting. Use `{'{'}if @variable{'}'}content{'{/if}'}` for conditions.\n              </div>\n            )}\n          </div>\n\n          {/* Header Image Upload for Results Type */}\n          {section.type === 'output-results' && (\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700\">Header Image (optional)</Label>\n              <ImageUpload\n                value={(settings as any).headerImage || null}\n                onChange={handleImageChange}\n                placeholder=\"Add a header image to your results page\"\n                enableSizing={true}\n                enablePositioning={false} // Header images are always full width\n                className=\"mt-1\"\n              />\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Variable Interpolation Settings */}\n      <div className=\"space-y-4\">\n        <Label className=\"text-sm font-medium text-gray-700\">Variable Interpolation</Label>\n        \n        <div className=\"flex items-center space-x-3\">\n          <Switch\n            checked={settings.enableVariableInterpolation !== false}\n            onCheckedChange={handleEnableInterpolation}\n            id=\"enable-interpolation\"\n          />\n          <Label htmlFor=\"enable-interpolation\" className=\"text-sm text-gray-600\">\n            Enable dynamic content with variables\n          </Label>\n        </div>\n\n        {settings.enableVariableInterpolation !== false && (\n          <div className=\"space-y-3 pl-6 border-l-2 border-emerald-200\">\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setPreviewMode(!previewMode)}\n              >\n                <Eye className=\"h-4 w-4 mr-1\" />\n                {previewMode ? 'Edit Mode' : 'Preview Mode'}\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowDebugInfo(!showDebugInfo)}\n              >\n                <Code className=\"h-4 w-4 mr-1\" />\n                Debug Info\n              </Button>\n            </div>\n\n            {availableVariables.length > 0 && (\n              <div>\n                <div className=\"text-xs text-gray-600 mb-2\">Available Variables:</div>\n                <div className=\"flex flex-wrap gap-1\">\n                  {availableVariables.slice(0, 10).map((variable, index) => (\n                    <Badge key={index} variant=\"outline\" className=\"text-xs bg-blue-50 text-blue-700\">\n                      @{variable.name}\n                    </Badge>\n                  ))}\n                  {availableVariables.length > 10 && (\n                    <Badge variant=\"outline\" className=\"text-xs text-gray-500\">\n                      +{availableVariables.length - 10} more\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Type-specific Settings */}\n      {section.type === 'output-download' && (\n        <div className=\"space-y-4\">\n          <Label className=\"text-sm font-medium text-gray-700\">Download Settings</Label>\n          <div className=\"space-y-3\">\n            <div>\n              <Label className=\"text-xs text-gray-600\">File URL</Label>\n              <Input\n                value={settings.fileUrl || ''}\n                onChange={(e) => onUpdate({\n                  settings: { ...settings, fileUrl: e.target.value }\n                })}\n                placeholder=\"https://example.com/file.pdf\"\n              />\n            </div>\n            <div>\n              <Label className=\"text-xs text-gray-600\">File Name</Label>\n              <Input\n                value={settings.fileName || ''}\n                onChange={(e) => onUpdate({\n                  settings: { ...settings, fileName: e.target.value }\n                })}\n                placeholder=\"resource.pdf\"\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {section.type === 'output-redirect' && (\n        <div className=\"space-y-4\">\n          <Label className=\"text-sm font-medium text-gray-700\">Redirect Settings</Label>\n          <div className=\"space-y-3\">\n            <div>\n              <Label className=\"text-xs text-gray-600\">Redirect URL</Label>\n              <Input\n                value={settings.url || ''}\n                onChange={(e) => onUpdate({\n                  settings: { ...settings, url: e.target.value }\n                })}\n                placeholder=\"https://example.com\"\n              />\n            </div>\n            <div>\n              <Label className=\"text-xs text-gray-600\">Delay (seconds)</Label>\n              <Input\n                type=\"number\"\n                value={settings.delay || 0}\n                onChange={(e) => onUpdate({\n                  settings: { ...settings, delay: parseInt(e.target.value) || 0 }\n                })}\n                placeholder=\"0\"\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Preview Section */}\n      <div className=\"pt-4 border-t\">\n        <Label className=\"text-sm font-medium text-gray-700 mb-3 block\">Responsive Preview</Label>\n        <ResponsivePreview\n          enableDeviceToggle={true}\n          enableOrientationToggle={true}\n          showDeviceFrame={true}\n          defaultDevice=\"desktop\"\n          className=\"scale-90 origin-top-left\"\n        >\n          <div className=\"p-4\">\n            <OutputSection\n              section={section}\n              isPreview={true}\n              onUpdate={onUpdate}\n            />\n          </div>\n        </ResponsivePreview>\n      </div>\n    </div>\n  )\n}\n\nexport default OutputSection "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 10025, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/campaign-builder/content-types/content-component-factory.tsx"],"sourcesContent":["'use client'\n\nimport { CampaignSection } from '@/lib/types/campaign-builder'\nimport { InfoSection } from './info-section'\nimport { OutputSection } from './output-section'\nimport { cn } from '@/lib/utils'\nimport { AlertCircle, FileText, Image as ImageIcon, Type } from 'lucide-react'\n\ninterface ContentComponentFactoryProps {\n  section: CampaignSection\n  isPreview?: boolean\n  onUpdate: (updates: Partial<CampaignSection>) => Promise<void>\n  className?: string\n}\n\nexport function ContentComponentFactory({\n  section,\n  isPreview = false,\n  onUpdate,\n  className\n}: ContentComponentFactoryProps) {\n  // Route to appropriate content component based on section type\n  switch (section.type) {\n    case 'info':\n    case 'text-block':\n    case 'image-block':\n    case 'hero':\n    case 'content':\n      return (\n        <InfoSection\n          section={section}\n          isPreview={isPreview}\n          onUpdate={onUpdate}\n          className={className}\n        />\n      )\n\n    // Video section (future implementation)\n    case 'video':\n      return (\n        <PlaceholderSection\n          section={section}\n          isPreview={isPreview}\n          onUpdate={onUpdate}\n          className={className}\n          icon={<FileText className=\"h-8 w-8\" />}\n          message=\"Video section component coming soon\"\n        />\n      )\n\n    // Divider section (simple implementation)\n    case 'divider':\n      if (isPreview) {\n        return (\n          <div className={cn('py-6', className)}>\n            <hr className=\"border-gray-300\" />\n          </div>\n        )\n      }\n      return (\n        <SimpleDividerEditor\n          section={section}\n          onUpdate={onUpdate}\n          className={className}\n        />\n      )\n\n    // Spacer section (simple implementation)\n    case 'spacer':\n      const height = (section.settings?.height as number) || 40\n      if (isPreview) {\n        return (\n          <div \n            className={cn('w-full', className)}\n            style={{ height: `${height}px` }}\n          />\n        )\n      }\n      return (\n        <SimpleSpacerEditor\n          section={section}\n          onUpdate={onUpdate}\n          className={className}\n        />\n      )\n\n    // Output sections\n    case 'output-results':\n    case 'output-download':\n    case 'output-redirect':\n      return (\n        <OutputSection\n          section={section}\n          isPreview={isPreview}\n          onUpdate={onUpdate}\n          className={className}\n        />\n      )\n\n    // Fallback for unknown content section types\n    default:\n      return (\n        <PlaceholderSection\n          section={section}\n          isPreview={isPreview}\n          onUpdate={onUpdate}\n          className={className}\n          icon={<FileText className=\"h-8 w-8\" />}\n          message={`Content component for \"${section.type}\" not implemented yet`}\n        />\n      )\n  }\n}\n\n// Placeholder component for unimplemented section types\nfunction PlaceholderSection({\n  section,\n  isPreview = false,\n  onUpdate,\n  className,\n  icon,\n  message\n}: ContentComponentFactoryProps & {\n  icon: React.ReactNode\n  message: string\n}) {\n  if (isPreview) {\n    return (\n      <div className={cn('p-6', className)}>\n        <div className=\"text-center space-y-4\">\n          <div className=\"text-gray-400\">\n            {icon}\n          </div>\n          <div>\n            <h3 className=\"text-lg font-medium text-gray-900\">\n              {section.title}\n            </h3>\n            <p className=\"text-sm text-gray-500 mt-1\">\n              {section.type} section\n            </p>\n          </div>\n          {section.settings?.content && typeof section.settings.content === 'string' && (\n            <div className=\"text-gray-700 max-w-md mx-auto\">\n              {section.settings.content}\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className={cn('p-6', className)}>\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center space-x-3 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n          <AlertCircle className=\"h-5 w-5 text-yellow-600\" />\n          <div>\n            <p className=\"text-sm font-medium text-yellow-800\">\n              {message}\n            </p>\n            <p className=\"text-xs text-yellow-700 mt-1\">\n              Use the section controls above to configure basic settings.\n            </p>\n          </div>\n        </div>\n\n        {/* Basic content editor */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Content\n          </label>\n          <textarea\n            value={String(section.settings?.content || '')}\n            onChange={(e) => onUpdate({\n              settings: {\n                ...section.settings,\n                content: e.target.value\n              }\n            })}\n            placeholder=\"Enter content for this section...\"\n            className=\"w-full p-3 border border-gray-200 rounded-lg\"\n            rows={4}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Simple divider editor\nfunction SimpleDividerEditor({\n  section,\n  onUpdate,\n  className\n}: Pick<ContentComponentFactoryProps, 'section' | 'onUpdate' | 'className'>) {\n  const style = (section.settings?.style as string) || 'solid'\n  const color = (section.settings?.color as string) || '#d1d5db'\n  const thickness = (section.settings?.thickness as number) || 1\n\n  return (\n    <div className={cn('p-6', className)}>\n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Style\n          </label>\n          <select\n            value={style}\n            onChange={(e) => onUpdate({\n              settings: {\n                ...section.settings,\n                style: e.target.value\n              }\n            })}\n            className=\"w-full p-2 border border-gray-200 rounded\"\n          >\n            <option value=\"solid\">Solid</option>\n            <option value=\"dashed\">Dashed</option>\n            <option value=\"dotted\">Dotted</option>\n          </select>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Color\n            </label>\n            <input\n              type=\"color\"\n              value={color}\n              onChange={(e) => onUpdate({\n                settings: {\n                  ...section.settings,\n                  color: e.target.value\n                }\n              })}\n              className=\"w-full h-10 border border-gray-200 rounded\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Thickness (px)\n            </label>\n            <input\n              type=\"number\"\n              value={thickness}\n              onChange={(e) => onUpdate({\n                settings: {\n                  ...section.settings,\n                  thickness: parseInt(e.target.value) || 1\n                }\n              })}\n              min={1}\n              max={10}\n              className=\"w-full p-2 border border-gray-200 rounded\"\n            />\n          </div>\n        </div>\n\n        {/* Preview */}\n        <div className=\"border-t pt-4\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Preview\n          </label>\n          <hr \n            style={{\n              borderStyle: style,\n              borderColor: color,\n              borderWidth: `${thickness}px 0 0 0`\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Simple spacer editor\nfunction SimpleSpacerEditor({\n  section,\n  onUpdate,\n  className\n}: Pick<ContentComponentFactoryProps, 'section' | 'onUpdate' | 'className'>) {\n  const height = (section.settings?.height as number) || 40\n\n  return (\n    <div className={cn('p-6', className)}>\n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Height (px)\n          </label>\n          <input\n            type=\"number\"\n            value={height}\n            onChange={(e) => onUpdate({\n              settings: {\n                ...section.settings,\n                height: parseInt(e.target.value) || 40\n              }\n            })}\n            min={10}\n            max={200}\n            className=\"w-full p-2 border border-gray-200 rounded\"\n          />\n        </div>\n\n        {/* Preview */}\n        <div className=\"border-t pt-4\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Preview\n          </label>\n          <div \n            className=\"w-full bg-gray-100 border border-gray-200 rounded flex items-center justify-center text-xs text-gray-500\"\n            style={{ height: `${height}px` }}\n          >\n            {height}px spacer\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Export the info section for direct use\nexport { InfoSection } "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 10599, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/campaign-builder/question-types/question-component-factory.tsx"],"sourcesContent":["'use client'\n\nimport { CampaignSection } from '@/lib/types/campaign-builder'\nimport { TextQuestion } from './text-question'\nimport { MultipleChoiceQuestion } from './multiple-choice-question'\nimport { RatingScaleQuestion } from './rating-scale-question'\nimport { CaptureSection } from './capture-section'\nimport { cn } from '@/lib/utils'\nimport { AlertCircle, FileText } from 'lucide-react'\nimport { ContentComponentFactory } from '../content-types/content-component-factory'\n\ninterface QuestionComponentFactoryProps {\n  section: CampaignSection\n  isPreview?: boolean\n  onUpdate: (updates: Partial<CampaignSection>) => Promise<void>\n  className?: string\n}\n\nexport function QuestionComponentFactory({\n  section,\n  isPreview = false,\n  onUpdate,\n  className\n}: QuestionComponentFactoryProps) {\n  // Route to appropriate question component based on section type\n  switch (section.type) {\n    case 'text-input':\n      return (\n        <TextQuestion\n          section={section}\n          isPreview={isPreview}\n          onUpdate={onUpdate}\n          className={className}\n        />\n      )\n    \n    case 'multiple-choice':\n      return (\n        <MultipleChoiceQuestion\n          section={section}\n          isPreview={isPreview}\n          onUpdate={onUpdate}\n          className={className}\n        />\n      )\n    \n    case 'rating-scale':\n      return (\n        <RatingScaleQuestion\n          section={section}\n          isPreview={isPreview}\n          onUpdate={onUpdate}\n          className={className}\n        />\n      )\n\n    case 'capture':\n      return (\n        <CaptureSection\n          section={section}\n          isPreview={isPreview}\n          onUpdate={onUpdate}\n          className={className}\n        />\n      )\n\n    // For email capture, use text input with email type\n    case 'email-capture':\n      return (\n        <TextQuestion\n          section={{\n            ...section,\n            settings: {\n              ...section.settings,\n              inputType: 'email',\n              content: section.settings?.content || 'Enter your email address',\n              placeholder: 'your@email.com',\n              validation: {\n                pattern: '^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$',\n                message: 'Please enter a valid email address'\n              }\n            }\n          }}\n          isPreview={isPreview}\n          onUpdate={onUpdate}\n          className={className}\n        />\n      )\n\n    // For contact form, use text input with specific settings\n    case 'contact-form':\n      return (\n        <div className={cn('space-y-6', className)}>\n          {/* Name Field */}\n          <TextQuestion\n            section={{\n              ...section,\n              id: `${section.id}-name`,\n              title: 'Name',\n              settings: {\n                content: 'What\\'s your name?',\n                placeholder: 'Enter your full name',\n                inputType: 'text',\n                required: true,\n                maxLength: 100\n              }\n            }}\n            isPreview={isPreview}\n            onUpdate={async (updates) => {\n              // Handle contact form name field updates\n              await onUpdate({\n                settings: {\n                  ...section.settings,\n                  nameField: updates.settings\n                }\n              })\n            }}\n          />\n\n          {/* Email Field */}\n          <TextQuestion\n            section={{\n              ...section,\n              id: `${section.id}-email`,\n              title: 'Email',\n              settings: {\n                content: 'What\\'s your email address?',\n                placeholder: 'your@email.com',\n                inputType: 'email',\n                required: true,\n                validation: {\n                  pattern: '^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$',\n                  message: 'Please enter a valid email address'\n                }\n              }\n            }}\n            isPreview={isPreview}\n            onUpdate={async (updates) => {\n              // Handle contact form email field updates\n              await onUpdate({\n                settings: {\n                  ...section.settings,\n                  emailField: updates.settings\n                }\n              })\n            }}\n          />\n\n          {/* Phone Field (Optional) */}\n          <TextQuestion\n            section={{\n              ...section,\n              id: `${section.id}-phone`,\n              title: 'Phone',\n              settings: {\n                content: 'What\\'s your phone number? (Optional)',\n                placeholder: '+1 (555) 123-4567',\n                inputType: 'phone',\n                required: false,\n                validation: {\n                  pattern: '^[\\\\+]?[1-9][\\\\d\\\\s\\\\-\\\\(\\\\)]{7,15}$',\n                  message: 'Please enter a valid phone number'\n                }\n              }\n            }}\n            isPreview={isPreview}\n            onUpdate={async (updates) => {\n              // Handle contact form phone field updates\n              await onUpdate({\n                settings: {\n                  ...section.settings,\n                  phoneField: updates.settings\n                }\n              })\n            }}\n          />\n        </div>\n      )\n\n    // Fallback for unsupported or content section types\n    default:\n      return (\n        <ContentComponentFactory\n          section={section}\n          isPreview={isPreview}\n          onUpdate={onUpdate}\n          className={className}\n        />\n      )\n  }\n}\n\n// Export individual question components for direct use\nexport { TextQuestion, MultipleChoiceQuestion, RatingScaleQuestion, CaptureSection } "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 10826, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/campaign-builder/section-block.tsx"],"sourcesContent":["'use client'\n\nimport { useState } from 'react'\nimport { useSortable } from '@dnd-kit/sortable'\nimport { CSS } from '@dnd-kit/utilities'\nimport { CampaignSection, getSectionTypeById } from '@/lib/types/campaign-builder'\nimport { SectionTopBar } from './section-top-bar'\nimport { SectionBottomBar } from './section-bottom-bar'\nimport { Card } from '@/components/ui/card'\nimport { InlineEditableText } from '@/components/ui/inline-editable-text'\nimport { cn } from '@/lib/utils'\nimport { ChevronDown, ChevronRight, FileText, AlertCircle } from 'lucide-react'\nimport { QuestionComponentFactory } from './question-types/question-component-factory'\nimport { ContentComponentFactory } from './content-types/content-component-factory'\n\ninterface SectionBlockProps {\n  section: CampaignSection\n  onUpdate: (sectionId: string, updates: Partial<CampaignSection>) => Promise<void>\n  onDelete: (sectionId: string) => void\n  onDuplicate: (sectionId: string) => void\n  onConfigure?: (sectionId: string) => void\n  onTypeChange?: (sectionId: string, newType: string) => void\n  className?: string\n  isCollapsible?: boolean\n  initiallyCollapsed?: boolean\n}\n\nexport function SectionBlock({\n  section,\n  onUpdate,\n  onDelete,\n  onDuplicate,\n  onConfigure,\n  onTypeChange,\n  className,\n  isCollapsible = true,\n  initiallyCollapsed = false\n}: SectionBlockProps) {\n  const [isPreview, setIsPreview] = useState(false)\n  const [isCollapsed, setIsCollapsed] = useState(initiallyCollapsed)\n  const [isSaving, setIsSaving] = useState(false)\n\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({\n    id: section.id,\n    data: {\n      type: 'campaign-section',\n      section\n    }\n  })\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  }\n\n  const sectionType = getSectionTypeById(section.type)\n  const isQuestionType = sectionType?.category === 'input' || \n    ['multiple-choice', 'text-input', 'rating-scale', 'email-capture', 'contact-form'].includes(section.type)\n\n  // Handle section name updates\n  const handleNameChange = async (newName: string) => {\n    if (newName.trim() === section.title) return\n    \n    setIsSaving(true)\n    try {\n      await onUpdate(section.id, { title: newName.trim() })\n    } catch (error) {\n      throw error\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  // Handle type changes\n  const handleTypeChange = async (newType: string) => {\n    if (newType === section.type) return\n    \n    setIsSaving(true)\n    try {\n      // Update the section type and potentially reset settings\n      const newSectionType = getSectionTypeById(newType)\n      const updates: Partial<CampaignSection> = {\n        type: newType,\n        settings: newSectionType?.defaultSettings || {}\n      }\n      \n      await onUpdate(section.id, updates)\n      onTypeChange?.(section.id, newType)\n    } catch (error) {\n      console.error('Failed to update section type:', error)\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  // Handle visibility toggle\n  const handleVisibilityToggle = async () => {\n    setIsSaving(true)\n    try {\n      await onUpdate(section.id, { isVisible: !section.isVisible })\n    } catch (error) {\n      console.error('Failed to update visibility:', error)\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  // Handle required toggle for questions\n  const handleRequiredChange = async (required: boolean) => {\n    setIsSaving(true)\n    try {\n      await onUpdate(section.id, { \n        settings: { \n          ...section.settings, \n          required \n        } \n      })\n    } catch (error) {\n      console.error('Failed to update required status:', error)\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  // Handle button label changes\n  const handleButtonLabelChange = async (newLabel: string) => {\n    setIsSaving(true)\n    try {\n      await onUpdate(section.id, { \n        settings: { \n          ...section.settings, \n          buttonLabel: newLabel.trim() \n        } \n      })\n    } catch (error) {\n      throw error\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  // Handle content updates\n  const handleContentChange = async (newContent: string) => {\n    setIsSaving(true)\n    try {\n      await onUpdate(section.id, { \n        settings: { \n          ...section.settings, \n          content: newContent \n        } \n      })\n    } catch (error) {\n      throw error\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  // Handle delete with confirmation\n  const handleDelete = () => {\n    if (confirm(`Are you sure you want to delete \"${section.title}\"?`)) {\n      onDelete(section.id)\n    }\n  }\n\n  // Get current settings\n  const isRequired = Boolean(section.settings?.required) || false\n  const buttonLabel = (section.settings?.buttonLabel as string) || 'Next'\n  const content = (section.settings?.content as string) || ''\n\n  // Render section content based on type and mode\n  const renderSectionContent = () => {\n    if (isCollapsed) {\n      return (\n        <div className=\"p-4 text-center text-gray-500 text-sm\">\n          <ChevronRight className=\"h-4 w-4 mx-auto mb-2\" />\n          Section collapsed - click to expand\n        </div>\n      )\n    }\n\n    // Use question component factory for question types\n    const questionTypes = ['text-input', 'multiple-choice', 'rating-scale', 'email-capture', 'contact-form']\n    if (questionTypes.includes(section.type)) {\n      return (\n        <QuestionComponentFactory\n          section={section}\n          isPreview={isPreview}\n          onUpdate={(updates) => onUpdate(section.id, updates)}\n        />\n      )\n    }\n\n    // Use content component factory for content types\n    const contentTypes = ['info', 'text-block', 'image-block', 'hero', 'content', 'video', 'divider', 'spacer']\n    if (contentTypes.includes(section.type)) {\n      return (\n        <ContentComponentFactory\n          section={section}\n          isPreview={isPreview}\n          onUpdate={(updates) => onUpdate(section.id, updates)}\n        />\n      )\n    }\n\n    // Fallback to existing logic for any other section types\n    if (isPreview) {\n      return renderPreviewContent()\n    }\n\n    return renderEditContent()\n  }\n\n  // Render preview mode content\n  const renderPreviewContent = () => {\n    switch (section.type) {\n      case 'multiple-choice':\n        return (\n          <div className=\"p-6\">\n            <h3 className=\"text-lg font-medium mb-4\">\n              {content || 'Your question text here...'}\n              {isRequired && <span className=\"text-red-500 ml-1\">*</span>}\n            </h3>\n            <div className=\"space-y-2\">\n              {['Option 1', 'Option 2', 'Option 3'].map((option, index) => (\n                <label key={index} className=\"flex items-center space-x-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\">\n                  <input type=\"radio\" name={`preview-${section.id}`} className=\"h-4 w-4\" />\n                  <span>{option}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n        )\n      \n      case 'text-input':\n        return (\n          <div className=\"p-6\">\n            <h3 className=\"text-lg font-medium mb-4\">\n              {content || 'Your question text here...'}\n              {isRequired && <span className=\"text-red-500 ml-1\">*</span>}\n            </h3>\n            <input \n              type=\"text\" \n              placeholder=\"Type your answer here...\"\n              className=\"w-full p-3 border border-gray-200 rounded-lg\"\n              disabled\n            />\n          </div>\n        )\n      \n      case 'text-block':\n        return (\n          <div className=\"p-6\">\n            <div className=\"prose max-w-none\">\n              {content || 'Your content text here...'}\n            </div>\n          </div>\n        )\n      \n      case 'email-capture':\n        return (\n          <div className=\"p-6\">\n            <h3 className=\"text-lg font-medium mb-4\">\n              {content || 'Enter your email address'}\n              {isRequired && <span className=\"text-red-500 ml-1\">*</span>}\n            </h3>\n            <input \n              type=\"email\" \n              placeholder=\"your@email.com\"\n              className=\"w-full p-3 border border-gray-200 rounded-lg\"\n              disabled\n            />\n          </div>\n        )\n      \n      default:\n        return (\n          <div className=\"p-6\">\n            <div className=\"text-center text-gray-500\">\n              <FileText className=\"h-8 w-8 mx-auto mb-2\" />\n              <p className=\"text-sm\">Preview for {sectionType?.name || section.type}</p>\n              <p className=\"text-xs mt-1\">{content || 'No content configured'}</p>\n            </div>\n          </div>\n        )\n    }\n  }\n\n  // Render edit mode content\n  const renderEditContent = () => {\n    return (\n      <div className=\"p-6\">\n        <div className=\"space-y-4\">\n          {/* Content Editor */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              {isQuestionType ? 'Question Text' : 'Content'}\n              {isRequired && <span className=\"text-red-500 ml-1\">*</span>}\n            </label>\n            <InlineEditableText\n              value={content}\n              onSave={handleContentChange}\n              variant=\"body\"\n              placeholder={\n                isQuestionType \n                  ? \"Enter your question text...\" \n                  : \"Enter your content...\"\n              }\n              className=\"min-h-[60px] p-3 border border-gray-200 rounded-lg w-full\"\n              showEditIcon={false}\n              showSaveStatus={true}\n              multiline={true}\n              maxLength={1000}\n            />\n          </div>\n\n          {/* Section-specific settings */}\n          {section.type === 'multiple-choice' && (\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Answer Options\n              </label>\n              <div className=\"space-y-2\">\n                {['Option 1', 'Option 2', 'Option 3'].map((option, index) => (\n                  <div key={index} className=\"flex items-center space-x-2\">\n                    <span className=\"w-6 h-6 rounded-full border border-gray-300 flex items-center justify-center text-xs font-medium\">\n                      {index + 1}\n                    </span>\n                    <input \n                      type=\"text\" \n                      defaultValue={option}\n                      className=\"flex-1 p-2 border border-gray-200 rounded text-sm\"\n                      placeholder={`Option ${index + 1}`}\n                    />\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Configuration Preview */}\n          {section.settings && Object.keys(section.settings).length > 0 && (\n            <div className=\"bg-gray-50 rounded-lg p-3\">\n              <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Current Settings:</h4>\n              <div className=\"space-y-1 text-xs text-gray-600\">\n                {Object.entries(section.settings).slice(0, 5).map(([key, value]) => (\n                  <div key={key} className=\"flex justify-between\">\n                    <span className=\"capitalize\">{key.replace(/([A-Z])/g, ' $1')}:</span>\n                    <span className=\"font-medium\">{String(value)}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <Card\n      ref={setNodeRef}\n      style={style}\n      className={cn(\n        'transition-all duration-200 overflow-hidden',\n        isDragging && 'opacity-50 shadow-lg scale-105 rotate-2',\n        !section.isVisible && 'opacity-60',\n        'hover:shadow-md',\n        className\n      )}\n    >\n      {/* Top Bar */}\n      <SectionTopBar\n        section={section}\n        isPreview={isPreview}\n        isCollapsed={isCollapsed}\n        onNameChange={handleNameChange}\n        onTypeChange={handleTypeChange}\n        onPreviewToggle={() => setIsPreview(!isPreview)}\n        onVisibilityToggle={handleVisibilityToggle}\n        onDelete={handleDelete}\n        onConfigure={() => onConfigure?.(section.id)}\n        onCollapseToggle={() => isCollapsible && setIsCollapsed(!isCollapsed)}\n        dragHandleProps={{ ...attributes, ...listeners }}\n      />\n\n      {/* Content Area */}\n      <div className={cn(\n        'transition-all duration-200',\n        isCollapsed && 'h-0 overflow-hidden'\n      )}>\n        {renderSectionContent()}\n      </div>\n\n      {/* Bottom Bar */}\n      {!isCollapsed && (\n        <SectionBottomBar\n          section={section}\n          isQuestion={isQuestionType}\n          isRequired={isRequired}\n          buttonLabel={buttonLabel}\n          onRequiredChange={isQuestionType ? handleRequiredChange : undefined}\n          onButtonLabelChange={handleButtonLabelChange}\n          showButtonPreview={true}\n        />\n      )}\n\n      {/* Loading Overlay */}\n      {isSaving && (\n        <div className=\"absolute inset-0 bg-white bg-opacity-50 flex items-center justify-center z-10\">\n          <div className=\"flex items-center space-x-2 text-blue-600\">\n            <div className=\"w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\" />\n            <span className=\"text-sm font-medium\">Saving...</span>\n          </div>\n        </div>\n      )}\n    </Card>\n  )\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 11514, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/campaign-builder/enhanced-sortable-canvas.tsx"],"sourcesContent":["'use client'\n\nimport { useDroppable } from '@dnd-kit/core'\nimport { SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable'\nimport { CampaignSection } from '@/lib/types/campaign-builder'\nimport { SectionBlock } from './section-block'\nimport { cn } from '@/lib/utils'\nimport { Plus, Layout, MousePointer } from 'lucide-react'\n\ninterface EnhancedSortableCanvasProps {\n  sections: CampaignSection[]\n  onSectionUpdate: (sectionId: string, updates: Partial<CampaignSection>) => Promise<void>\n  onSectionDelete: (sectionId: string) => void\n  onSectionDuplicate: (sectionId: string) => void\n  onSectionConfigure?: (sectionId: string) => void\n  onSectionTypeChange?: (sectionId: string, newType: string) => void\n  className?: string\n  showCollapsedSections?: boolean\n}\n\nexport function EnhancedSortableCanvas({ \n  sections,\n  onSectionUpdate,\n  onSectionDelete,\n  onSectionDuplicate,\n  onSectionConfigure,\n  onSectionTypeChange,\n  className,\n  showCollapsedSections = true\n}: EnhancedSortableCanvasProps) {\n  const { isOver, setNodeRef } = useDroppable({\n    id: 'campaign-canvas',\n    data: {\n      type: 'canvas'\n    }\n  })\n\n  const isEmpty = sections.length === 0\n  const sectionIds = sections.map(section => section.id)\n\n  return (\n    <div\n      ref={setNodeRef}\n      className={cn(\n        'h-full rounded-lg transition-all duration-200',\n        isOver \n          ? 'bg-blue-50 border-2 border-blue-300 border-dashed' \n          : 'bg-gray-50 border-2 border-gray-200 border-dashed',\n        isEmpty && 'flex items-center justify-center',\n        className\n      )}\n    >\n      {isEmpty ? (\n        /* Empty State */\n        <div className=\"text-center p-8\">\n          <div className={cn(\n            'mx-auto w-16 h-16 rounded-full flex items-center justify-center mb-4 transition-colors',\n            isOver ? 'bg-blue-100' : 'bg-gray-100'\n          )}>\n            {isOver ? (\n              <Plus className=\"h-8 w-8 text-blue-600\" />\n            ) : (\n              <Layout className=\"h-8 w-8 text-gray-400\" />\n            )}\n          </div>\n          \n          <h3 className={cn(\n            'text-lg font-medium mb-2 transition-colors',\n            isOver ? 'text-blue-900' : 'text-gray-900'\n          )}>\n            {isOver ? 'Drop section here' : 'Start building your campaign'}\n          </h3>\n          \n          <p className={cn(\n            'text-sm max-w-md mx-auto transition-colors',\n            isOver ? 'text-blue-700' : 'text-gray-500'\n          )}>\n            {isOver \n              ? 'Release to add this section to your campaign'\n              : 'Drag sections from the left panel to begin creating your lead magnet campaign. Start with questions, add content, and finish with results.'\n            }\n          </p>\n          \n          {/* Visual drop indicators */}\n          {isOver && (\n            <div className=\"mt-6 flex justify-center space-x-2\">\n              {[...Array(3)].map((_, i) => (\n                <div\n                  key={i}\n                  className=\"w-2 h-2 bg-blue-400 rounded-full animate-bounce\"\n                  style={{\n                    animationDelay: `${i * 0.1}s`\n                  }}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      ) : (\n        /* Sections Display with Sortable Context */\n        <div className=\"p-6\">\n          <SortableContext items={sectionIds} strategy={verticalListSortingStrategy}>\n            <div className=\"space-y-4\">\n              {sections.map((section) => (\n                <SectionBlock\n                  key={section.id}\n                  section={section}\n                  onUpdate={onSectionUpdate}\n                  onDelete={onSectionDelete}\n                  onDuplicate={onSectionDuplicate}\n                  onConfigure={onSectionConfigure}\n                  onTypeChange={onSectionTypeChange}\n                  isCollapsible={showCollapsedSections}\n                />\n              ))}\n            </div>\n          </SortableContext>\n          \n          {/* Drop zone for adding more sections */}\n          {isOver && (\n            <div className=\"mt-4 border-2 border-blue-300 border-dashed rounded-lg p-6 bg-blue-50\">\n              <div className=\"text-center\">\n                <Plus className=\"h-6 w-6 text-blue-600 mx-auto mb-2\" />\n                <p className=\"text-sm text-blue-700 font-medium\">\n                  Drop here to add section\n                </p>\n              </div>\n            </div>\n          )}\n          \n          {/* Enhanced Instructions */}\n          {sections.length > 0 && !isOver && (\n            <div className=\"mt-6 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200\">\n              <div className=\"flex items-start space-x-3\">\n                <MousePointer className=\"h-5 w-5 text-blue-500 mt-0.5 flex-shrink-0\" />\n                <div className=\"text-sm text-blue-700\">\n                  <p className=\"font-medium mb-2\">Advanced Canvas Controls:</p>\n                  <ul className=\"space-y-1 text-xs\">\n                    <li>• <strong>Click section names</strong> to edit inline with auto-save</li>\n                    <li>• <strong>Switch section types</strong> using the dropdown in each section</li>\n                    <li>• <strong>Toggle Preview mode</strong> to see how sections look to users</li>\n                    <li>• <strong>Collapse sections</strong> to focus on specific areas</li>\n                    <li>• <strong>Set questions as required</strong> using the bottom bar toggle</li>\n                    <li>• <strong>Customize button labels</strong> for each section</li>\n                    <li>• <strong>Drag sections</strong> by the grip handle to reorder</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  )\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 11855, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/campaign-builder/campaign-preview.tsx"],"sourcesContent":["'use client'\n\nimport React, { useState, useCallback, useEffect, useRef } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { cn } from '@/lib/utils'\nimport { \n  Monitor, \n  Tablet, \n  Smartphone,\n  RotateCcw,\n  Maximize2,\n  Minimize2,\n  Eye,\n  RefreshCcw,\n  ExternalLink,\n  Settings,\n  Play,\n  Pause,\n  Square,\n  ChevronLeft,\n  ChevronRight\n} from 'lucide-react'\nimport { Campaign } from '@/lib/types/database'\nimport { CampaignSection } from '@/lib/types/campaign-builder'\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface CampaignPreviewProps {\n  campaign: Campaign\n  sections: CampaignSection[]\n  className?: string\n  enableDeviceToggle?: boolean\n  enableFullscreen?: boolean\n  onSectionChange?: (sectionIndex: number) => void\n}\n\nexport type PreviewDevice = 'desktop' | 'tablet' | 'mobile'\nexport type PreviewMode = 'sequence' | 'realtime' | 'interactive'\n\ninterface PreviewConfig {\n  device: PreviewDevice\n  mode: PreviewMode\n  showNavigation: boolean\n  autoAdvance: boolean\n  autoAdvanceDelay: number\n  bypassDisplayRules: boolean\n}\n\ninterface DeviceConfig {\n  name: string\n  icon: React.ComponentType<{ className?: string }>\n  width: number\n  height: number\n  maxWidth?: string\n  description: string\n}\n\n// =============================================================================\n// DEVICE CONFIGURATIONS\n// =============================================================================\n\nconst DEVICE_CONFIGS: Record<PreviewDevice, DeviceConfig> = {\n  desktop: {\n    name: 'Desktop',\n    icon: Monitor,\n    width: 1200,\n    height: 800,\n    maxWidth: '100%',\n    description: 'Full desktop experience'\n  },\n  tablet: {\n    name: 'Tablet',\n    icon: Tablet,\n    width: 768,\n    height: 1024,\n    maxWidth: '768px',\n    description: 'iPad and tablet devices'\n  },\n  mobile: {\n    name: 'Mobile',\n    icon: Smartphone,\n    width: 375,\n    height: 667,\n    maxWidth: '375px',\n    description: 'iPhone and mobile devices'\n  }\n}\n\n// =============================================================================\n// PREVIEW FRAME COMPONENT\n// =============================================================================\n\nfunction PreviewFrame({\n  src,\n  device,\n  isLoading,\n  onLoad,\n  onError\n}: {\n  src: string\n  device: PreviewDevice\n  isLoading: boolean\n  onLoad: () => void\n  onError: (error: string) => void\n}) {\n  const config = DEVICE_CONFIGS[device]\n  const iframeRef = useRef<HTMLIFrameElement>(null)\n\n  const frameStyles = {\n    width: device === 'desktop' ? '100%' : `${config.width}px`,\n    height: device === 'desktop' ? '600px' : `${config.height}px`,\n    maxWidth: config.maxWidth || '100%'\n  }\n\n  const handleIframeLoad = useCallback(() => {\n    onLoad()\n  }, [onLoad])\n\n  const handleIframeError = useCallback(() => {\n    onError('Failed to load preview')\n  }, [onError])\n\n  if (device === 'desktop') {\n    return (\n      <div className=\"w-full relative\">\n        <iframe\n          ref={iframeRef}\n          src={src}\n          className=\"w-full border rounded-lg shadow-sm\"\n          style={frameStyles}\n          onLoad={handleIframeLoad}\n          onError={handleIframeError}\n          title=\"Campaign Preview\"\n          sandbox=\"allow-scripts allow-same-origin allow-forms\"\n        />\n        {isLoading && (\n          <div className=\"absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center\">\n            <div className=\"flex items-center space-x-2\">\n              <RefreshCcw className=\"h-4 w-4 animate-spin\" />\n              <span className=\"text-sm text-gray-600\">Loading preview...</span>\n            </div>\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  // Mobile/Tablet frame with device appearance\n  return (\n    <div className=\"flex items-center justify-center p-4\">\n      <div\n        className={cn(\n          \"relative bg-gray-900 rounded-[2rem] p-2 shadow-2xl\",\n          device === 'mobile' && \"rounded-[2.5rem]\",\n          device === 'tablet' && \"rounded-[1.5rem]\"\n        )}\n        style={frameStyles}\n      >\n        {/* Device Screen */}\n        <div className={cn(\n          \"bg-white rounded-[1.5rem] w-full h-full overflow-hidden relative\",\n          device === 'mobile' && \"rounded-[2rem]\",\n          device === 'tablet' && \"rounded-[1rem]\"\n        )}>\n          {/* Status Bar (Mobile only) */}\n          {device === 'mobile' && (\n            <div className=\"h-6 bg-gray-50 flex items-center justify-between px-4 text-xs\">\n              <span className=\"font-medium\">9:41</span>\n              <div className=\"flex space-x-1\">\n                <div className=\"w-4 h-2 bg-gray-300 rounded-sm\"></div>\n                <div className=\"w-6 h-2 bg-green-500 rounded-sm\"></div>\n              </div>\n            </div>\n          )}\n          \n          {/* Content Area */}\n          <div className={cn(\n            \"w-full h-full overflow-hidden relative\",\n            device === 'mobile' && \"h-[calc(100%-1.5rem)]\"\n          )}>\n            <iframe\n              ref={iframeRef}\n              src={src}\n              className=\"w-full h-full border-0\"\n              onLoad={handleIframeLoad}\n              onError={handleIframeError}\n              title=\"Campaign Preview\"\n              sandbox=\"allow-scripts allow-same-origin allow-forms\"\n            />\n            \n            {isLoading && (\n              <div className=\"absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center\">\n                <div className=\"flex flex-col items-center space-y-2\">\n                  <RefreshCcw className=\"h-4 w-4 animate-spin\" />\n                  <span className=\"text-xs text-gray-600\">Loading...</span>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {/* Home Button (Mobile only) */}\n        {device === 'mobile' && (\n          <div className=\"absolute bottom-1 left-1/2 transform -translate-x-1/2 w-12 h-1 bg-gray-600 rounded-full\"></div>\n        )}\n      </div>\n    </div>\n  )\n}\n\n// =============================================================================\n// PREVIEW NAVIGATION COMPONENT\n// =============================================================================\n\nfunction PreviewNavigation({\n  currentSection,\n  totalSections,\n  isPlaying,\n  onPrevious,\n  onNext,\n  onPlay,\n  onPause,\n  onStop,\n  onSectionSelect\n}: {\n  currentSection: number\n  totalSections: number\n  isPlaying: boolean\n  onPrevious: () => void\n  onNext: () => void\n  onPlay: () => void\n  onPause: () => void\n  onStop: () => void\n  onSectionSelect: (index: number) => void\n}) {\n  return (\n    <div className=\"flex items-center justify-between p-3 bg-gray-50 border-b\">\n      <div className=\"flex items-center space-x-2\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={onPrevious}\n          disabled={currentSection <= 0}\n        >\n          <ChevronLeft className=\"h-4 w-4\" />\n        </Button>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={isPlaying ? onPause : onPlay}\n          >\n            {isPlaying ? (\n              <Pause className=\"h-4 w-4\" />\n            ) : (\n              <Play className=\"h-4 w-4\" />\n            )}\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={onStop}\n          >\n            <Square className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        \n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={onNext}\n          disabled={currentSection >= totalSections - 1}\n        >\n          <ChevronRight className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      <div className=\"flex items-center space-x-2\">\n        <Badge variant=\"outline\" className=\"text-xs\">\n          Section {currentSection + 1} of {totalSections}\n        </Badge>\n        \n        <select\n          value={currentSection}\n          onChange={(e) => onSectionSelect(parseInt(e.target.value))}\n          className=\"text-xs border rounded px-2 py-1\"\n        >\n          {Array.from({ length: totalSections }, (_, i) => (\n            <option key={i} value={i}>\n              Section {i + 1}\n            </option>\n          ))}\n        </select>\n      </div>\n    </div>\n  )\n}\n\n// =============================================================================\n// MAIN COMPONENT\n// =============================================================================\n\nexport function CampaignPreview({\n  campaign,\n  sections,\n  className,\n  enableDeviceToggle = true,\n  enableFullscreen = true,\n  onSectionChange\n}: CampaignPreviewProps) {\n  const [config, setConfig] = useState<PreviewConfig>({\n    device: 'desktop',\n    mode: 'sequence',\n    showNavigation: true,\n    autoAdvance: false,\n    autoAdvanceDelay: 3000,\n    bypassDisplayRules: true\n  })\n  \n  const [currentSection, setCurrentSection] = useState(0)\n  const [isFullscreen, setIsFullscreen] = useState(false)\n  const [isLoading, setIsLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [isPlaying, setIsPlaying] = useState(false)\n  const autoAdvanceRef = useRef<NodeJS.Timeout | null>(null)\n\n  // Generate preview URL for iframe\n  const previewUrl = `/campaigns/${campaign.id}/preview?section=${currentSection}&mode=${config.mode}&device=${config.device}&bypass=${config.bypassDisplayRules}`\n\n  // =============================================================================\n  // NAVIGATION HANDLERS\n  // =============================================================================\n\n  const handlePrevious = useCallback(() => {\n    const newIndex = Math.max(0, currentSection - 1)\n    setCurrentSection(newIndex)\n    onSectionChange?.(newIndex)\n  }, [currentSection, onSectionChange])\n\n  const handleNext = useCallback(() => {\n    const newIndex = Math.min(sections.length - 1, currentSection + 1)\n    setCurrentSection(newIndex)\n    onSectionChange?.(newIndex)\n  }, [currentSection, sections.length, onSectionChange])\n\n  const handleSectionSelect = useCallback((index: number) => {\n    setCurrentSection(index)\n    onSectionChange?.(index)\n  }, [onSectionChange])\n\n  const handlePlay = useCallback(() => {\n    setIsPlaying(true)\n    if (config.autoAdvance) {\n      autoAdvanceRef.current = setInterval(() => {\n        setCurrentSection(prev => {\n          const next = prev + 1\n          if (next >= sections.length) {\n            setIsPlaying(false)\n            return 0 // Loop back to start\n          }\n          return next\n        })\n      }, config.autoAdvanceDelay)\n    }\n  }, [config.autoAdvance, config.autoAdvanceDelay, sections.length])\n\n  const handlePause = useCallback(() => {\n    setIsPlaying(false)\n    if (autoAdvanceRef.current) {\n      clearInterval(autoAdvanceRef.current)\n      autoAdvanceRef.current = null\n    }\n  }, [])\n\n  const handleStop = useCallback(() => {\n    setIsPlaying(false)\n    setCurrentSection(0)\n    if (autoAdvanceRef.current) {\n      clearInterval(autoAdvanceRef.current)\n      autoAdvanceRef.current = null\n    }\n  }, [])\n\n  // =============================================================================\n  // CONFIG HANDLERS\n  // =============================================================================\n\n  const handleDeviceChange = (device: PreviewDevice) => {\n    setConfig(prev => ({ ...prev, device }))\n    setIsLoading(true)\n  }\n\n  const handleRefresh = () => {\n    setIsLoading(true)\n    setError(null)\n  }\n\n  const handleFullscreenToggle = () => {\n    setIsFullscreen(!isFullscreen)\n  }\n\n  const handleExternalPreview = () => {\n    window.open(previewUrl, '_blank', 'noopener,noreferrer')\n  }\n\n  // =============================================================================\n  // EFFECTS\n  // =============================================================================\n\n  useEffect(() => {\n    return () => {\n      if (autoAdvanceRef.current) {\n        clearInterval(autoAdvanceRef.current)\n      }\n    }\n  }, [])\n\n  // =============================================================================\n  // RENDER CONTROLS\n  // =============================================================================\n\n  const renderControls = () => (\n    <div className=\"flex items-center justify-between p-3 bg-gray-50 border-b\">\n      <div className=\"flex items-center space-x-2\">\n        <Eye className=\"h-4 w-4 text-gray-500\" />\n        <span className=\"text-sm font-medium text-gray-700\">Campaign Preview</span>\n        <Badge variant=\"outline\" className=\"text-xs\">\n          {DEVICE_CONFIGS[config.device].name}\n        </Badge>\n        {config.bypassDisplayRules && (\n          <Badge variant=\"secondary\" className=\"text-xs\">\n            All Sections\n          </Badge>\n        )}\n      </div>\n\n      <div className=\"flex items-center space-x-2\">\n        {/* Device Toggle */}\n        {enableDeviceToggle && (\n          <div className=\"flex border rounded-lg overflow-hidden\">\n            {Object.entries(DEVICE_CONFIGS).map(([key, deviceConfig]) => {\n              const IconComponent = deviceConfig.icon\n              return (\n                <Button\n                  key={key}\n                  variant={config.device === key ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => handleDeviceChange(key as PreviewDevice)}\n                  className=\"h-8 px-3 rounded-none border-0\"\n                  title={deviceConfig.description}\n                >\n                  <IconComponent className=\"h-3 w-3\" />\n                </Button>\n              )\n            })}\n          </div>\n        )}\n\n        {/* Control Buttons */}\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={handleRefresh}\n          title=\"Refresh preview\"\n        >\n          <RefreshCcw className=\"h-3 w-3\" />\n        </Button>\n        \n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={handleExternalPreview}\n          title=\"Open in new window\"\n        >\n          <ExternalLink className=\"h-3 w-3\" />\n        </Button>\n\n        {enableFullscreen && (\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleFullscreenToggle}\n            title={isFullscreen ? 'Exit fullscreen' : 'Enter fullscreen'}\n          >\n            {isFullscreen ? (\n              <Minimize2 className=\"h-3 w-3\" />\n            ) : (\n              <Maximize2 className=\"h-3 w-3\" />\n            )}\n          </Button>\n        )}\n      </div>\n    </div>\n  )\n\n  // =============================================================================\n  // MAIN RENDER\n  // =============================================================================\n\n  if (isFullscreen) {\n    return (\n      <div className=\"fixed inset-0 z-50 bg-white\">\n        <div className=\"h-full flex flex-col\">\n          {renderControls()}\n          \n          {config.showNavigation && (\n            <PreviewNavigation\n              currentSection={currentSection}\n              totalSections={sections.length}\n              isPlaying={isPlaying}\n              onPrevious={handlePrevious}\n              onNext={handleNext}\n              onPlay={handlePlay}\n              onPause={handlePause}\n              onStop={handleStop}\n              onSectionSelect={handleSectionSelect}\n            />\n          )}\n          \n          <div className=\"flex-1 overflow-auto bg-gray-100\">\n            <PreviewFrame\n              src={previewUrl}\n              device={config.device}\n              isLoading={isLoading}\n              onLoad={() => setIsLoading(false)}\n              onError={setError}\n            />\n          </div>\n          \n          {error && (\n            <div className=\"p-3 bg-red-50 border-t border-red-200\">\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-red-800\">{error}</span>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleRefresh}\n                >\n                  Retry\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <Card className={cn(\"overflow-hidden\", className)}>\n      {renderControls()}\n      \n      {config.showNavigation && (\n        <PreviewNavigation\n          currentSection={currentSection}\n          totalSections={sections.length}\n          isPlaying={isPlaying}\n          onPrevious={handlePrevious}\n          onNext={handleNext}\n          onPlay={handlePlay}\n          onPause={handlePause}\n          onStop={handleStop}\n          onSectionSelect={handleSectionSelect}\n        />\n      )}\n      \n      <CardContent className=\"p-0 bg-gray-100\">\n        <PreviewFrame\n          src={previewUrl}\n          device={config.device}\n          isLoading={isLoading}\n          onLoad={() => setIsLoading(false)}\n          onError={setError}\n        />\n      </CardContent>\n      \n      {error && (\n        <div className=\"p-3 bg-red-50 border-t border-red-200\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-red-800\">{error}</span>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleRefresh}\n            >\n              Retry\n            </Button>\n          </div>\n        </div>\n      )}\n    </Card>\n  )\n}\n\nexport default CampaignPreview "],"names":[],"mappings":"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","debugId":null}}]
}