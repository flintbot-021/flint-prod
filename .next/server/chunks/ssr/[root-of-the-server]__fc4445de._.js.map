{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/auth.ts"],"sourcesContent":["import { createBrowserClient } from '@supabase/ssr'\n\nexport function createClient() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  )\n}\n\nexport type AuthResult = {\n  success: boolean\n  error?: string\n  message?: string\n}\n\n/**\n * Sign up a new user with email and password using PKCE flow\n */\nexport async function signUp(email: string, password: string): Promise<AuthResult> {\n  const supabase = createClient()\n  \n  const { error } = await supabase.auth.signUp({\n    email,\n    password,\n    options: {\n      emailRedirectTo: `${window.location.origin}/auth/callback`,\n    },\n  })\n\n  if (error) {\n    return {\n      success: false,\n      error: error.message,\n    }\n  }\n\n  return {\n    success: true,\n    message: 'Check your email for a confirmation link to complete your signup.',\n  }\n}\n\n/**\n * Sign in a user with email and password using PKCE flow\n */\nexport async function signIn(email: string, password: string): Promise<AuthResult> {\n  const supabase = createClient()\n  \n  const { error } = await supabase.auth.signInWithPassword({\n    email,\n    password,\n  })\n\n  if (error) {\n    return {\n      success: false,\n      error: error.message,\n    }\n  }\n\n  return {\n    success: true,\n    message: 'Successfully signed in!',\n  }\n}\n\n/**\n * Sign out the current user\n */\nexport async function signOut(): Promise<AuthResult> {\n  const supabase = createClient()\n  \n  const { error } = await supabase.auth.signOut()\n\n  if (error) {\n    return {\n      success: false,\n      error: error.message,\n    }\n  }\n\n  return {\n    success: true,\n    message: 'Successfully signed out!',\n  }\n}\n\n/**\n * Reset password for a user\n */\nexport async function resetPassword(email: string): Promise<AuthResult> {\n  const supabase = createClient()\n  \n  const { error } = await supabase.auth.resetPasswordForEmail(email, {\n    redirectTo: `${window.location.origin}/auth/callback?next=/auth/update-password`,\n  })\n\n  if (error) {\n    return {\n      success: false,\n      error: error.message,\n    }\n  }\n\n  return {\n    success: true,\n    message: 'Check your email for a password reset link.',\n  }\n}\n\n/**\n * Update password for authenticated user\n */\nexport async function updatePassword(password: string): Promise<AuthResult> {\n  const supabase = createClient()\n  \n  const { error } = await supabase.auth.updateUser({\n    password,\n  })\n\n  if (error) {\n    return {\n      success: false,\n      error: error.message,\n    }\n  }\n\n  return {\n    success: true,\n    message: 'Password updated successfully!',\n  }\n}\n\n/**\n * Sign in with Google OAuth using PKCE flow\n */\nexport async function signInWithGoogle(): Promise<AuthResult> {\n  const supabase = createClient()\n  \n  const { error } = await supabase.auth.signInWithOAuth({\n    provider: 'google',\n    options: {\n      redirectTo: `${window.location.origin}/auth/callback`,\n    },\n  })\n\n  if (error) {\n    return {\n      success: false,\n      error: error.message,\n    }\n  }\n\n  return {\n    success: true,\n    message: 'Redirecting to Google...',\n  }\n}\n\n/**\n * Sign in with GitHub OAuth using PKCE flow\n */\nexport async function signInWithGitHub(): Promise<AuthResult> {\n  const supabase = createClient()\n  \n  const { error } = await supabase.auth.signInWithOAuth({\n    provider: 'github',\n    options: {\n      redirectTo: `${window.location.origin}/auth/callback`,\n    },\n  })\n\n  if (error) {\n    return {\n      success: false,\n      error: error.message,\n    }\n  }\n\n  return {\n    success: true,\n    message: 'Redirecting to GitHub...',\n  }\n} "],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;;AAEO,SAAS;IACd,OAAO,CAAA,GAAA,0KAAA,CAAA,sBAAmB,AAAD;AAI3B;AAWO,eAAe,OAAO,KAAa,EAAE,QAAgB;IAC1D,MAAM,WAAW;IAEjB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,MAAM,CAAC;QAC3C;QACA;QACA,SAAS;YACP,iBAAiB,GAAG,OAAO,QAAQ,CAAC,MAAM,CAAC,cAAc,CAAC;QAC5D;IACF;IAEA,IAAI,OAAO;QACT,OAAO;YACL,SAAS;YACT,OAAO,MAAM,OAAO;QACtB;IACF;IAEA,OAAO;QACL,SAAS;QACT,SAAS;IACX;AACF;AAKO,eAAe,OAAO,KAAa,EAAE,QAAgB;IAC1D,MAAM,WAAW;IAEjB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,kBAAkB,CAAC;QACvD;QACA;IACF;IAEA,IAAI,OAAO;QACT,OAAO;YACL,SAAS;YACT,OAAO,MAAM,OAAO;QACtB;IACF;IAEA,OAAO;QACL,SAAS;QACT,SAAS;IACX;AACF;AAKO,eAAe;IACpB,MAAM,WAAW;IAEjB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;IAE7C,IAAI,OAAO;QACT,OAAO;YACL,SAAS;YACT,OAAO,MAAM,OAAO;QACtB;IACF;IAEA,OAAO;QACL,SAAS;QACT,SAAS;IACX;AACF;AAKO,eAAe,cAAc,KAAa;IAC/C,MAAM,WAAW;IAEjB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,qBAAqB,CAAC,OAAO;QACjE,YAAY,GAAG,OAAO,QAAQ,CAAC,MAAM,CAAC,yCAAyC,CAAC;IAClF;IAEA,IAAI,OAAO;QACT,OAAO;YACL,SAAS;YACT,OAAO,MAAM,OAAO;QACtB;IACF;IAEA,OAAO;QACL,SAAS;QACT,SAAS;IACX;AACF;AAKO,eAAe,eAAe,QAAgB;IACnD,MAAM,WAAW;IAEjB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,UAAU,CAAC;QAC/C;IACF;IAEA,IAAI,OAAO;QACT,OAAO;YACL,SAAS;YACT,OAAO,MAAM,OAAO;QACtB;IACF;IAEA,OAAO;QACL,SAAS;QACT,SAAS;IACX;AACF;AAKO,eAAe;IACpB,MAAM,WAAW;IAEjB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,eAAe,CAAC;QACpD,UAAU;QACV,SAAS;YACP,YAAY,GAAG,OAAO,QAAQ,CAAC,MAAM,CAAC,cAAc,CAAC;QACvD;IACF;IAEA,IAAI,OAAO;QACT,OAAO;YACL,SAAS;YACT,OAAO,MAAM,OAAO;QACtB;IACF;IAEA,OAAO;QACL,SAAS;QACT,SAAS;IACX;AACF;AAKO,eAAe;IACpB,MAAM,WAAW;IAEjB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,eAAe,CAAC;QACpD,UAAU;QACV,SAAS;YACP,YAAY,GAAG,OAAO,QAAQ,CAAC,MAAM,CAAC,cAAc,CAAC;QACvD;IACF;IAEA,IAAI,OAAO;QACT,OAAO;YACL,SAAS;YACT,OAAO,MAAM,OAAO;QACtB;IACF;IAEA,OAAO;QACL,SAAS;QACT,SAAS;IACX;AACF","debugId":null}},
    {"offset": {"line": 206, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/auth-context.tsx"],"sourcesContent":["'use client'\n\nimport { createContext, useContext, useEffect, useState } from 'react'\nimport { createClient } from './auth'\nimport type { User } from '@supabase/supabase-js'\n\ninterface AuthContextType {\n  user: User | null\n  loading: boolean\n  signOut: () => Promise<void>\n  refreshUser: () => Promise<void>\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true)\n  const supabase = createClient()\n\n  const refreshUser = async () => {\n    try {\n      const { data: { user }, error } = await supabase.auth.getUser()\n      if (error) {\n        console.error('Error fetching user:', error)\n        setUser(null)\n      } else {\n        setUser(user)\n      }\n    } catch (error) {\n      console.error('Error in refreshUser:', error)\n      setUser(null)\n    }\n  }\n\n  const signOut = async () => {\n    try {\n      const { error } = await supabase.auth.signOut()\n      if (error) {\n        console.error('Error signing out:', error)\n      }\n      setUser(null)\n    } catch (error) {\n      console.error('Error in signOut:', error)\n    }\n  }\n\n  useEffect(() => {\n    // Get initial session\n    const initializeAuth = async () => {\n      await refreshUser()\n      setLoading(false)\n    }\n\n    initializeAuth()\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        console.log('Auth state changed:', event, session?.user?.email)\n        \n        if (session?.user) {\n          setUser(session.user)\n        } else {\n          setUser(null)\n        }\n        \n        setLoading(false)\n      }\n    )\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [supabase.auth])\n\n  const value = {\n    user,\n    loading,\n    signOut,\n    refreshUser,\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n} "],"names":[],"mappings":";;;;;AAEA;AACA;AAHA;;;;AAaA,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,SAAS,aAAa,EAAE,QAAQ,EAAiC;IACtE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe;IAC9C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,WAAW,CAAA,GAAA,2GAAA,CAAA,eAAY,AAAD;IAE5B,MAAM,cAAc;QAClB,IAAI;YACF,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;YAC7D,IAAI,OAAO;gBACT,QAAQ,KAAK,CAAC,wBAAwB;gBACtC,QAAQ;YACV,OAAO;gBACL,QAAQ;YACV;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,yBAAyB;YACvC,QAAQ;QACV;IACF;IAEA,MAAM,UAAU;QACd,IAAI;YACF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;YAC7C,IAAI,OAAO;gBACT,QAAQ,KAAK,CAAC,sBAAsB;YACtC;YACA,QAAQ;QACV,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,qBAAqB;QACrC;IACF;IAEA,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,sBAAsB;QACtB,MAAM,iBAAiB;YACrB,MAAM;YACN,WAAW;QACb;QAEA;QAEA,0BAA0B;QAC1B,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,EAAE,GAAG,SAAS,IAAI,CAAC,iBAAiB,CAChE,OAAO,OAAO;YACZ,QAAQ,GAAG,CAAC,uBAAuB,OAAO,SAAS,MAAM;YAEzD,IAAI,SAAS,MAAM;gBACjB,QAAQ,QAAQ,IAAI;YACtB,OAAO;gBACL,QAAQ;YACV;YAEA,WAAW;QACb;QAGF,OAAO;YACL,aAAa,WAAW;QAC1B;IACF,GAAG;QAAC,SAAS,IAAI;KAAC;IAElB,MAAM,QAAQ;QACZ;QACA;QACA;QACA;IACF;IAEA,qBACE,8OAAC,YAAY,QAAQ;QAAC,OAAO;kBAC1B;;;;;;AAGP;AAEO,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}}]
}