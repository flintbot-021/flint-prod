{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/app/auth/callback/route.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr'\nimport { NextRequest, NextResponse } from 'next/server'\nimport { cookies } from 'next/headers'\n\nexport async function GET(request: NextRequest) {\n  const { searchParams, origin } = new URL(request.url)\n  const code = searchParams.get('code')\n  // if \"next\" is in param, use it as the redirect URL\n  const next = searchParams.get('next') ?? '/'\n\n  if (code) {\n    const cookieStore = await cookies()\n    const supabase = createServerClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n      {\n        cookies: {\n          get(name: string) {\n            return cookieStore.get(name)?.value\n          },\n          set(name: string, value: string, options: any) {\n            cookieStore.set({ name, value, ...options })\n          },\n          remove(name: string, options: any) {\n            cookieStore.set({ name, value: '', ...options })\n          },\n        },\n      }\n    )\n\n    const { error } = await supabase.auth.exchangeCodeForSession(code)\n    if (!error) {\n      const forwardedHost = request.headers.get('x-forwarded-host') // original origin before load balancer\n      const isLocalEnv = process.env.NODE_ENV === 'development'\n      if (isLocalEnv) {\n        // we can be sure that there is no load balancer in between, so no need to watch for X-Forwarded-Host\n        return NextResponse.redirect(`${origin}${next}`)\n      } else if (forwardedHost) {\n        return NextResponse.redirect(`https://${forwardedHost}${next}`)\n      } else {\n        return NextResponse.redirect(`${origin}${next}`)\n      }\n    }\n  }\n\n  // return the user to an error page with instructions\n  return NextResponse.redirect(`${origin}/auth/auth-code-error`)\n} "],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IACpD,MAAM,OAAO,aAAa,GAAG,CAAC;IAC9B,oDAAoD;IACpD,MAAM,OAAO,aAAa,GAAG,CAAC,WAAW;IAEzC,IAAI,MAAM;QACR,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;QAChC,MAAM,WAAW,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,6PAGhC;YACE,SAAS;gBACP,KAAI,IAAY;oBACd,OAAO,YAAY,GAAG,CAAC,OAAO;gBAChC;gBACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAY;oBAC3C,YAAY,GAAG,CAAC;wBAAE;wBAAM;wBAAO,GAAG,OAAO;oBAAC;gBAC5C;gBACA,QAAO,IAAY,EAAE,OAAY;oBAC/B,YAAY,GAAG,CAAC;wBAAE;wBAAM,OAAO;wBAAI,GAAG,OAAO;oBAAC;gBAChD;YACF;QACF;QAGF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,sBAAsB,CAAC;QAC7D,IAAI,CAAC,OAAO;YACV,MAAM,gBAAgB,QAAQ,OAAO,CAAC,GAAG,CAAC,oBAAoB,uCAAuC;;YACrG,MAAM,aAAa,oDAAyB;YAC5C,wCAAgB;gBACd,qGAAqG;gBACrG,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,GAAG,SAAS,MAAM;YACjD,OAAO;;YAIP;QACF;IACF;IAEA,qDAAqD;IACrD,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,GAAG,OAAO,qBAAqB,CAAC;AAC/D","debugId":null}}]
}