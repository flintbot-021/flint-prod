{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr'\nimport { NextResponse, type NextRequest } from 'next/server'\n\nexport async function middleware(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  })\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return request.cookies.get(name)?.value\n        },\n        set(name: string, value: string, options: any) {\n          request.cookies.set({\n            name,\n            value,\n            ...options,\n          })\n          supabaseResponse = NextResponse.next({\n            request: {\n              headers: request.headers,\n            },\n          })\n          supabaseResponse.cookies.set({\n            name,\n            value,\n            ...options,\n          })\n        },\n        remove(name: string, options: any) {\n          request.cookies.set({\n            name,\n            value: '',\n            ...options,\n          })\n          supabaseResponse = NextResponse.next({\n            request: {\n              headers: request.headers,\n            },\n          })\n          supabaseResponse.cookies.set({\n            name,\n            value: '',\n            ...options,\n          })\n        },\n      },\n    }\n  )\n\n  // Get the current session\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  const url = request.nextUrl.clone()\n\n  // Define protected routes that require authentication\n  const protectedRoutes = ['/dashboard', '/campaigns', '/leads', '/settings']\n  \n  // Define auth routes that should redirect authenticated users\n  const authRoutes = ['/auth/login', '/auth/signup']\n\n  // Check if current path is a protected route\n  const isProtectedRoute = protectedRoutes.some(route => \n    url.pathname.startsWith(route)\n  )\n\n  // Check if current path is an auth route\n  const isAuthRoute = authRoutes.some(route => \n    url.pathname.startsWith(route)\n  )\n\n  // If user is not authenticated and trying to access protected route\n  if (!user && isProtectedRoute) {\n    const redirectUrl = new URL('/auth/login', request.url)\n    redirectUrl.searchParams.set('redirectedFrom', request.nextUrl.pathname)\n    return NextResponse.redirect(redirectUrl)\n  }\n\n  // If user is authenticated and trying to access auth routes\n  if (user && isAuthRoute) {\n    return NextResponse.redirect(new URL('/dashboard', request.url))\n  }\n\n  return supabaseResponse\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public folder\n     */\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n}\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AAAA;;;AAEO,eAAe,WAAW,OAAoB;IACnD,IAAI,mBAAmB,6LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACvC;IACF;IAEA,MAAM,WAAW,CAAA,GAAA,iLAAA,CAAA,qBAAkB,AAAD,6PAGhC;QACE,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,QAAQ,OAAO,CAAC,GAAG,CAAC,OAAO;YACpC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAY;gBAC3C,QAAQ,OAAO,CAAC,GAAG,CAAC;oBAClB;oBACA;oBACA,GAAG,OAAO;gBACZ;gBACA,mBAAmB,6LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBACnC,SAAS;wBACP,SAAS,QAAQ,OAAO;oBAC1B;gBACF;gBACA,iBAAiB,OAAO,CAAC,GAAG,CAAC;oBAC3B;oBACA;oBACA,GAAG,OAAO;gBACZ;YACF;YACA,QAAO,IAAY,EAAE,OAAY;gBAC/B,QAAQ,OAAO,CAAC,GAAG,CAAC;oBAClB;oBACA,OAAO;oBACP,GAAG,OAAO;gBACZ;gBACA,mBAAmB,6LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBACnC,SAAS;wBACP,SAAS,QAAQ,OAAO;oBAC1B;gBACF;gBACA,iBAAiB,OAAO,CAAC,GAAG,CAAC;oBAC3B;oBACA,OAAO;oBACP,GAAG,OAAO;gBACZ;YACF;QACF;IACF;IAGF,0BAA0B;IAC1B,MAAM,EACJ,MAAM,EAAE,IAAI,EAAE,EACf,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;IAE/B,MAAM,MAAM,QAAQ,OAAO,CAAC,KAAK;IAEjC,sDAAsD;IACtD,MAAM,kBAAkB;QAAC;QAAc;QAAc;QAAU;KAAY;IAE3E,8DAA8D;IAC9D,MAAM,aAAa;QAAC;QAAe;KAAe;IAElD,6CAA6C;IAC7C,MAAM,mBAAmB,gBAAgB,IAAI,CAAC,CAAA,QAC5C,IAAI,QAAQ,CAAC,UAAU,CAAC;IAG1B,yCAAyC;IACzC,MAAM,cAAc,WAAW,IAAI,CAAC,CAAA,QAClC,IAAI,QAAQ,CAAC,UAAU,CAAC;IAG1B,oEAAoE;IACpE,IAAI,CAAC,QAAQ,kBAAkB;QAC7B,MAAM,cAAc,IAAI,IAAI,eAAe,QAAQ,GAAG;QACtD,YAAY,YAAY,CAAC,GAAG,CAAC,kBAAkB,QAAQ,OAAO,CAAC,QAAQ;QACvE,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,4DAA4D;IAC5D,IAAI,QAAQ,aAAa;QACvB,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;IAChE;IAEA,OAAO;AACT;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}}]
}