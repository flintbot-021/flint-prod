{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n// This check can be removed, it is just for tutorial purposes\nexport const hasEnvVars =\n  process.env.NEXT_PUBLIC_SUPABASE_URL &&\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n"],"names":[],"mappings":";;;;AASE;AATF;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAGO,MAAM,aACX","debugId":null}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,ySACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className,\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,yDACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EAAE,6CAA6C;QAC1D,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,2WACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAGA;AAEA;AALA;;;;AAOA,SAAS,MAAM,EACb,SAAS,EACT,GAAG,OAC8C;IACjD,qBACE,6LAAC,oKAAA,CAAA,OAAmB;QAClB,aAAU;QACV,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,uNACA;QAED,GAAG,KAAK;;;;;;AAGf;KAdS","debugId":null}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/ui/textarea.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Textarea }\n"],"names":[],"mappings":";;;;AAEA;;;AAEA,SAAS,SAAS,EAAE,SAAS,EAAE,GAAG,OAAyC;IACzE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,ucACA;QAED,GAAG,KAAK;;;;;;AAGf;KAXS","debugId":null}},
    {"offset": {"line": 300, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB,kZACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,SAAS,MAAM,EACb,SAAS,EACT,OAAO,EACP,UAAU,KAAK,EACf,GAAG,OAEuD;IAC1D,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAE9B,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAGf;KAhBS","debugId":null}},
    {"offset": {"line": 352, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/components/ui/user-profile.tsx"],"sourcesContent":["'use client'\n\nimport { useState } from 'react'\nimport { User, Settings, LogOut, Mail, Calendar, Shield } from 'lucide-react'\nimport { Button } from './button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './card'\nimport { Badge } from './badge'\nimport { useAuth } from '@/lib/auth-context'\nimport type { User as SupabaseUser } from '@supabase/supabase-js'\n\ninterface UserProfileProps {\n  user?: SupabaseUser | null\n  showActions?: boolean\n  variant?: 'card' | 'compact' | 'full'\n}\n\nexport function UserProfile({ \n  user: propUser, \n  showActions = true, \n  variant = 'card' \n}: UserProfileProps) {\n  const { user: contextUser, signOut } = useAuth()\n  const user = propUser || contextUser\n  const [loading, setLoading] = useState(false)\n\n  if (!user) {\n    return null\n  }\n\n  const handleSignOut = async () => {\n    setLoading(true)\n    try {\n      await signOut()\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const getInitials = (email: string) => {\n    return email\n      .split('@')[0]\n      .split('.')\n      .map(part => part.charAt(0).toUpperCase())\n      .slice(0, 2)\n      .join('')\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    })\n  }\n\n  if (variant === 'compact') {\n    return (\n      <div className=\"flex items-center space-x-3\">\n        <div className=\"flex-shrink-0\">\n          <div className=\"h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center\">\n            <span className=\"text-sm font-medium text-blue-600\">\n              {getInitials(user.email || '')}\n            </span>\n          </div>\n        </div>\n        <div className=\"min-w-0 flex-1\">\n          <p className=\"text-sm font-medium text-gray-900 truncate\">\n            {user.email}\n          </p>\n          <p className=\"text-xs text-gray-500\">\n            {user.email_confirmed_at ? 'Verified' : 'Unverified'}\n          </p>\n        </div>\n        {showActions && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleSignOut}\n            disabled={loading}\n          >\n            <LogOut className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </div>\n    )\n  }\n\n  return (\n    <Card className={variant === 'full' ? 'w-full' : 'w-full max-w-md'}>\n      <CardHeader className=\"text-center\">\n        <div className=\"mx-auto mb-4\">\n          <div className=\"h-16 w-16 rounded-full bg-blue-100 flex items-center justify-center\">\n            <span className=\"text-xl font-semibold text-blue-600\">\n              {getInitials(user.email || '')}\n            </span>\n          </div>\n        </div>\n        <CardTitle className=\"text-lg\">{user.email}</CardTitle>\n        <CardDescription>\n          <div className=\"flex items-center justify-center space-x-2\">\n            <Badge variant={user.email_confirmed_at ? 'default' : 'secondary'}>\n              {user.email_confirmed_at ? 'Verified' : 'Unverified'}\n            </Badge>\n            {user.app_metadata?.provider && (\n              <Badge variant=\"outline\">\n                {user.app_metadata.provider}\n              </Badge>\n            )}\n          </div>\n        </CardDescription>\n      </CardHeader>\n      \n      {variant === 'full' && (\n        <CardContent className=\"space-y-4\">\n          {/* User Details */}\n          <div className=\"grid grid-cols-1 gap-4 text-sm\">\n            <div className=\"flex items-center space-x-3\">\n              <Mail className=\"h-4 w-4 text-gray-400\" />\n              <div>\n                <p className=\"font-medium\">Email</p>\n                <p className=\"text-gray-600\">{user.email}</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <User className=\"h-4 w-4 text-gray-400\" />\n              <div>\n                <p className=\"font-medium\">User ID</p>\n                <p className=\"text-gray-600 font-mono text-xs\">{user.id}</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <Calendar className=\"h-4 w-4 text-gray-400\" />\n              <div>\n                <p className=\"font-medium\">Member Since</p>\n                <p className=\"text-gray-600\">\n                  {user.created_at ? formatDate(user.created_at) : 'Unknown'}\n                </p>\n              </div>\n            </div>\n            \n            {user.last_sign_in_at && (\n              <div className=\"flex items-center space-x-3\">\n                <Shield className=\"h-4 w-4 text-gray-400\" />\n                <div>\n                  <p className=\"font-medium\">Last Sign In</p>\n                  <p className=\"text-gray-600\">\n                    {formatDate(user.last_sign_in_at)}\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Authentication Provider Info */}\n          {user.app_metadata && Object.keys(user.app_metadata).length > 0 && (\n            <div className=\"border-t pt-4\">\n              <h4 className=\"font-medium text-sm mb-2\">Authentication Details</h4>\n              <div className=\"space-y-2 text-xs\">\n                {user.app_metadata.provider && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Provider:</span>\n                    <span className=\"font-medium\">{user.app_metadata.provider}</span>\n                  </div>\n                )}\n                {user.role && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Role:</span>\n                    <span className=\"font-medium\">{user.role}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      )}\n      \n      {showActions && (\n        <CardContent className={variant === 'full' ? 'pt-0' : ''}>\n          <div className=\"flex space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"flex-1\"\n              disabled\n            >\n              <Settings className=\"h-4 w-4 mr-2\" />\n              Settings\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleSignOut}\n              disabled={loading}\n              className=\"flex-1\"\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              Sign Out\n            </Button>\n          </div>\n        </CardContent>\n      )}\n    </Card>\n  )\n} "],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;AAPA;;;;;;;AAgBO,SAAS,YAAY,EAC1B,MAAM,QAAQ,EACd,cAAc,IAAI,EAClB,UAAU,MAAM,EACC;;IACjB,MAAM,EAAE,MAAM,WAAW,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,0HAAA,CAAA,UAAO,AAAD;IAC7C,MAAM,OAAO,YAAY;IACzB,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,IAAI,CAAC,MAAM;QACT,OAAO;IACT;IAEA,MAAM,gBAAgB;QACpB,WAAW;QACX,IAAI;YACF,MAAM;QACR,SAAU;YACR,WAAW;QACb;IACF;IAEA,MAAM,cAAc,CAAC;QACnB,OAAO,MACJ,KAAK,CAAC,IAAI,CAAC,EAAE,CACb,KAAK,CAAC,KACN,GAAG,CAAC,CAAA,OAAQ,KAAK,MAAM,CAAC,GAAG,WAAW,IACtC,KAAK,CAAC,GAAG,GACT,IAAI,CAAC;IACV;IAEA,MAAM,aAAa,CAAC;QAClB,OAAO,IAAI,KAAK,YAAY,kBAAkB,CAAC,SAAS;YACtD,MAAM;YACN,OAAO;YACP,KAAK;QACP;IACF;IAEA,IAAI,YAAY,WAAW;QACzB,qBACE,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAK,WAAU;sCACb,YAAY,KAAK,KAAK,IAAI;;;;;;;;;;;;;;;;8BAIjC,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAE,WAAU;sCACV,KAAK,KAAK;;;;;;sCAEb,6LAAC;4BAAE,WAAU;sCACV,KAAK,kBAAkB,GAAG,aAAa;;;;;;;;;;;;gBAG3C,6BACC,6LAAC,8HAAA,CAAA,SAAM;oBACL,SAAQ;oBACR,MAAK;oBACL,SAAS;oBACT,UAAU;8BAEV,cAAA,6LAAC,6MAAA,CAAA,SAAM;wBAAC,WAAU;;;;;;;;;;;;;;;;;IAK5B;IAEA,qBACE,6LAAC,4HAAA,CAAA,OAAI;QAAC,WAAW,YAAY,SAAS,WAAW;;0BAC/C,6LAAC,4HAAA,CAAA,aAAU;gBAAC,WAAU;;kCACpB,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC;gCAAK,WAAU;0CACb,YAAY,KAAK,KAAK,IAAI;;;;;;;;;;;;;;;;kCAIjC,6LAAC,4HAAA,CAAA,YAAS;wBAAC,WAAU;kCAAW,KAAK,KAAK;;;;;;kCAC1C,6LAAC,4HAAA,CAAA,kBAAe;kCACd,cAAA,6LAAC;4BAAI,WAAU;;8CACb,6LAAC,6HAAA,CAAA,QAAK;oCAAC,SAAS,KAAK,kBAAkB,GAAG,YAAY;8CACnD,KAAK,kBAAkB,GAAG,aAAa;;;;;;gCAEzC,KAAK,YAAY,EAAE,0BAClB,6LAAC,6HAAA,CAAA,QAAK;oCAAC,SAAQ;8CACZ,KAAK,YAAY,CAAC,QAAQ;;;;;;;;;;;;;;;;;;;;;;;YAOpC,YAAY,wBACX,6LAAC,4HAAA,CAAA,cAAW;gBAAC,WAAU;;kCAErB,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;;kDACb,6LAAC,qMAAA,CAAA,OAAI;wCAAC,WAAU;;;;;;kDAChB,6LAAC;;0DACC,6LAAC;gDAAE,WAAU;0DAAc;;;;;;0DAC3B,6LAAC;gDAAE,WAAU;0DAAiB,KAAK,KAAK;;;;;;;;;;;;;;;;;;0CAI5C,6LAAC;gCAAI,WAAU;;kDACb,6LAAC,qMAAA,CAAA,OAAI;wCAAC,WAAU;;;;;;kDAChB,6LAAC;;0DACC,6LAAC;gDAAE,WAAU;0DAAc;;;;;;0DAC3B,6LAAC;gDAAE,WAAU;0DAAmC,KAAK,EAAE;;;;;;;;;;;;;;;;;;0CAI3D,6LAAC;gCAAI,WAAU;;kDACb,6LAAC,6MAAA,CAAA,WAAQ;wCAAC,WAAU;;;;;;kDACpB,6LAAC;;0DACC,6LAAC;gDAAE,WAAU;0DAAc;;;;;;0DAC3B,6LAAC;gDAAE,WAAU;0DACV,KAAK,UAAU,GAAG,WAAW,KAAK,UAAU,IAAI;;;;;;;;;;;;;;;;;;4BAKtD,KAAK,eAAe,kBACnB,6LAAC;gCAAI,WAAU;;kDACb,6LAAC,yMAAA,CAAA,SAAM;wCAAC,WAAU;;;;;;kDAClB,6LAAC;;0DACC,6LAAC;gDAAE,WAAU;0DAAc;;;;;;0DAC3B,6LAAC;gDAAE,WAAU;0DACV,WAAW,KAAK,eAAe;;;;;;;;;;;;;;;;;;;;;;;;oBAQzC,KAAK,YAAY,IAAI,OAAO,IAAI,CAAC,KAAK,YAAY,EAAE,MAAM,GAAG,mBAC5D,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;0CAA2B;;;;;;0CACzC,6LAAC;gCAAI,WAAU;;oCACZ,KAAK,YAAY,CAAC,QAAQ,kBACzB,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAK,WAAU;0DAAgB;;;;;;0DAChC,6LAAC;gDAAK,WAAU;0DAAe,KAAK,YAAY,CAAC,QAAQ;;;;;;;;;;;;oCAG5D,KAAK,IAAI,kBACR,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAK,WAAU;0DAAgB;;;;;;0DAChC,6LAAC;gDAAK,WAAU;0DAAe,KAAK,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YASrD,6BACC,6LAAC,4HAAA,CAAA,cAAW;gBAAC,WAAW,YAAY,SAAS,SAAS;0BACpD,cAAA,6LAAC;oBAAI,WAAU;;sCACb,6LAAC,8HAAA,CAAA,SAAM;4BACL,SAAQ;4BACR,MAAK;4BACL,WAAU;4BACV,QAAQ;;8CAER,6LAAC,6MAAA,CAAA,WAAQ;oCAAC,WAAU;;;;;;gCAAiB;;;;;;;sCAGvC,6LAAC,8HAAA,CAAA,SAAM;4BACL,SAAQ;4BACR,MAAK;4BACL,SAAS;4BACT,UAAU;4BACV,WAAU;;8CAEV,6LAAC,6MAAA,CAAA,SAAM;oCAAC,WAAU;;;;;;gCAAiB;;;;;;;;;;;;;;;;;;;;;;;;AAQjD;GA7LgB;;QAKyB,0HAAA,CAAA,UAAO;;;KALhC","debugId":null}},
    {"offset": {"line": 885, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/supabase/client.ts"],"sourcesContent":["import { createBrowserClient } from \"@supabase/ssr\";\n\nexport function createClient() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n  );\n}\n"],"names":[],"mappings":";;;AAII;AAJJ;AAAA;;AAEO,SAAS;IACd,OAAO,CAAA,GAAA,6KAAA,CAAA,sBAAmB,AAAD;AAI3B","debugId":null}},
    {"offset": {"line": 904, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/data-access/base.ts"],"sourcesContent":["/**\n * Base Data Access Layer\n * \n * This module provides common utilities, error handling, and base functionality\n * for all data access operations in the Flint Lead Magnet tool.\n */\n\nimport { createClient } from '@/lib/supabase/client';\nimport type { ApiResponse, DatabaseResult, ValidationError } from '@/lib/types/database';\n\n// Re-export types for convenience\nexport type { ApiResponse, DatabaseResult, ValidationError };\n\n/**\n * Get the appropriate Supabase client based on environment\n * Currently uses client-side only to avoid server import issues in client components\n */\nexport async function getSupabaseClient() {\n  return createClient();\n}\n\n/**\n * Standard error types for database operations\n */\nexport class DataAccessError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public details?: any,\n    public validationErrors?: ValidationError[]\n  ) {\n    super(message);\n    this.name = 'DataAccessError';\n  }\n}\n\n/**\n * Wrap database operations with consistent error handling\n */\nexport async function withErrorHandling<T>(\n  operation: () => Promise<{ data: T | null; error: any }>\n): Promise<DatabaseResult<T>> {\n  try {\n    const { data, error } = await operation();\n    \n    if (error) {\n      console.error('Database operation failed:', error);\n      \n      // Handle specific Supabase error codes\n      if (error.code === 'PGRST116') {\n        return {\n          success: false,\n          error: 'No records found'\n        };\n      }\n      \n      if (error.code === '23505') {\n        return {\n          success: false,\n          error: 'Record already exists',\n          validation_errors: [\n            {\n              field: 'unique_constraint',\n              message: 'A record with this information already exists',\n              code: 'DUPLICATE_ENTRY'\n            }\n          ]\n        };\n      }\n      \n      if (error.code === '23503') {\n        return {\n          success: false,\n          error: 'Referenced record does not exist',\n          validation_errors: [\n            {\n              field: 'foreign_key',\n              message: 'The referenced record does not exist',\n              code: 'INVALID_REFERENCE'\n            }\n          ]\n        };\n      }\n      \n      return {\n        success: false,\n        error: error.message || 'Database operation failed'\n      };\n    }\n    \n    return {\n      success: true,\n      data: data || undefined\n    };\n  } catch (err) {\n    console.error('Unexpected error in database operation:', err);\n    return {\n      success: false,\n      error: err instanceof Error ? err.message : 'Unexpected error occurred'\n    };\n  }\n}\n\n/**\n * Create a standardized API response\n */\nexport function createApiResponse<T>(\n  result: DatabaseResult<T>,\n  message?: string\n): ApiResponse<T> {\n  if (result.success) {\n    return {\n      data: result.data,\n      message: message || 'Operation completed successfully'\n    };\n  } else {\n    return {\n      error: result.error,\n      message: message || 'Operation failed'\n    };\n  }\n}\n\n/**\n * Validate required fields before database operations\n */\nexport function validateRequiredFields(\n  data: Record<string, any>,\n  requiredFields: string[]\n): ValidationError[] {\n  const errors: ValidationError[] = [];\n  \n  for (const field of requiredFields) {\n    const value = data[field];\n    if (value === undefined || value === null || value === '') {\n      errors.push({\n        field,\n        message: `${field} is required`,\n        code: 'REQUIRED_FIELD_MISSING',\n        value\n      });\n    }\n  }\n  \n  return errors;\n}\n\n/**\n * Validate UUID format\n */\nexport function isValidUUID(uuid: string): boolean {\n  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n  return uuidRegex.test(uuid);\n}\n\n/**\n * Validate email format\n */\nexport function isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n/**\n * Common pagination parameters\n */\nexport interface PaginationParams {\n  page?: number;\n  per_page?: number;\n  sort_by?: string;\n  sort_order?: 'asc' | 'desc';\n}\n\n/**\n * Apply pagination to Supabase query\n */\nexport function applyPagination<T>(\n  query: any,\n  params: PaginationParams = {}\n) {\n  const { page = 1, per_page = 20, sort_by, sort_order = 'desc' } = params;\n  \n  // Calculate offset\n  const offset = (page - 1) * per_page;\n  \n  // Apply range (pagination)\n  query = query.range(offset, offset + per_page - 1);\n  \n  // Apply sorting if specified\n  if (sort_by) {\n    query = query.order(sort_by, { ascending: sort_order === 'asc' });\n  }\n  \n  return query;\n}\n\n/**\n * Get user ID from Supabase auth (for RLS)\n */\nexport async function getCurrentUserId(): Promise<string | null> {\n  const supabase = await getSupabaseClient();\n  const { data: { user } } = await supabase.auth.getUser();\n  return user?.id || null;\n}\n\n/**\n * Ensure user is authenticated before database operations\n */\nexport async function requireAuth(): Promise<string> {\n  const userId = await getCurrentUserId();\n  if (!userId) {\n    throw new DataAccessError(\n      'Authentication required',\n      'AUTH_REQUIRED'\n    );\n  }\n  return userId;\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1061, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/data-access/campaigns.ts"],"sourcesContent":["/**\n * Campaigns Data Access Layer\n * \n * This module provides CRUD operations for campaigns and their sections.\n */\n\nimport type {\n  Campaign,\n  Section,\n  SectionOption,\n  CreateCampaign,\n  CreateSection,\n  CreateSectionOption,\n  UpdateCampaign,\n  UpdateSection,\n  UpdateSectionOption,\n  CampaignWithRelations,\n  SectionWithOptions,\n  DatabaseResult,\n  PaginatedResponse\n} from '@/lib/types/database';\n\nimport {\n  getSupabaseClient,\n  withErrorHandling,\n  createApiResponse,\n  validateRequiredFields,\n  isValidUUID,\n  requireAuth,\n  applyPagination,\n  type PaginationParams\n} from './base';\n\n// =============================================================================\n// CAMPAIGN CRUD OPERATIONS\n// =============================================================================\n\n/**\n * Create a new campaign\n */\nexport async function createCampaign(\n  campaignData: CreateCampaign\n): Promise<DatabaseResult<Campaign>> {\n  // Validate required fields\n  const validationErrors = validateRequiredFields(campaignData, ['name']);\n  if (validationErrors.length > 0) {\n    return {\n      success: false,\n      error: 'Validation failed',\n      validation_errors: validationErrors\n    };\n  }\n\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('campaigns')\n      .insert({\n        ...campaignData,\n        user_id: userId\n      })\n      .select()\n      .single();\n  });\n}\n\n/**\n * Get campaign by ID\n */\nexport async function getCampaignById(\n  campaignId: string,\n  includeRelations = false\n): Promise<DatabaseResult<Campaign | CampaignWithRelations>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth(); // Ensure user is authenticated for RLS\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const query = supabase\n      .from('campaigns')\n      .select(includeRelations ? `\n        *,\n        sections (\n          *,\n          section_options (*)\n        ),\n        campaign_variables (*),\n        campaign_analytics (*)\n      ` : '*')\n      .eq('id', campaignId);\n\n    return await query.single();\n  });\n}\n\n/**\n * Get campaigns for the authenticated user\n */\nexport async function getCampaigns(\n  params: PaginationParams & { \n    status?: string;\n    search?: string;\n  } = {}\n): Promise<DatabaseResult<PaginatedResponse<Campaign>>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n  const { status, search, ...paginationParams } = params;\n\n  return withErrorHandling(async () => {\n    let query = supabase\n      .from('campaigns')\n      .select('*', { count: 'exact' })\n      .eq('user_id', userId);\n\n    // Apply filters\n    if (status) {\n      query = query.eq('status', status);\n    }\n\n    if (search) {\n      query = query.or(`name.ilike.%${search}%,description.ilike.%${search}%`);\n    }\n\n    // Apply pagination and sorting\n    query = applyPagination(query, {\n      sort_by: 'created_at',\n      ...paginationParams\n    });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      return { data: null, error };\n    }\n\n    const { page = 1, per_page = 20 } = paginationParams;\n    const totalPages = Math.ceil((count || 0) / per_page);\n\n    return {\n      data: {\n        data: data || [],\n        meta: {\n          total: count || 0,\n          page,\n          per_page,\n          has_more: page < totalPages,\n          total_pages: totalPages\n        }\n      },\n      error: null\n    };\n  });\n}\n\n/**\n * Get campaigns with full relations for the authenticated user\n */\nexport async function getCampaignsWithRelations(\n  params: PaginationParams & { \n    status?: string;\n    search?: string;\n  } = {}\n): Promise<DatabaseResult<CampaignWithRelations[]>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n  const { status, search, ...paginationParams } = params;\n\n  return withErrorHandling(async () => {\n    // First get campaigns\n    let campaignQuery = supabase\n      .from('campaigns')\n      .select('*')\n      .eq('user_id', userId);\n\n    if (status) {\n      campaignQuery = campaignQuery.eq('status', status);\n    }\n\n    if (search) {\n      campaignQuery = campaignQuery.or(`name.ilike.%${search}%,description.ilike.%${search}%`);\n    }\n\n    campaignQuery = applyPagination(campaignQuery, {\n      sort_by: 'created_at',\n      ...paginationParams\n    });\n\n    const { data: campaigns, error: campaignError } = await campaignQuery;\n\n    if (campaignError || !campaigns) {\n      return { data: null, error: campaignError };\n    }\n\n    // Get related data for each campaign\n    const campaignsWithRelations: CampaignWithRelations[] = await Promise.all(\n      campaigns.map(async (campaign): Promise<CampaignWithRelations> => {\n        // Get sections with options\n        const { data: sections } = await supabase\n          .from('sections')\n          .select(`\n            *,\n            section_options (*)\n          `)\n          .eq('campaign_id', campaign.id)\n          .order('order_index');\n\n        // Get variables\n        const { data: variables } = await supabase\n          .from('campaign_variables')\n          .select('*')\n          .eq('campaign_id', campaign.id);\n\n        // Get analytics\n        const { data: analytics } = await supabase\n          .from('campaign_analytics')\n          .select('*')\n          .eq('campaign_id', campaign.id)\n          .order('date', { ascending: false });\n\n        return {\n          ...campaign,\n          sections: sections || [],\n          variables: variables || [],\n          analytics: analytics || []\n        };\n      })\n    );\n\n    return { data: campaignsWithRelations, error: null };\n  });\n}\n\n/**\n * Update campaign\n */\nexport async function updateCampaign(\n  campaignId: string,\n  updates: Partial<UpdateCampaign>\n): Promise<DatabaseResult<Campaign>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth(); // Ensure user is authenticated for RLS\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('campaigns')\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', campaignId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Delete campaign\n */\nexport async function deleteCampaign(campaignId: string): Promise<DatabaseResult<boolean>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth(); // Ensure user is authenticated for RLS\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const { error } = await supabase\n      .from('campaigns')\n      .delete()\n      .eq('id', campaignId);\n\n    return { data: !error, error };\n  });\n}\n\n/**\n * Generate a unique slug for campaign URL\n */\nexport async function generateCampaignSlug(\n  campaignName: string,\n  campaignId?: string\n): Promise<DatabaseResult<string>> {\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    // Create base slug from campaign name\n    let baseSlug = campaignName\n      .toLowerCase()\n      .replace(/[^a-z0-9\\s-]/g, '') // Remove special characters\n      .replace(/\\s+/g, '-') // Replace spaces with hyphens\n      .replace(/-+/g, '-') // Replace multiple hyphens with single\n      .trim()\n      .substring(0, 50); // Limit length\n    \n    // Remove leading/trailing hyphens\n    baseSlug = baseSlug.replace(/^-+|-+$/g, '');\n    \n    if (!baseSlug) {\n      baseSlug = 'campaign';\n    }\n\n    let slug = baseSlug;\n    let attempts = 0;\n    const maxAttempts = 100;\n\n    // Check for uniqueness and add suffix if needed\n    while (attempts < maxAttempts) {\n      let query = supabase\n        .from('campaigns')\n        .select('id')\n        .eq('published_url', slug);\n\n      // Exclude current campaign if updating\n      if (campaignId) {\n        query = query.neq('id', campaignId);\n      }\n\n      const { data: existingCampaigns, error } = await query;\n\n      if (error) {\n        throw error;\n      }\n\n      // If no conflicts, we found our unique slug\n      if (!existingCampaigns || existingCampaigns.length === 0) {\n        return { data: slug, error: null };\n      }\n\n      // Generate new slug with suffix\n      attempts++;\n      slug = `${baseSlug}-${attempts}`;\n    }\n\n    throw new Error('Failed to generate unique URL after multiple attempts');\n  });\n}\n\n/**\n * Validate campaign before publishing\n */\nexport async function validateCampaignForPublishing(\n  campaignId: string\n): Promise<DatabaseResult<{ isValid: boolean; errors: string[] }>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const errors: string[] = [];\n\n    // Get campaign with sections\n    const { data: campaign, error: campaignError } = await supabase\n      .from('campaigns')\n      .select(`\n        *,\n        sections (\n          id,\n          type,\n          title,\n          settings\n        )\n      `)\n      .eq('id', campaignId)\n      .single();\n\n    if (campaignError || !campaign) {\n      throw campaignError || new Error('Campaign not found');\n    }\n\n    // Validate campaign has sections\n    if (!campaign.sections || campaign.sections.length === 0) {\n      errors.push('Campaign must have at least one section');\n    }\n\n    // Validate campaign has a name\n    if (!campaign.name || campaign.name.trim().length === 0) {\n      errors.push('Campaign must have a name');\n    }\n\n    // Validate sections have required fields\n    if (campaign.sections) {\n      campaign.sections.forEach((section: any, index: number) => {\n        if (!section.title || section.title.trim().length === 0) {\n          errors.push(`Section ${index + 1} must have a title`);\n        }\n      });\n    }\n\n    return {\n      data: {\n        isValid: errors.length === 0,\n        errors\n      },\n      error: null\n    };\n  });\n}\n\n/**\n * Publish campaign with unique URL generation\n */\nexport async function publishCampaign(\n  campaignId: string,\n  customSlug?: string\n): Promise<DatabaseResult<Campaign & { published_url: string }>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    // First validate the campaign\n    const validationResult = await validateCampaignForPublishing(campaignId);\n    if (!validationResult.success || !validationResult.data?.isValid) {\n      const errors = validationResult.data?.errors || ['Campaign validation failed'];\n      throw new Error(`Cannot publish campaign: ${errors.join(', ')}`);\n    }\n\n    // Get campaign details for URL generation\n    const { data: campaign, error: campaignError } = await supabase\n      .from('campaigns')\n      .select('name, published_url')\n      .eq('id', campaignId)\n      .single();\n\n    if (campaignError || !campaign) {\n      throw campaignError || new Error('Campaign not found');\n    }\n\n    let publishedUrl: string;\n\n    if (customSlug) {\n      // Validate custom slug format\n      const slugRegex = /^[a-z0-9-]+$/;\n      if (!slugRegex.test(customSlug) || customSlug.length < 3 || customSlug.length > 50) {\n        throw new Error('Custom URL must be 3-50 characters long and contain only lowercase letters, numbers, and hyphens');\n      }\n\n      // Check if custom slug is available\n      const { data: existingCampaigns, error: slugError } = await supabase\n        .from('campaigns')\n        .select('id')\n        .eq('published_url', customSlug)\n        .neq('id', campaignId);\n\n      if (slugError) {\n        throw slugError;\n      }\n\n      if (existingCampaigns && existingCampaigns.length > 0) {\n        throw new Error('This custom URL is already taken. Please choose a different one.');\n      }\n\n      publishedUrl = customSlug;\n    } else {\n      // Generate unique slug from campaign name\n      const slugResult = await generateCampaignSlug(campaign.name, campaignId);\n      if (!slugResult.success || !slugResult.data) {\n        throw new Error(slugResult.error || 'Failed to generate unique URL');\n      }\n      publishedUrl = slugResult.data;\n    }\n\n    // Update campaign with published status and URL\n    const updates = {\n      status: 'published' as const,\n      published_at: new Date().toISOString(),\n      published_url: publishedUrl,\n      is_active: true,\n      updated_at: new Date().toISOString()\n    };\n\n    const { data: updatedCampaign, error: updateError } = await supabase\n      .from('campaigns')\n      .update(updates)\n      .eq('id', campaignId)\n      .select()\n      .single();\n\n    if (updateError) {\n      throw updateError;\n    }\n\n    return {\n      data: updatedCampaign as Campaign & { published_url: string },\n      error: null\n    };\n  });\n}\n\n/**\n * Unpublish campaign (set back to draft)\n */\nexport async function unpublishCampaign(\n  campaignId: string,\n  keepUrl: boolean = false\n): Promise<DatabaseResult<Campaign>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const updates: any = {\n      status: 'draft',\n      published_at: null,\n      is_active: false,\n      updated_at: new Date().toISOString()\n    };\n\n    // Optionally clear the published URL\n    if (!keepUrl) {\n      updates.published_url = null;\n    }\n\n    return await supabase\n      .from('campaigns')\n      .update(updates)\n      .eq('id', campaignId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Check if URL slug is available\n */\nexport async function checkUrlAvailability(\n  slug: string,\n  excludeCampaignId?: string\n): Promise<DatabaseResult<{ available: boolean; suggestions?: string[] }>> {\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    // Validate slug format\n    const slugRegex = /^[a-z0-9-]+$/;\n    if (!slugRegex.test(slug) || slug.length < 3 || slug.length > 50) {\n      return {\n        data: {\n          available: false,\n          suggestions: undefined\n        },\n        error: null\n      };\n    }\n\n    let query = supabase\n      .from('campaigns')\n      .select('published_url')\n      .eq('published_url', slug);\n\n    if (excludeCampaignId) {\n      query = query.neq('id', excludeCampaignId);\n    }\n\n    const { data: existingCampaigns, error } = await query;\n\n    if (error) {\n      throw error;\n    }\n\n    const isAvailable = !existingCampaigns || existingCampaigns.length === 0;\n\n    let suggestions: string[] = [];\n    if (!isAvailable) {\n      // Generate suggestions\n      for (let i = 1; i <= 5; i++) {\n        const suggestion = `${slug}-${i}`;\n        const { data: suggestionCheck } = await supabase\n          .from('campaigns')\n          .select('published_url')\n          .eq('published_url', suggestion)\n          .limit(1);\n\n        if (!suggestionCheck || suggestionCheck.length === 0) {\n          suggestions.push(suggestion);\n        }\n      }\n    }\n\n    return {\n      data: {\n        available: isAvailable,\n        suggestions: suggestions.length > 0 ? suggestions : undefined\n      },\n      error: null\n    };\n  });\n}\n\n/**\n * Activate a published campaign (make it publicly accessible)\n */\nexport async function activateCampaign(\n  campaignId: string\n): Promise<DatabaseResult<Campaign>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    // First check if campaign is published\n    const { data: campaign, error: checkError } = await supabase\n      .from('campaigns')\n      .select('status, published_at')\n      .eq('id', campaignId)\n      .single();\n\n    if (checkError || !campaign) {\n      throw checkError || new Error('Campaign not found');\n    }\n\n    if (campaign.status !== 'published' || !campaign.published_at) {\n      throw new Error('Only published campaigns can be activated');\n    }\n\n    return await supabase\n      .from('campaigns')\n      .update({\n        is_active: true,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', campaignId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Deactivate a published campaign (make it inaccessible while preserving URL)\n */\nexport async function deactivateCampaign(\n  campaignId: string\n): Promise<DatabaseResult<Campaign>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    // First check if campaign is published\n    const { data: campaign, error: checkError } = await supabase\n      .from('campaigns')\n      .select('status, published_at')\n      .eq('id', campaignId)\n      .single();\n\n    if (checkError || !campaign) {\n      throw checkError || new Error('Campaign not found');\n    }\n\n    if (campaign.status !== 'published' || !campaign.published_at) {\n      throw new Error('Only published campaigns can be deactivated');\n    }\n\n    return await supabase\n      .from('campaigns')\n      .update({\n        is_active: false,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', campaignId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Get campaign activation status\n */\nexport async function getCampaignActivationStatus(\n  campaignId: string\n): Promise<DatabaseResult<{ isPublished: boolean; isActive: boolean; canActivate: boolean }>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const { data: campaign, error } = await supabase\n      .from('campaigns')\n      .select('status, published_at, is_active')\n      .eq('id', campaignId)\n      .single();\n\n    if (error || !campaign) {\n      throw error || new Error('Campaign not found');\n    }\n\n    const isPublished = campaign.status === 'published' && !!campaign.published_at;\n    const isActive = campaign.is_active;\n    const canActivate = isPublished;\n\n    return {\n      data: {\n        isPublished,\n        isActive,\n        canActivate\n      },\n      error: null\n    };\n  });\n}\n\n// =============================================================================\n// SECTION CRUD OPERATIONS\n// =============================================================================\n\n/**\n * Create a new section for a campaign\n */\nexport async function createSection(\n  sectionData: CreateSection\n): Promise<DatabaseResult<Section>> {\n  // Validate required fields\n  const validationErrors = validateRequiredFields(sectionData, [\n    'campaign_id',\n    'type',\n    'order_index'\n  ]);\n  if (validationErrors.length > 0) {\n    return {\n      success: false,\n      error: 'Validation failed',\n      validation_errors: validationErrors\n    };\n  }\n\n  if (!isValidUUID(sectionData.campaign_id)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('sections')\n      .insert(sectionData)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Get section by ID with options\n */\nexport async function getSectionById(\n  sectionId: string\n): Promise<DatabaseResult<SectionWithOptions>> {\n  if (!isValidUUID(sectionId)) {\n    return {\n      success: false,\n      error: 'Invalid section ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('sections')\n      .select(`\n        *,\n        section_options (*)\n      `)\n      .eq('id', sectionId)\n      .single();\n  });\n}\n\n/**\n * Get sections for a campaign\n */\nexport async function getCampaignSections(\n  campaignId: string\n): Promise<DatabaseResult<SectionWithOptions[]>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('sections')\n      .select(`\n        *,\n        section_options (*)\n      `)\n      .eq('campaign_id', campaignId)\n      .order('order_index', { ascending: true });\n  });\n}\n\n/**\n * Update section\n */\nexport async function updateSection(\n  sectionId: string,\n  updates: Partial<UpdateSection>\n): Promise<DatabaseResult<Section>> {\n  if (!isValidUUID(sectionId)) {\n    return {\n      success: false,\n      error: 'Invalid section ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('sections')\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', sectionId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Delete section\n */\nexport async function deleteSection(sectionId: string): Promise<DatabaseResult<boolean>> {\n  if (!isValidUUID(sectionId)) {\n    return {\n      success: false,\n      error: 'Invalid section ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const { error } = await supabase\n      .from('sections')\n      .delete()\n      .eq('id', sectionId);\n\n    return { data: !error, error };\n  });\n}\n\n/**\n * Reorder sections within a campaign\n */\nexport async function reorderSections(\n  campaignId: string,\n  sectionOrders: { id: string; order_index: number }[]\n): Promise<DatabaseResult<Section[]>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  // Validate all section IDs\n  for (const { id } of sectionOrders) {\n    if (!isValidUUID(id)) {\n      return {\n        success: false,\n        error: `Invalid section ID format: ${id}`\n      };\n    }\n  }\n\n  return withErrorHandling(async () => {\n    // Update each section's order_index\n    const updatePromises = sectionOrders.map(({ id, order_index }) =>\n      supabase\n        .from('sections')\n        .update({ \n          order_index,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', id)\n        .eq('campaign_id', campaignId) // Ensure section belongs to campaign\n    );\n\n    await Promise.all(updatePromises);\n\n    // Return updated sections\n    return await supabase\n      .from('sections')\n      .select()\n      .eq('campaign_id', campaignId)\n      .order('order_index', { ascending: true });\n  });\n}\n\n// =============================================================================\n// SECTION OPTIONS CRUD OPERATIONS\n// =============================================================================\n\n/**\n * Create section option\n */\nexport async function createSectionOption(\n  optionData: CreateSectionOption\n): Promise<DatabaseResult<SectionOption>> {\n  const validationErrors = validateRequiredFields(optionData, [\n    'section_id',\n    'label',\n    'value',\n    'order_index'\n  ]);\n  if (validationErrors.length > 0) {\n    return {\n      success: false,\n      error: 'Validation failed',\n      validation_errors: validationErrors\n    };\n  }\n\n  if (!isValidUUID(optionData.section_id)) {\n    return {\n      success: false,\n      error: 'Invalid section ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('section_options')\n      .insert(optionData)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Update section option\n */\nexport async function updateSectionOption(\n  optionId: string,\n  updates: Partial<UpdateSectionOption>\n): Promise<DatabaseResult<SectionOption>> {\n  if (!isValidUUID(optionId)) {\n    return {\n      success: false,\n      error: 'Invalid option ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('section_options')\n      .update(updates)\n      .eq('id', optionId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Delete section option\n */\nexport async function deleteSectionOption(optionId: string): Promise<DatabaseResult<boolean>> {\n  if (!isValidUUID(optionId)) {\n    return {\n      success: false,\n      error: 'Invalid option ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const { error } = await supabase\n      .from('section_options')\n      .delete()\n      .eq('id', optionId);\n\n    return { data: !error, error };\n  });\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1748, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/data-access/leads.ts"],"sourcesContent":["/**\n * Leads Data Access Layer\n * \n * This module provides CRUD operations for leads, responses, and lead management.\n */\n\nimport type {\n  Lead,\n  LeadResponse,\n  CreateLead,\n  CreateLeadResponse,\n  UpdateLead,\n  UpdateLeadResponse,\n  LeadWithRelations,\n  LeadResponseWithRelations,\n  DatabaseResult,\n  PaginatedResponse\n} from '@/lib/types/database';\n\nimport {\n  getSupabaseClient,\n  withErrorHandling,\n  validateRequiredFields,\n  isValidUUID,\n  isValidEmail,\n  requireAuth,\n  applyPagination,\n  type PaginationParams\n} from './base';\n\n// =============================================================================\n// LEAD CRUD OPERATIONS\n// =============================================================================\n\n/**\n * Create a new lead\n */\nexport async function createLead(\n  leadData: CreateLead\n): Promise<DatabaseResult<Lead>> {\n  // Validate required fields\n  const validationErrors = validateRequiredFields(leadData, [\n    'campaign_id',\n    'email'\n  ]);\n  \n  if (validationErrors.length > 0) {\n    return {\n      success: false,\n      error: 'Validation failed',\n      validation_errors: validationErrors\n    };\n  }\n\n  // Validate UUID format\n  if (!isValidUUID(leadData.campaign_id)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  // Validate email format\n  if (!isValidEmail(leadData.email)) {\n    return {\n      success: false,\n      error: 'Invalid email format',\n      validation_errors: [{\n        field: 'email',\n        message: 'Please provide a valid email address',\n        code: 'INVALID_EMAIL',\n        value: leadData.email\n      }]\n    };\n  }\n\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('leads')\n      .insert(leadData)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Get lead by ID\n */\nexport async function getLeadById(\n  leadId: string,\n  includeRelations = false\n): Promise<DatabaseResult<Lead | LeadWithRelations>> {\n  if (!isValidUUID(leadId)) {\n    return {\n      success: false,\n      error: 'Invalid lead ID format'\n    };\n  }\n\n  await requireAuth(); // Ensure authenticated for RLS\n  const supabase = await getSupabaseClient();\n\n  if (!includeRelations) {\n    return withErrorHandling(async () => {\n      return await supabase\n        .from('leads')\n        .select('*')\n        .eq('id', leadId)\n        .single();\n    });\n  }\n\n  return withErrorHandling(async () => {\n    // Get lead with all relations\n    const { data: lead, error: leadError } = await supabase\n      .from('leads')\n      .select('*')\n      .eq('id', leadId)\n      .single();\n\n    if (leadError || !lead) {\n      return { data: null, error: leadError };\n    }\n\n    // Get responses\n    const { data: responses } = await supabase\n      .from('lead_responses')\n      .select(`\n        *,\n        sections (*)\n      `)\n      .eq('lead_id', leadId)\n      .order('created_at');\n\n    // Get variable values\n    const { data: variableValues } = await supabase\n      .from('lead_variable_values')\n      .select(`\n        *,\n        campaign_variables (*)\n      `)\n      .eq('lead_id', leadId);\n\n    // Get campaign\n    const { data: campaign } = await supabase\n      .from('campaigns')\n      .select('*')\n      .eq('id', lead.campaign_id)\n      .single();\n\n    const leadWithRelations: LeadWithRelations = {\n      ...lead,\n      responses: responses || [],\n      variable_values: variableValues || [],\n      campaign: campaign || undefined\n    };\n\n    return { data: leadWithRelations, error: null };\n  });\n}\n\n/**\n * Get leads for a campaign\n */\nexport async function getCampaignLeads(\n  campaignId: string,\n  params: PaginationParams & {\n    completed?: boolean;\n    search?: string;\n  } = {}\n): Promise<DatabaseResult<PaginatedResponse<Lead>>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n  const { completed, search, ...paginationParams } = params;\n\n  return withErrorHandling(async () => {\n    let query = supabase\n      .from('leads')\n      .select('*', { count: 'exact' })\n      .eq('campaign_id', campaignId);\n\n    // Apply filters\n    if (completed !== undefined) {\n      if (completed) {\n        query = query.not('completed_at', 'is', null);\n      } else {\n        query = query.is('completed_at', null);\n      }\n    }\n\n    if (search) {\n      query = query.or(`name.ilike.%${search}%,email.ilike.%${search}%`);\n    }\n\n    // Apply pagination and sorting\n    query = applyPagination(query, {\n      sort_by: 'created_at',\n      ...paginationParams\n    });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      return { data: null, error };\n    }\n\n    const { page = 1, per_page = 20 } = paginationParams;\n    const totalPages = Math.ceil((count || 0) / per_page);\n\n    return {\n      data: {\n        data: data || [],\n        meta: {\n          total: count || 0,\n          page,\n          per_page,\n          has_more: page < totalPages,\n          total_pages: totalPages\n        }\n      },\n      error: null\n    };\n  });\n}\n\n/**\n * Update lead\n */\nexport async function updateLead(\n  leadId: string,\n  updates: Partial<UpdateLead>\n): Promise<DatabaseResult<Lead>> {\n  if (!isValidUUID(leadId)) {\n    return {\n      success: false,\n      error: 'Invalid lead ID format'\n    };\n  }\n\n  // Validate email if provided\n  if (updates.email && !isValidEmail(updates.email)) {\n    return {\n      success: false,\n      error: 'Invalid email format',\n      validation_errors: [{\n        field: 'email',\n        message: 'Please provide a valid email address',\n        code: 'INVALID_EMAIL',\n        value: updates.email\n      }]\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('leads')\n      .update(updates)\n      .eq('id', leadId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Mark lead as completed\n */\nexport async function completeLead(leadId: string): Promise<DatabaseResult<Lead>> {\n  if (!isValidUUID(leadId)) {\n    return {\n      success: false,\n      error: 'Invalid lead ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('leads')\n      .update({ completed_at: new Date().toISOString() })\n      .eq('id', leadId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Delete lead\n */\nexport async function deleteLead(leadId: string): Promise<DatabaseResult<boolean>> {\n  if (!isValidUUID(leadId)) {\n    return {\n      success: false,\n      error: 'Invalid lead ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const { error } = await supabase\n      .from('leads')\n      .delete()\n      .eq('id', leadId);\n\n    return { data: !error, error };\n  });\n}\n\n// =============================================================================\n// LEAD RESPONSE CRUD OPERATIONS\n// =============================================================================\n\n/**\n * Create a lead response\n */\nexport async function createLeadResponse(\n  responseData: CreateLeadResponse\n): Promise<DatabaseResult<LeadResponse>> {\n  // Validate required fields\n  const validationErrors = validateRequiredFields(responseData, [\n    'lead_id',\n    'section_id',\n    'response_type',\n    'response_value'\n  ]);\n\n  if (validationErrors.length > 0) {\n    return {\n      success: false,\n      error: 'Validation failed',\n      validation_errors: validationErrors\n    };\n  }\n\n  // Validate UUIDs\n  if (!isValidUUID(responseData.lead_id)) {\n    return {\n      success: false,\n      error: 'Invalid lead ID format'\n    };\n  }\n\n  if (!isValidUUID(responseData.section_id)) {\n    return {\n      success: false,\n      error: 'Invalid section ID format'\n    };\n  }\n\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('lead_responses')\n      .insert(responseData)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Update or create lead response (upsert)\n */\nexport async function upsertLeadResponse(\n  responseData: CreateLeadResponse\n): Promise<DatabaseResult<LeadResponse>> {\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('lead_responses')\n      .upsert(responseData, {\n        onConflict: 'lead_id,section_id'\n      })\n      .select()\n      .single();\n  });\n}\n\n/**\n * Get responses for a lead\n */\nexport async function getLeadResponses(\n  leadId: string\n): Promise<DatabaseResult<LeadResponseWithRelations[]>> {\n  if (!isValidUUID(leadId)) {\n    return {\n      success: false,\n      error: 'Invalid lead ID format'\n    };\n  }\n\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('lead_responses')\n      .select(`\n        *,\n        sections (*),\n        leads (*)\n      `)\n      .eq('lead_id', leadId)\n      .order('created_at');\n  });\n}\n\n/**\n * Get responses for a section across all leads\n */\nexport async function getSectionResponses(\n  sectionId: string,\n  params: PaginationParams = {}\n): Promise<DatabaseResult<PaginatedResponse<LeadResponseWithRelations>>> {\n  if (!isValidUUID(sectionId)) {\n    return {\n      success: false,\n      error: 'Invalid section ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    let query = supabase\n      .from('lead_responses')\n      .select(`\n        *,\n        sections (*),\n        leads (*)\n      `, { count: 'exact' })\n      .eq('section_id', sectionId);\n\n    // Apply pagination and sorting\n    query = applyPagination(query, {\n      sort_by: 'created_at',\n      ...params\n    });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      return { data: null, error };\n    }\n\n    const { page = 1, per_page = 20 } = params;\n    const totalPages = Math.ceil((count || 0) / per_page);\n\n    return {\n      data: {\n        data: data || [],\n        meta: {\n          total: count || 0,\n          page,\n          per_page,\n          has_more: page < totalPages,\n          total_pages: totalPages\n        }\n      },\n      error: null\n    };\n  });\n}\n\n/**\n * Delete lead response\n */\nexport async function deleteLeadResponse(\n  responseId: string\n): Promise<DatabaseResult<boolean>> {\n  if (!isValidUUID(responseId)) {\n    return {\n      success: false,\n      error: 'Invalid response ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const { error } = await supabase\n      .from('lead_responses')\n      .delete()\n      .eq('id', responseId);\n\n    return { data: !error, error };\n  });\n}\n\n// =============================================================================\n// LEAD ANALYTICS AND UTILITIES\n// =============================================================================\n\n/**\n * Get lead statistics for a campaign\n */\nexport async function getCampaignLeadStats(\n  campaignId: string\n): Promise<DatabaseResult<{\n  total: number;\n  completed: number;\n  conversion_rate: number;\n  recent_leads: Lead[];\n}>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    // Get total leads count\n    const { count: totalCount } = await supabase\n      .from('leads')\n      .select('*', { count: 'exact', head: true })\n      .eq('campaign_id', campaignId);\n\n    // Get completed leads count\n    const { count: completedCount } = await supabase\n      .from('leads')\n      .select('*', { count: 'exact', head: true })\n      .eq('campaign_id', campaignId)\n      .not('completed_at', 'is', null);\n\n    // Get recent leads\n    const { data: recentLeads } = await supabase\n      .from('leads')\n      .select('*')\n      .eq('campaign_id', campaignId)\n      .order('created_at', { ascending: false })\n      .limit(10);\n\n    const total = totalCount || 0;\n    const completed = completedCount || 0;\n    const conversion_rate = total > 0 ? (completed / total) * 100 : 0;\n\n    return {\n      data: {\n        total,\n        completed,\n        conversion_rate: Math.round(conversion_rate * 100) / 100, // Round to 2 decimal places\n        recent_leads: recentLeads || []\n      },\n      error: null\n    };\n  });\n}\n\n/**\n * Search leads across campaigns for a user\n */\nexport async function searchLeads(\n  searchTerm: string,\n  params: PaginationParams = {}\n): Promise<DatabaseResult<PaginatedResponse<LeadWithRelations>>> {\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    let query = supabase\n      .from('leads')\n      .select(`\n        *,\n        campaigns!inner (*)\n      `, { count: 'exact' })\n      .or(`name.ilike.%${searchTerm}%,email.ilike.%${searchTerm}%`);\n\n    // Apply pagination and sorting\n    query = applyPagination(query, {\n      sort_by: 'created_at',\n      ...params\n    });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      return { data: null, error };\n    }\n\n    const { page = 1, per_page = 20 } = params;\n    const totalPages = Math.ceil((count || 0) / per_page);\n\n    return {\n      data: {\n        data: data || [],\n        meta: {\n          total: count || 0,\n          page,\n          per_page,\n          has_more: page < totalPages,\n          total_pages: totalPages\n        }\n      },\n      error: null\n    };\n  });\n}\n\n/**\n * Get all leads for the authenticated user across their campaigns\n */\nexport async function getLeads(\n  params: PaginationParams & {\n    campaign_id?: string;\n    completed?: boolean;\n    search?: string;\n  } = {}\n): Promise<DatabaseResult<PaginatedResponse<Lead>>> {\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n  const { campaign_id, completed, search, ...paginationParams } = params;\n\n  return withErrorHandling(async () => {\n    let query = supabase\n      .from('leads')\n      .select(`\n        *,\n        campaigns!inner (*)\n      `, { count: 'exact' });\n\n    // Apply filters\n    if (campaign_id) {\n      query = query.eq('campaign_id', campaign_id);\n    }\n\n    if (completed !== undefined) {\n      if (completed) {\n        query = query.not('completed_at', 'is', null);\n      } else {\n        query = query.is('completed_at', null);\n      }\n    }\n\n    if (search) {\n      query = query.or(`name.ilike.%${search}%,email.ilike.%${search}%,phone.ilike.%${search}%`);\n    }\n\n    // Apply pagination and sorting\n    query = applyPagination(query, {\n      sort_by: 'created_at',\n      sort_order: 'desc',\n      ...paginationParams\n    });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      return { data: null, error };\n    }\n\n    const { page = 1, per_page = 20 } = paginationParams;\n    const totalPages = Math.ceil((count || 0) / per_page);\n\n    return {\n      data: {\n        data: data || [],\n        meta: {\n          total: count || 0,\n          page,\n          per_page,\n          has_more: page < totalPages,\n          total_pages: totalPages\n        }\n      },\n      error: null\n    };\n  });\n} "],"names":[],"mappings":"AAAA;;;;CAIC;;;;;;;;;;;;;;;;AAeD;;AAkBO,eAAe,WACpB,QAAoB;IAEpB,2BAA2B;IAC3B,MAAM,mBAAmB,CAAA,GAAA,gIAAA,CAAA,yBAAsB,AAAD,EAAE,UAAU;QACxD;QACA;KACD;IAED,IAAI,iBAAiB,MAAM,GAAG,GAAG;QAC/B,OAAO;YACL,SAAS;YACT,OAAO;YACP,mBAAmB;QACrB;IACF;IAEA,uBAAuB;IACvB,IAAI,CAAC,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD,EAAE,SAAS,WAAW,GAAG;QACtC,OAAO;YACL,SAAS;YACT,OAAO;QACT;IACF;IAEA,wBAAwB;IACxB,IAAI,CAAC,CAAA,GAAA,gIAAA,CAAA,eAAY,AAAD,EAAE,SAAS,KAAK,GAAG;QACjC,OAAO;YACL,SAAS;YACT,OAAO;YACP,mBAAmB;gBAAC;oBAClB,OAAO;oBACP,SAAS;oBACT,MAAM;oBACN,OAAO,SAAS,KAAK;gBACvB;aAAE;QACJ;IACF;IAEA,MAAM,WAAW,MAAM,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD;IAEvC,OAAO,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,OAAO,MAAM,SACV,IAAI,CAAC,SACL,MAAM,CAAC,UACP,MAAM,GACN,MAAM;IACX;AACF;AAKO,eAAe,YACpB,MAAc,EACd,mBAAmB,KAAK;IAExB,IAAI,CAAC,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD,EAAE,SAAS;QACxB,OAAO;YACL,SAAS;YACT,OAAO;QACT;IACF;IAEA,MAAM,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD,KAAK,+BAA+B;IACpD,MAAM,WAAW,MAAM,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD;IAEvC,IAAI,CAAC,kBAAkB;QACrB,OAAO,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD,EAAE;YACvB,OAAO,MAAM,SACV,IAAI,CAAC,SACL,MAAM,CAAC,KACP,EAAE,CAAC,MAAM,QACT,MAAM;QACX;IACF;IAEA,OAAO,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,8BAA8B;QAC9B,MAAM,EAAE,MAAM,IAAI,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,SAC5C,IAAI,CAAC,SACL,MAAM,CAAC,KACP,EAAE,CAAC,MAAM,QACT,MAAM;QAET,IAAI,aAAa,CAAC,MAAM;YACtB,OAAO;gBAAE,MAAM;gBAAM,OAAO;YAAU;QACxC;QAEA,gBAAgB;QAChB,MAAM,EAAE,MAAM,SAAS,EAAE,GAAG,MAAM,SAC/B,IAAI,CAAC,kBACL,MAAM,CAAC,CAAC;;;MAGT,CAAC,EACA,EAAE,CAAC,WAAW,QACd,KAAK,CAAC;QAET,sBAAsB;QACtB,MAAM,EAAE,MAAM,cAAc,EAAE,GAAG,MAAM,SACpC,IAAI,CAAC,wBACL,MAAM,CAAC,CAAC;;;MAGT,CAAC,EACA,EAAE,CAAC,WAAW;QAEjB,eAAe;QACf,MAAM,EAAE,MAAM,QAAQ,EAAE,GAAG,MAAM,SAC9B,IAAI,CAAC,aACL,MAAM,CAAC,KACP,EAAE,CAAC,MAAM,KAAK,WAAW,EACzB,MAAM;QAET,MAAM,oBAAuC;YAC3C,GAAG,IAAI;YACP,WAAW,aAAa,EAAE;YAC1B,iBAAiB,kBAAkB,EAAE;YACrC,UAAU,YAAY;QACxB;QAEA,OAAO;YAAE,MAAM;YAAmB,OAAO;QAAK;IAChD;AACF;AAKO,eAAe,iBACpB,UAAkB,EAClB,SAGI,CAAC,CAAC;IAEN,IAAI,CAAC,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD,EAAE,aAAa;QAC5B,OAAO;YACL,SAAS;YACT,OAAO;QACT;IACF;IAEA,MAAM,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD;IAChB,MAAM,WAAW,MAAM,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD;IACvC,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,kBAAkB,GAAG;IAEnD,OAAO,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,IAAI,QAAQ,SACT,IAAI,CAAC,SACL,MAAM,CAAC,KAAK;YAAE,OAAO;QAAQ,GAC7B,EAAE,CAAC,eAAe;QAErB,gBAAgB;QAChB,IAAI,cAAc,WAAW;YAC3B,IAAI,WAAW;gBACb,QAAQ,MAAM,GAAG,CAAC,gBAAgB,MAAM;YAC1C,OAAO;gBACL,QAAQ,MAAM,EAAE,CAAC,gBAAgB;YACnC;QACF;QAEA,IAAI,QAAQ;YACV,QAAQ,MAAM,EAAE,CAAC,CAAC,YAAY,EAAE,OAAO,eAAe,EAAE,OAAO,CAAC,CAAC;QACnE;QAEA,+BAA+B;QAC/B,QAAQ,CAAA,GAAA,gIAAA,CAAA,kBAAe,AAAD,EAAE,OAAO;YAC7B,SAAS;YACT,GAAG,gBAAgB;QACrB;QAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM;QAErC,IAAI,OAAO;YACT,OAAO;gBAAE,MAAM;gBAAM;YAAM;QAC7B;QAEA,MAAM,EAAE,OAAO,CAAC,EAAE,WAAW,EAAE,EAAE,GAAG;QACpC,MAAM,aAAa,KAAK,IAAI,CAAC,CAAC,SAAS,CAAC,IAAI;QAE5C,OAAO;YACL,MAAM;gBACJ,MAAM,QAAQ,EAAE;gBAChB,MAAM;oBACJ,OAAO,SAAS;oBAChB;oBACA;oBACA,UAAU,OAAO;oBACjB,aAAa;gBACf;YACF;YACA,OAAO;QACT;IACF;AACF;AAKO,eAAe,WACpB,MAAc,EACd,OAA4B;IAE5B,IAAI,CAAC,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD,EAAE,SAAS;QACxB,OAAO;YACL,SAAS;YACT,OAAO;QACT;IACF;IAEA,6BAA6B;IAC7B,IAAI,QAAQ,KAAK,IAAI,CAAC,CAAA,GAAA,gIAAA,CAAA,eAAY,AAAD,EAAE,QAAQ,KAAK,GAAG;QACjD,OAAO;YACL,SAAS;YACT,OAAO;YACP,mBAAmB;gBAAC;oBAClB,OAAO;oBACP,SAAS;oBACT,MAAM;oBACN,OAAO,QAAQ,KAAK;gBACtB;aAAE;QACJ;IACF;IAEA,MAAM,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD;IAChB,MAAM,WAAW,MAAM,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD;IAEvC,OAAO,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,OAAO,MAAM,SACV,IAAI,CAAC,SACL,MAAM,CAAC,SACP,EAAE,CAAC,MAAM,QACT,MAAM,GACN,MAAM;IACX;AACF;AAKO,eAAe,aAAa,MAAc;IAC/C,IAAI,CAAC,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD,EAAE,SAAS;QACxB,OAAO;YACL,SAAS;YACT,OAAO;QACT;IACF;IAEA,MAAM,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD;IAChB,MAAM,WAAW,MAAM,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD;IAEvC,OAAO,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,OAAO,MAAM,SACV,IAAI,CAAC,SACL,MAAM,CAAC;YAAE,cAAc,IAAI,OAAO,WAAW;QAAG,GAChD,EAAE,CAAC,MAAM,QACT,MAAM,GACN,MAAM;IACX;AACF;AAKO,eAAe,WAAW,MAAc;IAC7C,IAAI,CAAC,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD,EAAE,SAAS;QACxB,OAAO;YACL,SAAS;YACT,OAAO;QACT;IACF;IAEA,MAAM,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD;IAChB,MAAM,WAAW,MAAM,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD;IAEvC,OAAO,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACrB,IAAI,CAAC,SACL,MAAM,GACN,EAAE,CAAC,MAAM;QAEZ,OAAO;YAAE,MAAM,CAAC;YAAO;QAAM;IAC/B;AACF;AASO,eAAe,mBACpB,YAAgC;IAEhC,2BAA2B;IAC3B,MAAM,mBAAmB,CAAA,GAAA,gIAAA,CAAA,yBAAsB,AAAD,EAAE,cAAc;QAC5D;QACA;QACA;QACA;KACD;IAED,IAAI,iBAAiB,MAAM,GAAG,GAAG;QAC/B,OAAO;YACL,SAAS;YACT,OAAO;YACP,mBAAmB;QACrB;IACF;IAEA,iBAAiB;IACjB,IAAI,CAAC,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD,EAAE,aAAa,OAAO,GAAG;QACtC,OAAO;YACL,SAAS;YACT,OAAO;QACT;IACF;IAEA,IAAI,CAAC,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD,EAAE,aAAa,UAAU,GAAG;QACzC,OAAO;YACL,SAAS;YACT,OAAO;QACT;IACF;IAEA,MAAM,WAAW,MAAM,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD;IAEvC,OAAO,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,OAAO,MAAM,SACV,IAAI,CAAC,kBACL,MAAM,CAAC,cACP,MAAM,GACN,MAAM;IACX;AACF;AAKO,eAAe,mBACpB,YAAgC;IAEhC,MAAM,WAAW,MAAM,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD;IAEvC,OAAO,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,OAAO,MAAM,SACV,IAAI,CAAC,kBACL,MAAM,CAAC,cAAc;YACpB,YAAY;QACd,GACC,MAAM,GACN,MAAM;IACX;AACF;AAKO,eAAe,iBACpB,MAAc;IAEd,IAAI,CAAC,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD,EAAE,SAAS;QACxB,OAAO;YACL,SAAS;YACT,OAAO;QACT;IACF;IAEA,MAAM,WAAW,MAAM,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD;IAEvC,OAAO,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,OAAO,MAAM,SACV,IAAI,CAAC,kBACL,MAAM,CAAC,CAAC;;;;MAIT,CAAC,EACA,EAAE,CAAC,WAAW,QACd,KAAK,CAAC;IACX;AACF;AAKO,eAAe,oBACpB,SAAiB,EACjB,SAA2B,CAAC,CAAC;IAE7B,IAAI,CAAC,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD,EAAE,YAAY;QAC3B,OAAO;YACL,SAAS;YACT,OAAO;QACT;IACF;IAEA,MAAM,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD;IAChB,MAAM,WAAW,MAAM,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD;IAEvC,OAAO,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,IAAI,QAAQ,SACT,IAAI,CAAC,kBACL,MAAM,CAAC,CAAC;;;;MAIT,CAAC,EAAE;YAAE,OAAO;QAAQ,GACnB,EAAE,CAAC,cAAc;QAEpB,+BAA+B;QAC/B,QAAQ,CAAA,GAAA,gIAAA,CAAA,kBAAe,AAAD,EAAE,OAAO;YAC7B,SAAS;YACT,GAAG,MAAM;QACX;QAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM;QAErC,IAAI,OAAO;YACT,OAAO;gBAAE,MAAM;gBAAM;YAAM;QAC7B;QAEA,MAAM,EAAE,OAAO,CAAC,EAAE,WAAW,EAAE,EAAE,GAAG;QACpC,MAAM,aAAa,KAAK,IAAI,CAAC,CAAC,SAAS,CAAC,IAAI;QAE5C,OAAO;YACL,MAAM;gBACJ,MAAM,QAAQ,EAAE;gBAChB,MAAM;oBACJ,OAAO,SAAS;oBAChB;oBACA;oBACA,UAAU,OAAO;oBACjB,aAAa;gBACf;YACF;YACA,OAAO;QACT;IACF;AACF;AAKO,eAAe,mBACpB,UAAkB;IAElB,IAAI,CAAC,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD,EAAE,aAAa;QAC5B,OAAO;YACL,SAAS;YACT,OAAO;QACT;IACF;IAEA,MAAM,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD;IAChB,MAAM,WAAW,MAAM,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD;IAEvC,OAAO,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACrB,IAAI,CAAC,kBACL,MAAM,GACN,EAAE,CAAC,MAAM;QAEZ,OAAO;YAAE,MAAM,CAAC;YAAO;QAAM;IAC/B;AACF;AASO,eAAe,qBACpB,UAAkB;IAOlB,IAAI,CAAC,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD,EAAE,aAAa;QAC5B,OAAO;YACL,SAAS;YACT,OAAO;QACT;IACF;IAEA,MAAM,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD;IAChB,MAAM,WAAW,MAAM,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD;IAEvC,OAAO,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,wBAAwB;QACxB,MAAM,EAAE,OAAO,UAAU,EAAE,GAAG,MAAM,SACjC,IAAI,CAAC,SACL,MAAM,CAAC,KAAK;YAAE,OAAO;YAAS,MAAM;QAAK,GACzC,EAAE,CAAC,eAAe;QAErB,4BAA4B;QAC5B,MAAM,EAAE,OAAO,cAAc,EAAE,GAAG,MAAM,SACrC,IAAI,CAAC,SACL,MAAM,CAAC,KAAK;YAAE,OAAO;YAAS,MAAM;QAAK,GACzC,EAAE,CAAC,eAAe,YAClB,GAAG,CAAC,gBAAgB,MAAM;QAE7B,mBAAmB;QACnB,MAAM,EAAE,MAAM,WAAW,EAAE,GAAG,MAAM,SACjC,IAAI,CAAC,SACL,MAAM,CAAC,KACP,EAAE,CAAC,eAAe,YAClB,KAAK,CAAC,cAAc;YAAE,WAAW;QAAM,GACvC,KAAK,CAAC;QAET,MAAM,QAAQ,cAAc;QAC5B,MAAM,YAAY,kBAAkB;QACpC,MAAM,kBAAkB,QAAQ,IAAI,AAAC,YAAY,QAAS,MAAM;QAEhE,OAAO;YACL,MAAM;gBACJ;gBACA;gBACA,iBAAiB,KAAK,KAAK,CAAC,kBAAkB,OAAO;gBACrD,cAAc,eAAe,EAAE;YACjC;YACA,OAAO;QACT;IACF;AACF;AAKO,eAAe,YACpB,UAAkB,EAClB,SAA2B,CAAC,CAAC;IAE7B,MAAM,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD;IAChB,MAAM,WAAW,MAAM,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD;IAEvC,OAAO,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,IAAI,QAAQ,SACT,IAAI,CAAC,SACL,MAAM,CAAC,CAAC;;;MAGT,CAAC,EAAE;YAAE,OAAO;QAAQ,GACnB,EAAE,CAAC,CAAC,YAAY,EAAE,WAAW,eAAe,EAAE,WAAW,CAAC,CAAC;QAE9D,+BAA+B;QAC/B,QAAQ,CAAA,GAAA,gIAAA,CAAA,kBAAe,AAAD,EAAE,OAAO;YAC7B,SAAS;YACT,GAAG,MAAM;QACX;QAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM;QAErC,IAAI,OAAO;YACT,OAAO;gBAAE,MAAM;gBAAM;YAAM;QAC7B;QAEA,MAAM,EAAE,OAAO,CAAC,EAAE,WAAW,EAAE,EAAE,GAAG;QACpC,MAAM,aAAa,KAAK,IAAI,CAAC,CAAC,SAAS,CAAC,IAAI;QAE5C,OAAO;YACL,MAAM;gBACJ,MAAM,QAAQ,EAAE;gBAChB,MAAM;oBACJ,OAAO,SAAS;oBAChB;oBACA;oBACA,UAAU,OAAO;oBACjB,aAAa;gBACf;YACF;YACA,OAAO;QACT;IACF;AACF;AAKO,eAAe,SACpB,SAII,CAAC,CAAC;IAEN,MAAM,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD;IAChB,MAAM,WAAW,MAAM,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD;IACvC,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,kBAAkB,GAAG;IAEhE,OAAO,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,IAAI,QAAQ,SACT,IAAI,CAAC,SACL,MAAM,CAAC,CAAC;;;MAGT,CAAC,EAAE;YAAE,OAAO;QAAQ;QAEtB,gBAAgB;QAChB,IAAI,aAAa;YACf,QAAQ,MAAM,EAAE,CAAC,eAAe;QAClC;QAEA,IAAI,cAAc,WAAW;YAC3B,IAAI,WAAW;gBACb,QAAQ,MAAM,GAAG,CAAC,gBAAgB,MAAM;YAC1C,OAAO;gBACL,QAAQ,MAAM,EAAE,CAAC,gBAAgB;YACnC;QACF;QAEA,IAAI,QAAQ;YACV,QAAQ,MAAM,EAAE,CAAC,CAAC,YAAY,EAAE,OAAO,eAAe,EAAE,OAAO,eAAe,EAAE,OAAO,CAAC,CAAC;QAC3F;QAEA,+BAA+B;QAC/B,QAAQ,CAAA,GAAA,gIAAA,CAAA,kBAAe,AAAD,EAAE,OAAO;YAC7B,SAAS;YACT,YAAY;YACZ,GAAG,gBAAgB;QACrB;QAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM;QAErC,IAAI,OAAO;YACT,OAAO;gBAAE,MAAM;gBAAM;YAAM;QAC7B;QAEA,MAAM,EAAE,OAAO,CAAC,EAAE,WAAW,EAAE,EAAE,GAAG;QACpC,MAAM,aAAa,KAAK,IAAI,CAAC,CAAC,SAAS,CAAC,IAAI;QAE5C,OAAO;YACL,MAAM;gBACJ,MAAM,QAAQ,EAAE;gBAChB,MAAM;oBACJ,OAAO,SAAS;oBAChB;oBACA;oBACA,UAAU,OAAO;oBACjB,aAAa;gBACf;YACF;YACA,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 2232, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/data-access/profiles.ts"],"sourcesContent":["/**\n * Profiles Data Access Layer\n * \n * This module provides CRUD operations for user profiles, subscription management,\n * and usage tracking.\n */\n\nimport type {\n  Profile,\n  CreateProfile,\n  UpdateProfile,\n  ProfileWithUsage,\n  SubscriptionPlan,\n  SubscriptionStatus,\n  UserPreferences,\n  DatabaseResult\n} from '@/lib/types/database';\n\nimport {\n  getSupabaseClient,\n  withErrorHandling,\n  validateRequiredFields,\n  isValidUUID,\n  isValidEmail,\n  requireAuth,\n  getCurrentUserId\n} from './base';\n\n// =============================================================================\n// PROFILE CRUD OPERATIONS\n// =============================================================================\n\n/**\n * Get current user's profile\n */\nexport async function getCurrentProfile(): Promise<DatabaseResult<Profile>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', userId)\n      .single();\n  });\n}\n\n/**\n * Get profile by ID (admin only or current user)\n */\nexport async function getProfileById(profileId: string): Promise<DatabaseResult<Profile>> {\n  if (!isValidUUID(profileId)) {\n    return {\n      success: false,\n      error: 'Invalid profile ID format'\n    };\n  }\n\n  const currentUserId = await requireAuth();\n  \n  // Only allow access to own profile for now (can be extended for admin access)\n  if (profileId !== currentUserId) {\n    return {\n      success: false,\n      error: 'Access denied: can only access your own profile'\n    };\n  }\n\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', profileId)\n      .single();\n  });\n}\n\n/**\n * Create a new profile (typically called during user registration)\n */\nexport async function createProfile(\n  profileData: CreateProfile\n): Promise<DatabaseResult<Profile>> {\n  // Validate required fields\n  const validationErrors = validateRequiredFields(profileData, ['id', 'email']);\n  if (validationErrors.length > 0) {\n    return {\n      success: false,\n      error: 'Validation failed',\n      validation_errors: validationErrors\n    };\n  }\n\n  // Validate UUID format\n  if (!isValidUUID(profileData.id)) {\n    return {\n      success: false,\n      error: 'Invalid profile ID format'\n    };\n  }\n\n  // Validate email format\n  if (!isValidEmail(profileData.email)) {\n    return {\n      success: false,\n      error: 'Invalid email format'\n    };\n  }\n\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .insert(profileData)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Update current user's profile\n */\nexport async function updateCurrentProfile(\n  updates: Partial<Omit<UpdateProfile, 'id'>>\n): Promise<DatabaseResult<Profile>> {\n  const userId = await requireAuth();\n\n  // Validate email if provided\n  if (updates.email && !isValidEmail(updates.email)) {\n    return {\n      success: false,\n      error: 'Invalid email format'\n    };\n  }\n\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Update profile by ID (admin only or current user)\n */\nexport async function updateProfile(\n  profileId: string,\n  updates: Partial<Omit<UpdateProfile, 'id'>>\n): Promise<DatabaseResult<Profile>> {\n  if (!isValidUUID(profileId)) {\n    return {\n      success: false,\n      error: 'Invalid profile ID format'\n    };\n  }\n\n  const currentUserId = await requireAuth();\n  \n  // Only allow access to own profile for now\n  if (profileId !== currentUserId) {\n    return {\n      success: false,\n      error: 'Access denied: can only update your own profile'\n    };\n  }\n\n  // Validate email if provided\n  if (updates.email && !isValidEmail(updates.email)) {\n    return {\n      success: false,\n      error: 'Invalid email format'\n    };\n  }\n\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', profileId)\n      .select()\n      .single();\n  });\n}\n\n// =============================================================================\n// USER PREFERENCES MANAGEMENT\n// =============================================================================\n\n/**\n * Get current user's preferences\n */\nexport async function getUserPreferences(): Promise<DatabaseResult<UserPreferences>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('preferences')\n      .eq('id', userId)\n      .single();\n\n    if (error) {\n      return { data: null, error };\n    }\n\n    return { data: data.preferences || {}, error: null };\n  });\n}\n\n/**\n * Update user preferences\n */\nexport async function updateUserPreferences(\n  preferences: Partial<UserPreferences>\n): Promise<DatabaseResult<UserPreferences>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    // First get current preferences\n    const { data: currentProfile, error: fetchError } = await supabase\n      .from('profiles')\n      .select('preferences')\n      .eq('id', userId)\n      .single();\n\n    if (fetchError) {\n      return { data: null, error: fetchError };\n    }\n\n    // Merge with existing preferences\n    const currentPrefs = currentProfile.preferences || {};\n    const updatedPrefs = { ...currentPrefs, ...preferences };\n\n    // Update profile with merged preferences\n    const { data, error } = await supabase\n      .from('profiles')\n      .update({\n        preferences: updatedPrefs,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId)\n      .select('preferences')\n      .single();\n\n    if (error) {\n      return { data: null, error };\n    }\n\n    return { data: data.preferences, error: null };\n  });\n}\n\n// =============================================================================\n// SUBSCRIPTION MANAGEMENT\n// =============================================================================\n\n/**\n * Update user subscription\n */\nexport async function updateSubscription(\n  plan: SubscriptionPlan,\n  status: SubscriptionStatus,\n  trialEndsAt?: string,\n  subscriptionEndsAt?: string\n): Promise<DatabaseResult<Profile>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  // Set limits based on plan\n  const planLimits = {\n    free: { campaigns: 3, leads: 100 },\n    starter: { campaigns: 10, leads: 1000 },\n    pro: { campaigns: 50, leads: 10000 },\n    enterprise: { campaigns: -1, leads: -1 } // -1 means unlimited\n  };\n\n  const limits = planLimits[plan];\n\n  const updates: any = {\n    subscription_plan: plan,\n    subscription_status: status,\n    monthly_campaign_limit: limits.campaigns,\n    monthly_leads_limit: limits.leads,\n    updated_at: new Date().toISOString()\n  };\n\n  if (trialEndsAt) {\n    updates.trial_ends_at = trialEndsAt;\n  }\n\n  if (subscriptionEndsAt) {\n    updates.subscription_ends_at = subscriptionEndsAt;\n  }\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .update(updates)\n      .eq('id', userId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Reset monthly usage counters (typically called at the start of each month)\n */\nexport async function resetMonthlyUsage(profileId?: string): Promise<DatabaseResult<Profile>> {\n  const userId = profileId || await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .update({\n        monthly_campaigns_used: 0,\n        monthly_leads_captured: 0,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Increment campaign usage\n */\nexport async function incrementCampaignUsage(): Promise<DatabaseResult<Profile>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  // First get current usage\n  const { data: profile, error: fetchError } = await supabase\n    .from('profiles')\n    .select('monthly_campaigns_used, monthly_campaign_limit')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    return {\n      success: false,\n      error: fetchError.message || 'Failed to fetch profile'\n    };\n  }\n\n  // Check if limit would be exceeded\n  const currentUsage = profile.monthly_campaigns_used || 0;\n  const limit = profile.monthly_campaign_limit || 0;\n\n  if (limit > 0 && currentUsage >= limit) {\n    return {\n      success: false,\n      error: 'Monthly campaign limit exceeded',\n      validation_errors: [{\n        field: 'monthly_campaigns_used',\n        message: `You have reached your monthly limit of ${limit} campaigns`,\n        code: 'LIMIT_EXCEEDED',\n        value: currentUsage\n      }]\n    };\n  }\n\n  // Increment usage\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .update({\n        monthly_campaigns_used: currentUsage + 1,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Increment leads usage\n */\nexport async function incrementLeadsUsage(count = 1): Promise<DatabaseResult<Profile>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  // First get current usage\n  const { data: profile, error: fetchError } = await supabase\n    .from('profiles')\n    .select('monthly_leads_captured, monthly_leads_limit')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    return {\n      success: false,\n      error: fetchError.message || 'Failed to fetch profile'\n    };\n  }\n\n  // Check if limit would be exceeded\n  const currentUsage = profile.monthly_leads_captured || 0;\n  const limit = profile.monthly_leads_limit || 0;\n\n  if (limit > 0 && (currentUsage + count) > limit) {\n    return {\n      success: false,\n      error: 'Monthly leads limit exceeded',\n      validation_errors: [{\n        field: 'monthly_leads_captured',\n        message: `Adding ${count} lead(s) would exceed your monthly limit of ${limit} leads`,\n        code: 'LIMIT_EXCEEDED',\n        value: currentUsage\n      }]\n    };\n  }\n\n  // Increment usage\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .update({\n        monthly_leads_captured: currentUsage + count,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId)\n      .select()\n      .single();\n  });\n}\n\n// =============================================================================\n// PROFILE ANALYTICS AND UTILITIES\n// =============================================================================\n\n/**\n * Get profile with usage statistics\n */\nexport async function getCurrentProfileWithUsage(): Promise<DatabaseResult<ProfileWithUsage>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    // Get profile\n    const { data: profile, error: profileError } = await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', userId)\n      .single();\n\n    if (profileError || !profile) {\n      return { data: null, error: profileError };\n    }\n\n    // Get total campaigns count\n    const { count: totalCampaigns } = await supabase\n      .from('campaigns')\n      .select('*', { count: 'exact', head: true })\n      .eq('user_id', userId);\n\n    // Get user's campaign IDs first\n    const { data: userCampaigns } = await supabase\n      .from('campaigns')\n      .select('id')\n      .eq('user_id', userId);\n\n    // Get total leads count for user's campaigns\n    let totalLeads = 0;\n    if (userCampaigns && userCampaigns.length > 0) {\n      const campaignIds = userCampaigns.map(c => c.id);\n      const { count: leadsCount } = await supabase\n        .from('leads')\n        .select('*', { count: 'exact', head: true })\n        .in('campaign_id', campaignIds);\n      totalLeads = leadsCount || 0;\n    }\n\n    // Calculate usage percentages\n    const campaignUsagePercentage = profile.monthly_campaign_limit > 0 \n      ? Math.round((profile.monthly_campaigns_used / profile.monthly_campaign_limit) * 100)\n      : 0;\n\n    const leadsUsagePercentage = profile.monthly_leads_limit > 0 \n      ? Math.round((profile.monthly_leads_captured / profile.monthly_leads_limit) * 100)\n      : 0;\n\n    const profileWithUsage: ProfileWithUsage = {\n      ...profile,\n      total_campaigns: totalCampaigns || 0,\n      total_leads: totalLeads,\n      current_month_campaigns: profile.monthly_campaigns_used,\n      current_month_leads: profile.monthly_leads_captured,\n      usage_percentage: {\n        campaigns: campaignUsagePercentage,\n        leads: leadsUsagePercentage\n      }\n    };\n\n    return { data: profileWithUsage, error: null };\n  });\n}\n\n/**\n * Check if user can create a new campaign\n */\nexport async function canCreateCampaign(): Promise<DatabaseResult<boolean>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const { data: profile, error } = await supabase\n      .from('profiles')\n      .select('monthly_campaigns_used, monthly_campaign_limit')\n      .eq('id', userId)\n      .single();\n\n    if (error) {\n      return { data: null, error };\n    }\n\n    const canCreate = profile.monthly_campaign_limit <= 0 || \n      profile.monthly_campaigns_used < profile.monthly_campaign_limit;\n\n    return { data: canCreate, error: null };\n  });\n}\n\n/**\n * Check if user can capture more leads\n */\nexport async function canCaptureLeads(count = 1): Promise<DatabaseResult<boolean>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const { data: profile, error } = await supabase\n      .from('profiles')\n      .select('monthly_leads_captured, monthly_leads_limit')\n      .eq('id', userId)\n      .single();\n\n    if (error) {\n      return { data: null, error };\n    }\n\n    const canCapture = profile.monthly_leads_limit <= 0 || \n      (profile.monthly_leads_captured + count) <= profile.monthly_leads_limit;\n\n    return { data: canCapture, error: null };\n  });\n}\n\n/**\n * Mark onboarding as completed\n */\nexport async function completeOnboarding(): Promise<DatabaseResult<Profile>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .update({\n        onboarding_completed: true,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId)\n      .select()\n      .single();\n  });\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2641, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/data-access/index.ts"],"sourcesContent":["/**\n * Data Access Layer - Main Export\n * \n * This module serves as the main entry point for all data access operations\n * in the Flint Lead Magnet tool. It re-exports functions from individual modules\n * for easy importing throughout the application.\n */\n\nimport type {\n  Campaign,\n  Lead,\n  CreateCampaign,\n  CreateLead,\n  DatabaseResult\n} from '@/lib/types/database';\n\n// =============================================================================\n// BASE UTILITIES\n// =============================================================================\nexport {\n  getSupabaseClient,\n  withErrorHandling,\n  createApiResponse,\n  validateRequiredFields,\n  isValidUUID,\n  isValidEmail,\n  requireAuth,\n  getCurrentUserId,\n  applyPagination,\n  DataAccessError,\n  type PaginationParams,\n  type ApiResponse,\n  type DatabaseResult,\n  type ValidationError\n} from './base';\n\n// =============================================================================\n// CAMPAIGN OPERATIONS\n// =============================================================================\nexport {\n  // Campaign CRUD\n  createCampaign,\n  getCampaignById,\n  getCampaigns,\n  getCampaignsWithRelations,\n  updateCampaign,\n  deleteCampaign,\n  publishCampaign,\n  unpublishCampaign,\n  generateCampaignSlug,\n  validateCampaignForPublishing,\n  checkUrlAvailability,\n\n  // Campaign Activation Controls\n  activateCampaign,\n  deactivateCampaign,\n  getCampaignActivationStatus,\n\n  // Section CRUD\n  createSection,\n  getSectionById,\n  getCampaignSections,\n  updateSection,\n  deleteSection,\n  reorderSections,\n\n  // Section Options CRUD\n  createSectionOption,\n  updateSectionOption,\n  deleteSectionOption\n} from './campaigns';\n\n// =============================================================================\n// LEAD OPERATIONS\n// =============================================================================\nexport {\n  // Lead CRUD\n  createLead,\n  getLeadById,\n  getLeads,\n  getCampaignLeads,\n  updateLead,\n  completeLead,\n  deleteLead,\n\n  // Lead Response CRUD\n  createLeadResponse,\n  upsertLeadResponse,\n  getLeadResponses,\n  getSectionResponses,\n  deleteLeadResponse,\n\n  // Lead Analytics\n  getCampaignLeadStats,\n  searchLeads\n} from './leads';\n\n// =============================================================================\n// PROFILE OPERATIONS\n// =============================================================================\nexport {\n  // Profile CRUD\n  getCurrentProfile,\n  getProfileById,\n  createProfile,\n  updateCurrentProfile,\n  updateProfile,\n\n  // User Preferences\n  getUserPreferences,\n  updateUserPreferences,\n\n  // Subscription Management\n  updateSubscription,\n  resetMonthlyUsage,\n  incrementCampaignUsage,\n  incrementLeadsUsage,\n\n  // Profile Analytics\n  getCurrentProfileWithUsage,\n  canCreateCampaign,\n  canCaptureLeads,\n  completeOnboarding\n} from './profiles';\n\n// =============================================================================\n// TYPE RE-EXPORTS\n// =============================================================================\nexport type {\n  // Database Types\n  Campaign,\n  Section,\n  SectionOption,\n  Lead,\n  LeadResponse,\n  Profile,\n  CampaignVariable,\n  LeadVariableValue,\n  CampaignAnalytics,\n\n  // Create Types\n  CreateCampaign,\n  CreateSection,\n  CreateSectionOption,\n  CreateLead,\n  CreateLeadResponse,\n  CreateProfile,\n  CreateCampaignVariable,\n  CreateLeadVariableValue,\n  CreateCampaignAnalytics,\n\n  // Update Types\n  UpdateCampaign,\n  UpdateSection,\n  UpdateSectionOption,\n  UpdateLead,\n  UpdateLeadResponse,\n  UpdateProfile,\n  UpdateCampaignVariable,\n  UpdateLeadVariableValue,\n  UpdateCampaignAnalytics,\n\n  // Extended Types\n  CampaignWithRelations,\n  SectionWithOptions,\n  LeadWithRelations,\n  LeadResponseWithRelations,\n  ProfileWithUsage,\n\n  // Configuration Types\n  SectionConfiguration,\n  TextQuestionConfiguration,\n  MultipleChoiceConfiguration,\n  SliderConfiguration,\n  InfoConfiguration,\n  CaptureConfiguration,\n  LogicConfiguration,\n  OutputConfiguration,\n  VariableConfiguration,\n  CampaignSettings,\n  UserPreferences,\n\n  // Response Types\n  PaginatedResponse,\n\n  // Enum Types\n  CampaignStatus,\n  SectionType,\n  ResponseType,\n  VariableType,\n  VariableSource,\n  SubscriptionPlan,\n  SubscriptionStatus,\n\n  // Utility Types\n  UUID,\n  Timestamp,\n  JSONValue\n} from '../types/database';\n\n// =============================================================================\n// CONVENIENCE FUNCTIONS\n// =============================================================================\n\n/**\n * Create a new campaign with initial setup\n */\nexport async function createCampaignWithDefaults(\n  name: string,\n  description?: string\n): Promise<DatabaseResult<Campaign>> {\n  const { createCampaign } = await import('./campaigns');\n  \n  // Cast the data to CreateCampaign since we know createCampaign will handle user_id\n  const campaignData = {\n    name,\n    description: description || '',\n    status: 'draft' as const,\n    settings: {\n      theme: {\n        primary_color: '#3B82F6',\n        secondary_color: '#10B981',\n        background_color: '#FFFFFF',\n        font_family: 'Inter, sans-serif'\n      },\n      branding: {\n        show_powered_by: true\n      },\n      completion: {\n        email_notifications: true\n      }\n    },\n    published_at: null,\n    published_url: null\n  } as CreateCampaign;\n  \n  return createCampaign(campaignData);\n}\n\n/**\n * Create a lead and increment usage counter\n */\nexport async function createLeadWithUsageTracking(\n  leadData: CreateLead\n): Promise<DatabaseResult<Lead>> {\n  const { createLead } = await import('./leads');\n  const { incrementLeadsUsage, canCaptureLeads } = await import('./profiles');\n\n  // Check if user can capture more leads\n  const canCapture = await canCaptureLeads(1);\n  if (!canCapture.success) {\n    return canCapture as any;\n  }\n\n  if (!canCapture.data) {\n    return {\n      success: false,\n      error: 'Monthly leads limit reached'\n    };\n  }\n\n  // Create the lead\n  const leadResult = await createLead(leadData);\n  if (!leadResult.success) {\n    return leadResult;\n  }\n\n  // Increment usage counter\n  await incrementLeadsUsage(1);\n\n  return leadResult;\n}\n\n/**\n * Publish a campaign and increment usage counter\n */\nexport async function publishCampaignWithUsageTracking(\n  campaignId: string,\n  publishedUrl?: string\n): Promise<DatabaseResult<Campaign>> {\n  const { publishCampaign } = await import('./campaigns');\n\n  // Note: For publishing, we don't check campaign limits since the campaign already exists\n  // We only check limits during campaign creation\n\n  // Publish the campaign\n  const publishResult = await publishCampaign(campaignId, publishedUrl);\n  if (!publishResult.success) {\n    return publishResult;\n  }\n\n  return publishResult;\n}\n\n/**\n * Create a campaign and increment usage counter\n */\nexport async function createCampaignWithUsageTracking(\n  campaignData: CreateCampaign\n): Promise<DatabaseResult<Campaign>> {\n  const { createCampaign } = await import('./campaigns');\n  const { incrementCampaignUsage, canCreateCampaign } = await import('./profiles');\n\n  // Check if user can create more campaigns\n  const canCreate = await canCreateCampaign();\n  if (!canCreate.success) {\n    return canCreate as any;\n  }\n\n  if (!canCreate.data) {\n    return {\n      success: false,\n      error: 'Monthly campaign limit reached'\n    };\n  }\n\n  // Create the campaign\n  const campaignResult = await createCampaign(campaignData);\n  if (!campaignResult.success) {\n    return campaignResult;\n  }\n\n  // Increment usage counter\n  await incrementCampaignUsage();\n\n  return campaignResult;\n}\n\n/**\n * Create a lead from capture form data\n */\nexport async function createLeadFromCapture(\n  campaignId: string,\n  captureData: {\n    name?: string;\n    email?: string;\n    phone?: string;\n    gdprConsent?: boolean;\n    marketingConsent?: boolean;\n  },\n  metadata?: {\n    ip_address?: string;\n    user_agent?: string;\n    referrer?: string;\n    utm_source?: string;\n    utm_medium?: string;\n    utm_campaign?: string;\n    utm_term?: string;\n    utm_content?: string;\n  }\n): Promise<DatabaseResult<Lead>> {\n  // Validate required fields\n  if (!captureData.email) {\n    return {\n      success: false,\n      error: 'Email is required',\n      validation_errors: [{\n        field: 'email',\n        message: 'Email address is required',\n        code: 'REQUIRED_FIELD',\n        value: captureData.email\n      }]\n    };\n  }\n\n  // Prepare lead data\n  const leadData: CreateLead = {\n    campaign_id: campaignId,\n    name: captureData.name || null,\n    email: captureData.email,\n    phone: captureData.phone || null,\n    ip_address: metadata?.ip_address || null,\n    user_agent: metadata?.user_agent || null,\n    referrer: metadata?.referrer || null,\n    utm_source: metadata?.utm_source || null,\n    utm_medium: metadata?.utm_medium || null,\n    utm_campaign: metadata?.utm_campaign || null,\n    utm_term: metadata?.utm_term || null,\n    utm_content: metadata?.utm_content || null,\n    metadata: {\n      capture_form: true,\n      gdpr_consent: captureData.gdprConsent || false,\n      marketing_consent: captureData.marketingConsent || false,\n      capture_timestamp: new Date().toISOString()\n    },\n    completed_at: null // Will be set when the full campaign is completed\n  };\n\n  // Create lead with usage tracking\n  return createLeadWithUsageTracking(leadData);\n} "],"names":[],"mappings":"AAAA;;;;;;CAMC;;;;;;;AAUD,gFAAgF;AAChF,iBAAiB;AACjB,gFAAgF;AAChF;AAiBA,gFAAgF;AAChF,sBAAsB;AACtB,gFAAgF;AAChF;AAiCA,gFAAgF;AAChF,kBAAkB;AAClB,gFAAgF;AAChF;AAsBA,gFAAgF;AAChF,qBAAqB;AACrB,gFAAgF;AAChF;;;;;AA2GO,eAAe,2BACpB,IAAY,EACZ,WAAoB;IAEpB,MAAM,EAAE,cAAc,EAAE,GAAG;IAE3B,mFAAmF;IACnF,MAAM,eAAe;QACnB;QACA,aAAa,eAAe;QAC5B,QAAQ;QACR,UAAU;YACR,OAAO;gBACL,eAAe;gBACf,iBAAiB;gBACjB,kBAAkB;gBAClB,aAAa;YACf;YACA,UAAU;gBACR,iBAAiB;YACnB;YACA,YAAY;gBACV,qBAAqB;YACvB;QACF;QACA,cAAc;QACd,eAAe;IACjB;IAEA,OAAO,eAAe;AACxB;AAKO,eAAe,4BACpB,QAAoB;IAEpB,MAAM,EAAE,UAAU,EAAE,GAAG;IACvB,MAAM,EAAE,mBAAmB,EAAE,eAAe,EAAE,GAAG;IAEjD,uCAAuC;IACvC,MAAM,aAAa,MAAM,gBAAgB;IACzC,IAAI,CAAC,WAAW,OAAO,EAAE;QACvB,OAAO;IACT;IAEA,IAAI,CAAC,WAAW,IAAI,EAAE;QACpB,OAAO;YACL,SAAS;YACT,OAAO;QACT;IACF;IAEA,kBAAkB;IAClB,MAAM,aAAa,MAAM,WAAW;IACpC,IAAI,CAAC,WAAW,OAAO,EAAE;QACvB,OAAO;IACT;IAEA,0BAA0B;IAC1B,MAAM,oBAAoB;IAE1B,OAAO;AACT;AAKO,eAAe,iCACpB,UAAkB,EAClB,YAAqB;IAErB,MAAM,EAAE,eAAe,EAAE,GAAG;IAE5B,yFAAyF;IACzF,gDAAgD;IAEhD,uBAAuB;IACvB,MAAM,gBAAgB,MAAM,gBAAgB,YAAY;IACxD,IAAI,CAAC,cAAc,OAAO,EAAE;QAC1B,OAAO;IACT;IAEA,OAAO;AACT;AAKO,eAAe,gCACpB,YAA4B;IAE5B,MAAM,EAAE,cAAc,EAAE,GAAG;IAC3B,MAAM,EAAE,sBAAsB,EAAE,iBAAiB,EAAE,GAAG;IAEtD,0CAA0C;IAC1C,MAAM,YAAY,MAAM;IACxB,IAAI,CAAC,UAAU,OAAO,EAAE;QACtB,OAAO;IACT;IAEA,IAAI,CAAC,UAAU,IAAI,EAAE;QACnB,OAAO;YACL,SAAS;YACT,OAAO;QACT;IACF;IAEA,sBAAsB;IACtB,MAAM,iBAAiB,MAAM,eAAe;IAC5C,IAAI,CAAC,eAAe,OAAO,EAAE;QAC3B,OAAO;IACT;IAEA,0BAA0B;IAC1B,MAAM;IAEN,OAAO;AACT;AAKO,eAAe,sBACpB,UAAkB,EAClB,WAMC,EACD,QASC;IAED,2BAA2B;IAC3B,IAAI,CAAC,YAAY,KAAK,EAAE;QACtB,OAAO;YACL,SAAS;YACT,OAAO;YACP,mBAAmB;gBAAC;oBAClB,OAAO;oBACP,SAAS;oBACT,MAAM;oBACN,OAAO,YAAY,KAAK;gBAC1B;aAAE;QACJ;IACF;IAEA,oBAAoB;IACpB,MAAM,WAAuB;QAC3B,aAAa;QACb,MAAM,YAAY,IAAI,IAAI;QAC1B,OAAO,YAAY,KAAK;QACxB,OAAO,YAAY,KAAK,IAAI;QAC5B,YAAY,UAAU,cAAc;QACpC,YAAY,UAAU,cAAc;QACpC,UAAU,UAAU,YAAY;QAChC,YAAY,UAAU,cAAc;QACpC,YAAY,UAAU,cAAc;QACpC,cAAc,UAAU,gBAAgB;QACxC,UAAU,UAAU,YAAY;QAChC,aAAa,UAAU,eAAe;QACtC,UAAU;YACR,cAAc;YACd,cAAc,YAAY,WAAW,IAAI;YACzC,mBAAmB,YAAY,gBAAgB,IAAI;YACnD,mBAAmB,IAAI,OAAO,WAAW;QAC3C;QACA,cAAc,KAAK,kDAAkD;IACvE;IAEA,kCAAkC;IAClC,OAAO,4BAA4B;AACrC","debugId":null}},
    {"offset": {"line": 2819, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/app/dashboard/campaigns/create/page.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\nimport { UserProfile } from '@/components/ui/user-profile'\nimport { useAuth } from '@/lib/auth-context'\nimport { createCampaignWithUsageTracking, getCurrentProfile } from '@/lib/data-access'\nimport { Profile, CampaignSettings, CreateCampaign } from '@/lib/types/database'\nimport { \n  ArrowLeft, \n  ArrowRight, \n  Check, \n  Settings, \n  Palette, \n  Building,\n  Save,\n  AlertCircle\n} from 'lucide-react'\n\ninterface CampaignFormData {\n  name: string\n  description: string\n  settings: CampaignSettings\n}\n\ntype Step = 'basic' | 'theme' | 'settings' | 'review'\n\nconst steps: { id: Step; title: string; description: string }[] = [\n  {\n    id: 'basic',\n    title: 'Basic Information',\n    description: 'Set up your campaign name and description'\n  },\n  {\n    id: 'theme',\n    title: 'Theme & Branding',\n    description: 'Customize the look and feel of your campaign'\n  },\n  {\n    id: 'settings',\n    title: 'Campaign Settings',\n    description: 'Configure completion and notification settings'\n  },\n  {\n    id: 'review',\n    title: 'Review & Create',\n    description: 'Review your campaign settings and create'\n  }\n]\n\nexport default function CreateCampaignPage() {\n  const { user, loading } = useAuth()\n  const router = useRouter()\n  const [currentStep, setCurrentStep] = useState<Step>('basic')\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [profile, setProfile] = useState<Profile | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  const [formData, setFormData] = useState<CampaignFormData>({\n    name: '',\n    description: '',\n    settings: {\n      theme: {\n        primary_color: '#3B82F6',\n        secondary_color: '#10B981',\n        background_color: '#FFFFFF',\n        font_family: 'Inter, sans-serif'\n      },\n      branding: {\n        show_powered_by: true\n      },\n      completion: {\n        email_notifications: true\n      }\n    }\n  })\n\n  useEffect(() => {\n    if (!loading && !user) {\n      router.push('/auth/login')\n    }\n  }, [user, loading, router])\n\n  useEffect(() => {\n    if (user) {\n      loadProfile()\n    }\n  }, [user])\n\n  const loadProfile = async () => {\n    try {\n      const result = await getCurrentProfile()\n      if (result.success && result.data) {\n        setProfile(result.data)\n        // Check if user can create campaigns\n        if (result.data.monthly_campaigns_used >= result.data.monthly_campaign_limit) {\n          setError('You have reached your monthly campaign limit. Please upgrade your plan to create more campaigns.')\n        }\n      }\n    } catch (err) {\n      console.error('Error loading profile:', err)\n    }\n  }\n\n  const updateFormData = (updates: Partial<CampaignFormData>) => {\n    setFormData(prev => ({ ...prev, ...updates }))\n  }\n\n  const updateSettings = (updates: Partial<CampaignSettings>) => {\n    setFormData(prev => ({\n      ...prev,\n      settings: { ...prev.settings, ...updates }\n    }))\n  }\n\n  const getCurrentStepIndex = () => {\n    return steps.findIndex(step => step.id === currentStep)\n  }\n\n  const goToNextStep = () => {\n    const currentIndex = getCurrentStepIndex()\n    if (currentIndex < steps.length - 1) {\n      setCurrentStep(steps[currentIndex + 1].id)\n    }\n  }\n\n  const goToPreviousStep = () => {\n    const currentIndex = getCurrentStepIndex()\n    if (currentIndex > 0) {\n      setCurrentStep(steps[currentIndex - 1].id)\n    }\n  }\n\n  const canProceedToNextStep = () => {\n    switch (currentStep) {\n      case 'basic':\n        return formData.name.trim().length > 0\n      case 'theme':\n      case 'settings':\n        return true\n      case 'review':\n        return false\n      default:\n        return false\n    }\n  }\n\n  const handleSubmit = async () => {\n    if (!profile) return\n\n    if (profile.monthly_campaigns_used >= profile.monthly_campaign_limit) {\n      setError('You have reached your monthly campaign limit.')\n      return\n    }\n\n    try {\n      setIsSubmitting(true)\n      setError(null)\n\n      const result = await createCampaignWithUsageTracking({\n        name: formData.name,\n        description: formData.description,\n        status: 'draft',\n        settings: formData.settings,\n        published_at: null,\n        published_url: null,\n        is_active: true\n      } as CreateCampaign)\n\n      if (!result.success) {\n        throw new Error(result.error || 'Failed to create campaign')\n      }\n\n      // Redirect to the campaign builder\n      router.push(`/dashboard/campaigns/${result.data?.id}/builder`)\n    } catch (err) {\n      console.error('Error creating campaign:', err)\n      setError(err instanceof Error ? err.message : 'An error occurred')\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 'basic':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Campaign Name *</Label>\n              <Input\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => updateFormData({ name: e.target.value })}\n                placeholder=\"Enter your campaign name\"\n                className=\"text-lg\"\n              />\n              <p className=\"text-sm text-gray-500\">\n                Give your lead magnet campaign a clear, descriptive name\n              </p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => updateFormData({ description: e.target.value })}\n                placeholder=\"Describe what your campaign is about (optional)\"\n                rows={4}\n              />\n              <p className=\"text-sm text-gray-500\">\n                Help your team understand the purpose of this campaign\n              </p>\n            </div>\n          </div>\n        )\n\n      case 'theme':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"primary-color\">Primary Color</Label>\n                <div className=\"flex items-center space-x-3\">\n                  <input\n                    type=\"color\"\n                    id=\"primary-color\"\n                    value={formData.settings.theme?.primary_color || '#3B82F6'}\n                    onChange={(e) => updateSettings({\n                      theme: {\n                        ...formData.settings.theme,\n                        primary_color: e.target.value\n                      }\n                    })}\n                    className=\"w-12 h-12 rounded border border-gray-300\"\n                  />\n                  <Input\n                    value={formData.settings.theme?.primary_color || '#3B82F6'}\n                    onChange={(e) => updateSettings({\n                      theme: {\n                        ...formData.settings.theme,\n                        primary_color: e.target.value\n                      }\n                    })}\n                    placeholder=\"#3B82F6\"\n                    className=\"flex-1\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"secondary-color\">Secondary Color</Label>\n                <div className=\"flex items-center space-x-3\">\n                  <input\n                    type=\"color\"\n                    id=\"secondary-color\"\n                    value={formData.settings.theme?.secondary_color || '#10B981'}\n                    onChange={(e) => updateSettings({\n                      theme: {\n                        ...formData.settings.theme,\n                        secondary_color: e.target.value\n                      }\n                    })}\n                    className=\"w-12 h-12 rounded border border-gray-300\"\n                  />\n                  <Input\n                    value={formData.settings.theme?.secondary_color || '#10B981'}\n                    onChange={(e) => updateSettings({\n                      theme: {\n                        ...formData.settings.theme,\n                        secondary_color: e.target.value\n                      }\n                    })}\n                    placeholder=\"#10B981\"\n                    className=\"flex-1\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"background-color\">Background Color</Label>\n                <div className=\"flex items-center space-x-3\">\n                  <input\n                    type=\"color\"\n                    id=\"background-color\"\n                    value={formData.settings.theme?.background_color || '#FFFFFF'}\n                    onChange={(e) => updateSettings({\n                      theme: {\n                        ...formData.settings.theme,\n                        background_color: e.target.value\n                      }\n                    })}\n                    className=\"w-12 h-12 rounded border border-gray-300\"\n                  />\n                  <Input\n                    value={formData.settings.theme?.background_color || '#FFFFFF'}\n                    onChange={(e) => updateSettings({\n                      theme: {\n                        ...formData.settings.theme,\n                        background_color: e.target.value\n                      }\n                    })}\n                    placeholder=\"#FFFFFF\"\n                    className=\"flex-1\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"font-family\">Font Family</Label>\n                <select\n                  id=\"font-family\"\n                  value={formData.settings.theme?.font_family || 'Inter, sans-serif'}\n                  onChange={(e: React.ChangeEvent<HTMLSelectElement>) => updateSettings({\n                    theme: {\n                      ...formData.settings.theme,\n                      font_family: e.target.value\n                    }\n                  })}\n                  className=\"w-full p-2 border border-gray-300 rounded-md\"\n                >\n                  <option value=\"Inter, sans-serif\">Inter</option>\n                  <option value=\"system-ui, sans-serif\">System UI</option>\n                  <option value=\"Georgia, serif\">Georgia</option>\n                  <option value=\"Times New Roman, serif\">Times New Roman</option>\n                  <option value=\"Arial, sans-serif\">Arial</option>\n                  <option value=\"Helvetica, sans-serif\">Helvetica</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">Branding Options</h3>\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"show-powered-by\"\n                  checked={formData.settings.branding?.show_powered_by ?? true}\n                  onChange={(e) => updateSettings({\n                    branding: {\n                      ...formData.settings.branding,\n                      show_powered_by: e.target.checked\n                    }\n                  })}\n                  className=\"rounded\"\n                />\n                <Label htmlFor=\"show-powered-by\">Show \"Powered by Flint\" attribution</Label>\n              </div>\n            </div>\n          </div>\n        )\n\n      case 'settings':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">Completion Settings</h3>\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"email-notifications\"\n                  checked={formData.settings.completion?.email_notifications ?? true}\n                  onChange={(e) => updateSettings({\n                    completion: {\n                      ...formData.settings.completion,\n                      email_notifications: e.target.checked\n                    }\n                  })}\n                  className=\"rounded\"\n                />\n                <Label htmlFor=\"email-notifications\">Send email notifications when leads complete the campaign</Label>\n              </div>\n            </div>\n          </div>\n        )\n\n      case 'review':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Campaign Details</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <div>\n                    <span className=\"font-medium\">Name:</span> {formData.name}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Description:</span> {formData.description || 'No description'}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Theme Preview</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div \n                        className=\"w-6 h-6 rounded border\"\n                        style={{ backgroundColor: formData.settings.theme?.primary_color }}\n                      ></div>\n                      <span className=\"text-sm\">Primary: {formData.settings.theme?.primary_color}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div \n                        className=\"w-6 h-6 rounded border\"\n                        style={{ backgroundColor: formData.settings.theme?.secondary_color }}\n                      ></div>\n                      <span className=\"text-sm\">Secondary: {formData.settings.theme?.secondary_color}</span>\n                    </div>\n                    <div className=\"text-sm\">\n                      <span className=\"font-medium\">Font:</span> {formData.settings.theme?.font_family}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Settings Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-1 text-sm\">\n                  <li>\n                    <Check className=\"h-4 w-4 inline mr-2 text-green-600\" />\n                    {formData.settings.branding?.show_powered_by ? 'Show' : 'Hide'} Flint attribution\n                  </li>\n                  <li>\n                    <Check className=\"h-4 w-4 inline mr-2 text-green-600\" />\n                    Email notifications: {formData.settings.completion?.email_notifications ? 'Enabled' : 'Disabled'}\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        )\n\n      default:\n        return null\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n      </div>\n    )\n  }\n\n  if (!user) {\n    return null\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-6\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => router.push('/dashboard/campaigns')}\n                className=\"text-gray-600 hover:text-gray-900\"\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Campaigns\n              </Button>\n              <h1 className=\"text-2xl font-bold text-gray-900\">\n                Create New Campaign\n              </h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <UserProfile variant=\"compact\" />\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-4xl mx-auto py-6 sm:px-6 lg:px-8\">\n        <div className=\"px-4 py-6 sm:px-0\">\n          {/* Step Indicator */}\n          <div className=\"mb-8\">\n            <nav aria-label=\"Progress\">\n              <ol className=\"flex items-center\">\n                {steps.map((step, stepIdx) => (\n                  <li key={step.id} className={`relative ${stepIdx !== steps.length - 1 ? 'pr-8 sm:pr-20' : ''}`}>\n                    <div className=\"flex items-center\">\n                      <div className={`\n                        flex h-8 w-8 items-center justify-center rounded-full border-2 \n                        ${getCurrentStepIndex() > stepIdx\n                          ? 'bg-blue-600 border-blue-600 text-white'\n                          : getCurrentStepIndex() === stepIdx\n                          ? 'border-blue-600 text-blue-600'\n                          : 'border-gray-300 text-gray-400'\n                        }\n                      `}>\n                        {getCurrentStepIndex() > stepIdx ? (\n                          <Check className=\"h-5 w-5\" />\n                        ) : (\n                          <span className=\"text-sm font-medium\">{stepIdx + 1}</span>\n                        )}\n                      </div>\n                      <div className=\"ml-3\">\n                        <span className={`text-sm font-medium ${\n                          getCurrentStepIndex() >= stepIdx ? 'text-gray-900' : 'text-gray-400'\n                        }`}>\n                          {step.title}\n                        </span>\n                      </div>\n                    </div>\n                    {stepIdx !== steps.length - 1 && (\n                      <div className=\"absolute top-4 left-8 -ml-px h-0.5 w-full bg-gray-300\" />\n                    )}\n                  </li>\n                ))}\n              </ol>\n            </nav>\n          </div>\n\n          {/* Error Message */}\n          {error && (\n            <Card className=\"mb-6 border-red-200 bg-red-50\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-start space-x-3 text-red-800\">\n                  <AlertCircle className=\"h-5 w-5 mt-0.5\" />\n                  <div>\n                    <p className=\"font-medium\">Error creating campaign</p>\n                    <p className=\"text-sm mt-1\">{error}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Step Content */}\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle>{steps[getCurrentStepIndex()].title}</CardTitle>\n              <CardDescription>{steps[getCurrentStepIndex()].description}</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {renderStepContent()}\n            </CardContent>\n          </Card>\n\n          {/* Navigation */}\n          <div className=\"flex justify-between\">\n            <Button\n              variant=\"outline\"\n              onClick={goToPreviousStep}\n              disabled={getCurrentStepIndex() === 0}\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Previous\n            </Button>\n\n            <div className=\"flex space-x-3\">\n              {currentStep !== 'review' ? (\n                <Button\n                  onClick={goToNextStep}\n                  disabled={!canProceedToNextStep()}\n                >\n                  Next\n                  <ArrowRight className=\"h-4 w-4 ml-2\" />\n                </Button>\n              ) : (\n                <Button\n                  onClick={handleSubmit}\n                  disabled={isSubmitting || !formData.name.trim()}\n                  className=\"min-w-[120px]\"\n                >\n                  {isSubmitting ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Creating...\n                    </>\n                  ) : (\n                    <>\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      Create Campaign\n                    </>\n                  )}\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* Usage Info */}\n          {profile && (\n            <Card className=\"mt-6 bg-blue-50 border-blue-200\">\n              <CardContent className=\"pt-6\">\n                <div className=\"text-blue-800\">\n                  <p className=\"text-sm\">\n                    <strong>Usage:</strong> {profile.monthly_campaigns_used} of {profile.monthly_campaign_limit} campaigns used this month\n                  </p>\n                  {profile.monthly_campaigns_used >= profile.monthly_campaign_limit && (\n                    <p className=\"text-sm mt-1\">\n                      You've reached your monthly limit. \n                      <Button\n                        variant=\"link\"\n                        className=\"text-blue-800 underline p-0 ml-1\"\n                        onClick={() => router.push('/dashboard/settings/billing')}\n                      >\n                        Upgrade your plan\n                      </Button>\n                      to create more campaigns.\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </main>\n    </div>\n  )\n} "],"names":[],"mappings":"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","debugId":null}}]
}