{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/supabase/client.ts"],"sourcesContent":["import { createBrowserClient } from \"@supabase/ssr\";\n\nexport function createClient() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n  );\n}\n"],"names":[],"mappings":";;;AAII;AAJJ;AAAA;;AAEO,SAAS;IACd,OAAO,CAAA,GAAA,6KAAA,CAAA,sBAAmB,AAAD;AAI3B","debugId":null}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/data-access/base.ts"],"sourcesContent":["/**\n * Base Data Access Layer\n * \n * This module provides common utilities, error handling, and base functionality\n * for all data access operations in the Flint Lead Magnet tool.\n */\n\nimport { createClient } from '@/lib/supabase/client';\nimport type { ApiResponse, DatabaseResult, ValidationError } from '@/lib/types/database';\n\n// Re-export types for convenience\nexport type { ApiResponse, DatabaseResult, ValidationError };\n\n/**\n * Get the appropriate Supabase client based on environment\n * Currently uses client-side only to avoid server import issues in client components\n */\nexport async function getSupabaseClient() {\n  return createClient();\n}\n\n/**\n * Standard error types for database operations\n */\nexport class DataAccessError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public details?: any,\n    public validationErrors?: ValidationError[]\n  ) {\n    super(message);\n    this.name = 'DataAccessError';\n  }\n}\n\n/**\n * Wrap database operations with consistent error handling\n */\nexport async function withErrorHandling<T>(\n  operation: () => Promise<{ data: T | null; error: any }>\n): Promise<DatabaseResult<T>> {\n  try {\n    const { data, error } = await operation();\n    \n    if (error) {\n      console.error('Database operation failed:', error);\n      \n      // Handle specific Supabase error codes\n      if (error.code === 'PGRST116') {\n        return {\n          success: false,\n          error: 'No records found'\n        };\n      }\n      \n      if (error.code === '23505') {\n        return {\n          success: false,\n          error: 'Record already exists',\n          validation_errors: [\n            {\n              field: 'unique_constraint',\n              message: 'A record with this information already exists',\n              code: 'DUPLICATE_ENTRY'\n            }\n          ]\n        };\n      }\n      \n      if (error.code === '23503') {\n        return {\n          success: false,\n          error: 'Referenced record does not exist',\n          validation_errors: [\n            {\n              field: 'foreign_key',\n              message: 'The referenced record does not exist',\n              code: 'INVALID_REFERENCE'\n            }\n          ]\n        };\n      }\n      \n      return {\n        success: false,\n        error: error.message || 'Database operation failed'\n      };\n    }\n    \n    return {\n      success: true,\n      data: data || undefined\n    };\n  } catch (err) {\n    console.error('Unexpected error in database operation:', err);\n    return {\n      success: false,\n      error: err instanceof Error ? err.message : 'Unexpected error occurred'\n    };\n  }\n}\n\n/**\n * Create a standardized API response\n */\nexport function createApiResponse<T>(\n  result: DatabaseResult<T>,\n  message?: string\n): ApiResponse<T> {\n  if (result.success) {\n    return {\n      data: result.data,\n      message: message || 'Operation completed successfully'\n    };\n  } else {\n    return {\n      error: result.error,\n      message: message || 'Operation failed'\n    };\n  }\n}\n\n/**\n * Validate required fields before database operations\n */\nexport function validateRequiredFields(\n  data: Record<string, any>,\n  requiredFields: string[]\n): ValidationError[] {\n  const errors: ValidationError[] = [];\n  \n  for (const field of requiredFields) {\n    const value = data[field];\n    if (value === undefined || value === null || value === '') {\n      errors.push({\n        field,\n        message: `${field} is required`,\n        code: 'REQUIRED_FIELD_MISSING',\n        value\n      });\n    }\n  }\n  \n  return errors;\n}\n\n/**\n * Validate UUID format\n */\nexport function isValidUUID(uuid: string): boolean {\n  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n  return uuidRegex.test(uuid);\n}\n\n/**\n * Validate email format\n */\nexport function isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n/**\n * Common pagination parameters\n */\nexport interface PaginationParams {\n  page?: number;\n  per_page?: number;\n  sort_by?: string;\n  sort_order?: 'asc' | 'desc';\n}\n\n/**\n * Apply pagination to Supabase query\n */\nexport function applyPagination<T>(\n  query: any,\n  params: PaginationParams = {}\n) {\n  const { page = 1, per_page = 20, sort_by, sort_order = 'desc' } = params;\n  \n  // Calculate offset\n  const offset = (page - 1) * per_page;\n  \n  // Apply range (pagination)\n  query = query.range(offset, offset + per_page - 1);\n  \n  // Apply sorting if specified\n  if (sort_by) {\n    query = query.order(sort_by, { ascending: sort_order === 'asc' });\n  }\n  \n  return query;\n}\n\n/**\n * Get user ID from Supabase auth (for RLS)\n */\nexport async function getCurrentUserId(): Promise<string | null> {\n  const supabase = await getSupabaseClient();\n  const { data: { user } } = await supabase.auth.getUser();\n  return user?.id || null;\n}\n\n/**\n * Ensure user is authenticated before database operations\n */\nexport async function requireAuth(): Promise<string> {\n  const userId = await getCurrentUserId();\n  if (!userId) {\n    throw new DataAccessError(\n      'Authentication required',\n      'AUTH_REQUIRED'\n    );\n  }\n  return userId;\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/data-access/campaigns.ts"],"sourcesContent":["/**\n * Campaigns Data Access Layer\n * \n * This module provides CRUD operations for campaigns and their sections.\n */\n\nimport type {\n  Campaign,\n  Section,\n  SectionOption,\n  CreateCampaign,\n  CreateSection,\n  CreateSectionOption,\n  UpdateCampaign,\n  UpdateSection,\n  UpdateSectionOption,\n  CampaignWithRelations,\n  SectionWithOptions,\n  DatabaseResult,\n  PaginatedResponse\n} from '@/lib/types/database';\n\nimport {\n  getSupabaseClient,\n  withErrorHandling,\n  createApiResponse,\n  validateRequiredFields,\n  isValidUUID,\n  requireAuth,\n  applyPagination,\n  type PaginationParams\n} from './base';\n\n// =============================================================================\n// CAMPAIGN CRUD OPERATIONS\n// =============================================================================\n\n/**\n * Create a new campaign\n */\nexport async function createCampaign(\n  campaignData: CreateCampaign\n): Promise<DatabaseResult<Campaign>> {\n  // Validate required fields\n  const validationErrors = validateRequiredFields(campaignData, ['name']);\n  if (validationErrors.length > 0) {\n    return {\n      success: false,\n      error: 'Validation failed',\n      validation_errors: validationErrors\n    };\n  }\n\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('campaigns')\n      .insert({\n        ...campaignData,\n        user_id: userId\n      })\n      .select()\n      .single();\n  });\n}\n\n/**\n * Get campaign by ID\n */\nexport async function getCampaignById(\n  campaignId: string,\n  includeRelations = false\n): Promise<DatabaseResult<Campaign | CampaignWithRelations>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth(); // Ensure user is authenticated for RLS\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const query = supabase\n      .from('campaigns')\n      .select(includeRelations ? `\n        *,\n        sections (\n          *,\n          section_options (*)\n        ),\n        campaign_variables (*),\n        campaign_analytics (*)\n      ` : '*')\n      .eq('id', campaignId);\n\n    return await query.single();\n  });\n}\n\n/**\n * Get campaigns for the authenticated user\n */\nexport async function getCampaigns(\n  params: PaginationParams & { \n    status?: string;\n    search?: string;\n  } = {}\n): Promise<DatabaseResult<PaginatedResponse<Campaign>>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n  const { status, search, ...paginationParams } = params;\n\n  return withErrorHandling(async () => {\n    let query = supabase\n      .from('campaigns')\n      .select('*', { count: 'exact' })\n      .eq('user_id', userId);\n\n    // Apply filters\n    if (status) {\n      query = query.eq('status', status);\n    }\n\n    if (search) {\n      query = query.or(`name.ilike.%${search}%,description.ilike.%${search}%`);\n    }\n\n    // Apply pagination and sorting\n    query = applyPagination(query, {\n      sort_by: 'created_at',\n      ...paginationParams\n    });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      return { data: null, error };\n    }\n\n    const { page = 1, per_page = 20 } = paginationParams;\n    const totalPages = Math.ceil((count || 0) / per_page);\n\n    return {\n      data: {\n        data: data || [],\n        meta: {\n          total: count || 0,\n          page,\n          per_page,\n          has_more: page < totalPages,\n          total_pages: totalPages\n        }\n      },\n      error: null\n    };\n  });\n}\n\n/**\n * Get campaigns with full relations for the authenticated user\n */\nexport async function getCampaignsWithRelations(\n  params: PaginationParams & { \n    status?: string;\n    search?: string;\n  } = {}\n): Promise<DatabaseResult<CampaignWithRelations[]>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n  const { status, search, ...paginationParams } = params;\n\n  return withErrorHandling(async () => {\n    // First get campaigns\n    let campaignQuery = supabase\n      .from('campaigns')\n      .select('*')\n      .eq('user_id', userId);\n\n    if (status) {\n      campaignQuery = campaignQuery.eq('status', status);\n    }\n\n    if (search) {\n      campaignQuery = campaignQuery.or(`name.ilike.%${search}%,description.ilike.%${search}%`);\n    }\n\n    campaignQuery = applyPagination(campaignQuery, {\n      sort_by: 'created_at',\n      ...paginationParams\n    });\n\n    const { data: campaigns, error: campaignError } = await campaignQuery;\n\n    if (campaignError || !campaigns) {\n      return { data: null, error: campaignError };\n    }\n\n    // Get related data for each campaign\n    const campaignsWithRelations: CampaignWithRelations[] = await Promise.all(\n      campaigns.map(async (campaign): Promise<CampaignWithRelations> => {\n        // Get sections with options\n        const { data: sections } = await supabase\n          .from('sections')\n          .select(`\n            *,\n            section_options (*)\n          `)\n          .eq('campaign_id', campaign.id)\n          .order('order_index');\n\n        // Get variables\n        const { data: variables } = await supabase\n          .from('campaign_variables')\n          .select('*')\n          .eq('campaign_id', campaign.id);\n\n        // Get analytics\n        const { data: analytics } = await supabase\n          .from('campaign_analytics')\n          .select('*')\n          .eq('campaign_id', campaign.id)\n          .order('date', { ascending: false });\n\n        return {\n          ...campaign,\n          sections: sections || [],\n          variables: variables || [],\n          analytics: analytics || []\n        };\n      })\n    );\n\n    return { data: campaignsWithRelations, error: null };\n  });\n}\n\n/**\n * Update campaign\n */\nexport async function updateCampaign(\n  campaignId: string,\n  updates: Partial<UpdateCampaign>\n): Promise<DatabaseResult<Campaign>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth(); // Ensure user is authenticated for RLS\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('campaigns')\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', campaignId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Delete campaign\n */\nexport async function deleteCampaign(campaignId: string): Promise<DatabaseResult<boolean>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth(); // Ensure user is authenticated for RLS\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const { error } = await supabase\n      .from('campaigns')\n      .delete()\n      .eq('id', campaignId);\n\n    return { data: !error, error };\n  });\n}\n\n/**\n * Generate a unique slug for campaign URL\n */\nexport async function generateCampaignSlug(\n  campaignName: string,\n  campaignId?: string\n): Promise<DatabaseResult<string>> {\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    // Create base slug from campaign name\n    let baseSlug = campaignName\n      .toLowerCase()\n      .replace(/[^a-z0-9\\s-]/g, '') // Remove special characters\n      .replace(/\\s+/g, '-') // Replace spaces with hyphens\n      .replace(/-+/g, '-') // Replace multiple hyphens with single\n      .trim()\n      .substring(0, 50); // Limit length\n    \n    // Remove leading/trailing hyphens\n    baseSlug = baseSlug.replace(/^-+|-+$/g, '');\n    \n    if (!baseSlug) {\n      baseSlug = 'campaign';\n    }\n\n    let slug = baseSlug;\n    let attempts = 0;\n    const maxAttempts = 100;\n\n    // Check for uniqueness and add suffix if needed\n    while (attempts < maxAttempts) {\n      let query = supabase\n        .from('campaigns')\n        .select('id')\n        .eq('published_url', slug);\n\n      // Exclude current campaign if updating\n      if (campaignId) {\n        query = query.neq('id', campaignId);\n      }\n\n      const { data: existingCampaigns, error } = await query;\n\n      if (error) {\n        throw error;\n      }\n\n      // If no conflicts, we found our unique slug\n      if (!existingCampaigns || existingCampaigns.length === 0) {\n        return { data: slug, error: null };\n      }\n\n      // Generate new slug with suffix\n      attempts++;\n      slug = `${baseSlug}-${attempts}`;\n    }\n\n    throw new Error('Failed to generate unique URL after multiple attempts');\n  });\n}\n\n/**\n * Validate campaign before publishing\n */\nexport async function validateCampaignForPublishing(\n  campaignId: string\n): Promise<DatabaseResult<{ isValid: boolean; errors: string[] }>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const errors: string[] = [];\n\n    // Get campaign with sections\n    const { data: campaign, error: campaignError } = await supabase\n      .from('campaigns')\n      .select(`\n        *,\n        sections (\n          id,\n          type,\n          title,\n          settings\n        )\n      `)\n      .eq('id', campaignId)\n      .single();\n\n    if (campaignError || !campaign) {\n      throw campaignError || new Error('Campaign not found');\n    }\n\n    // Validate campaign has sections\n    if (!campaign.sections || campaign.sections.length === 0) {\n      errors.push('Campaign must have at least one section');\n    }\n\n    // Validate campaign has a name\n    if (!campaign.name || campaign.name.trim().length === 0) {\n      errors.push('Campaign must have a name');\n    }\n\n    // Validate sections have required fields\n    if (campaign.sections) {\n      campaign.sections.forEach((section: any, index: number) => {\n        if (!section.title || section.title.trim().length === 0) {\n          errors.push(`Section ${index + 1} must have a title`);\n        }\n      });\n    }\n\n    return {\n      data: {\n        isValid: errors.length === 0,\n        errors\n      },\n      error: null\n    };\n  });\n}\n\n/**\n * Publish campaign with unique URL generation\n */\nexport async function publishCampaign(\n  campaignId: string,\n  customSlug?: string\n): Promise<DatabaseResult<Campaign & { published_url: string }>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    // First validate the campaign\n    const validationResult = await validateCampaignForPublishing(campaignId);\n    if (!validationResult.success || !validationResult.data?.isValid) {\n      const errors = validationResult.data?.errors || ['Campaign validation failed'];\n      throw new Error(`Cannot publish campaign: ${errors.join(', ')}`);\n    }\n\n    // Get campaign details for URL generation\n    const { data: campaign, error: campaignError } = await supabase\n      .from('campaigns')\n      .select('name, published_url')\n      .eq('id', campaignId)\n      .single();\n\n    if (campaignError || !campaign) {\n      throw campaignError || new Error('Campaign not found');\n    }\n\n    let publishedUrl: string;\n\n    if (customSlug) {\n      // Validate custom slug format\n      const slugRegex = /^[a-z0-9-]+$/;\n      if (!slugRegex.test(customSlug) || customSlug.length < 3 || customSlug.length > 50) {\n        throw new Error('Custom URL must be 3-50 characters long and contain only lowercase letters, numbers, and hyphens');\n      }\n\n      // Check if custom slug is available\n      const { data: existingCampaigns, error: slugError } = await supabase\n        .from('campaigns')\n        .select('id')\n        .eq('published_url', customSlug)\n        .neq('id', campaignId);\n\n      if (slugError) {\n        throw slugError;\n      }\n\n      if (existingCampaigns && existingCampaigns.length > 0) {\n        throw new Error('This custom URL is already taken. Please choose a different one.');\n      }\n\n      publishedUrl = customSlug;\n    } else {\n      // Generate unique slug from campaign name\n      const slugResult = await generateCampaignSlug(campaign.name, campaignId);\n      if (!slugResult.success || !slugResult.data) {\n        throw new Error(slugResult.error || 'Failed to generate unique URL');\n      }\n      publishedUrl = slugResult.data;\n    }\n\n    // Update campaign with published status and URL\n    const updates = {\n      status: 'published' as const,\n      published_at: new Date().toISOString(),\n      published_url: publishedUrl,\n      is_active: true,\n      updated_at: new Date().toISOString()\n    };\n\n    const { data: updatedCampaign, error: updateError } = await supabase\n      .from('campaigns')\n      .update(updates)\n      .eq('id', campaignId)\n      .select()\n      .single();\n\n    if (updateError) {\n      throw updateError;\n    }\n\n    return {\n      data: updatedCampaign as Campaign & { published_url: string },\n      error: null\n    };\n  });\n}\n\n/**\n * Unpublish campaign (set back to draft)\n */\nexport async function unpublishCampaign(\n  campaignId: string,\n  keepUrl: boolean = false\n): Promise<DatabaseResult<Campaign>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const updates: any = {\n      status: 'draft',\n      published_at: null,\n      is_active: false,\n      updated_at: new Date().toISOString()\n    };\n\n    // Optionally clear the published URL\n    if (!keepUrl) {\n      updates.published_url = null;\n    }\n\n    return await supabase\n      .from('campaigns')\n      .update(updates)\n      .eq('id', campaignId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Check if URL slug is available\n */\nexport async function checkUrlAvailability(\n  slug: string,\n  excludeCampaignId?: string\n): Promise<DatabaseResult<{ available: boolean; suggestions?: string[] }>> {\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    // Validate slug format\n    const slugRegex = /^[a-z0-9-]+$/;\n    if (!slugRegex.test(slug) || slug.length < 3 || slug.length > 50) {\n      return {\n        data: {\n          available: false,\n          suggestions: undefined\n        },\n        error: null\n      };\n    }\n\n    let query = supabase\n      .from('campaigns')\n      .select('published_url')\n      .eq('published_url', slug);\n\n    if (excludeCampaignId) {\n      query = query.neq('id', excludeCampaignId);\n    }\n\n    const { data: existingCampaigns, error } = await query;\n\n    if (error) {\n      throw error;\n    }\n\n    const isAvailable = !existingCampaigns || existingCampaigns.length === 0;\n\n    let suggestions: string[] = [];\n    if (!isAvailable) {\n      // Generate suggestions\n      for (let i = 1; i <= 5; i++) {\n        const suggestion = `${slug}-${i}`;\n        const { data: suggestionCheck } = await supabase\n          .from('campaigns')\n          .select('published_url')\n          .eq('published_url', suggestion)\n          .limit(1);\n\n        if (!suggestionCheck || suggestionCheck.length === 0) {\n          suggestions.push(suggestion);\n        }\n      }\n    }\n\n    return {\n      data: {\n        available: isAvailable,\n        suggestions: suggestions.length > 0 ? suggestions : undefined\n      },\n      error: null\n    };\n  });\n}\n\n/**\n * Activate a published campaign (make it publicly accessible)\n */\nexport async function activateCampaign(\n  campaignId: string\n): Promise<DatabaseResult<Campaign>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    // First check if campaign is published\n    const { data: campaign, error: checkError } = await supabase\n      .from('campaigns')\n      .select('status, published_at')\n      .eq('id', campaignId)\n      .single();\n\n    if (checkError || !campaign) {\n      throw checkError || new Error('Campaign not found');\n    }\n\n    if (campaign.status !== 'published' || !campaign.published_at) {\n      throw new Error('Only published campaigns can be activated');\n    }\n\n    return await supabase\n      .from('campaigns')\n      .update({\n        is_active: true,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', campaignId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Deactivate a published campaign (make it inaccessible while preserving URL)\n */\nexport async function deactivateCampaign(\n  campaignId: string\n): Promise<DatabaseResult<Campaign>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    // First check if campaign is published\n    const { data: campaign, error: checkError } = await supabase\n      .from('campaigns')\n      .select('status, published_at')\n      .eq('id', campaignId)\n      .single();\n\n    if (checkError || !campaign) {\n      throw checkError || new Error('Campaign not found');\n    }\n\n    if (campaign.status !== 'published' || !campaign.published_at) {\n      throw new Error('Only published campaigns can be deactivated');\n    }\n\n    return await supabase\n      .from('campaigns')\n      .update({\n        is_active: false,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', campaignId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Get campaign activation status\n */\nexport async function getCampaignActivationStatus(\n  campaignId: string\n): Promise<DatabaseResult<{ isPublished: boolean; isActive: boolean; canActivate: boolean }>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const { data: campaign, error } = await supabase\n      .from('campaigns')\n      .select('status, published_at, is_active')\n      .eq('id', campaignId)\n      .single();\n\n    if (error || !campaign) {\n      throw error || new Error('Campaign not found');\n    }\n\n    const isPublished = campaign.status === 'published' && !!campaign.published_at;\n    const isActive = campaign.is_active;\n    const canActivate = isPublished;\n\n    return {\n      data: {\n        isPublished,\n        isActive,\n        canActivate\n      },\n      error: null\n    };\n  });\n}\n\n// =============================================================================\n// SECTION CRUD OPERATIONS\n// =============================================================================\n\n/**\n * Create a new section for a campaign\n */\nexport async function createSection(\n  sectionData: CreateSection\n): Promise<DatabaseResult<Section>> {\n  // Validate required fields\n  const validationErrors = validateRequiredFields(sectionData, [\n    'campaign_id',\n    'type',\n    'order_index'\n  ]);\n  if (validationErrors.length > 0) {\n    return {\n      success: false,\n      error: 'Validation failed',\n      validation_errors: validationErrors\n    };\n  }\n\n  if (!isValidUUID(sectionData.campaign_id)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('sections')\n      .insert(sectionData)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Get section by ID with options\n */\nexport async function getSectionById(\n  sectionId: string\n): Promise<DatabaseResult<SectionWithOptions>> {\n  if (!isValidUUID(sectionId)) {\n    return {\n      success: false,\n      error: 'Invalid section ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('sections')\n      .select(`\n        *,\n        section_options (*)\n      `)\n      .eq('id', sectionId)\n      .single();\n  });\n}\n\n/**\n * Get sections for a campaign\n */\nexport async function getCampaignSections(\n  campaignId: string\n): Promise<DatabaseResult<SectionWithOptions[]>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('sections')\n      .select(`\n        *,\n        section_options (*)\n      `)\n      .eq('campaign_id', campaignId)\n      .order('order_index', { ascending: true });\n  });\n}\n\n/**\n * Update section\n */\nexport async function updateSection(\n  sectionId: string,\n  updates: Partial<UpdateSection>\n): Promise<DatabaseResult<Section>> {\n  if (!isValidUUID(sectionId)) {\n    return {\n      success: false,\n      error: 'Invalid section ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('sections')\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', sectionId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Delete section\n */\nexport async function deleteSection(sectionId: string): Promise<DatabaseResult<boolean>> {\n  if (!isValidUUID(sectionId)) {\n    return {\n      success: false,\n      error: 'Invalid section ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const { error } = await supabase\n      .from('sections')\n      .delete()\n      .eq('id', sectionId);\n\n    return { data: !error, error };\n  });\n}\n\n/**\n * Reorder sections within a campaign\n */\nexport async function reorderSections(\n  campaignId: string,\n  sectionOrders: { id: string; order_index: number }[]\n): Promise<DatabaseResult<Section[]>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  // Validate all section IDs\n  for (const { id } of sectionOrders) {\n    if (!isValidUUID(id)) {\n      return {\n        success: false,\n        error: `Invalid section ID format: ${id}`\n      };\n    }\n  }\n\n  return withErrorHandling(async () => {\n    // Update each section's order_index\n    const updatePromises = sectionOrders.map(({ id, order_index }) =>\n      supabase\n        .from('sections')\n        .update({ \n          order_index,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', id)\n        .eq('campaign_id', campaignId) // Ensure section belongs to campaign\n    );\n\n    await Promise.all(updatePromises);\n\n    // Return updated sections\n    return await supabase\n      .from('sections')\n      .select()\n      .eq('campaign_id', campaignId)\n      .order('order_index', { ascending: true });\n  });\n}\n\n// =============================================================================\n// SECTION OPTIONS CRUD OPERATIONS\n// =============================================================================\n\n/**\n * Create section option\n */\nexport async function createSectionOption(\n  optionData: CreateSectionOption\n): Promise<DatabaseResult<SectionOption>> {\n  const validationErrors = validateRequiredFields(optionData, [\n    'section_id',\n    'label',\n    'value',\n    'order_index'\n  ]);\n  if (validationErrors.length > 0) {\n    return {\n      success: false,\n      error: 'Validation failed',\n      validation_errors: validationErrors\n    };\n  }\n\n  if (!isValidUUID(optionData.section_id)) {\n    return {\n      success: false,\n      error: 'Invalid section ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('section_options')\n      .insert(optionData)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Update section option\n */\nexport async function updateSectionOption(\n  optionId: string,\n  updates: Partial<UpdateSectionOption>\n): Promise<DatabaseResult<SectionOption>> {\n  if (!isValidUUID(optionId)) {\n    return {\n      success: false,\n      error: 'Invalid option ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('section_options')\n      .update(updates)\n      .eq('id', optionId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Delete section option\n */\nexport async function deleteSectionOption(optionId: string): Promise<DatabaseResult<boolean>> {\n  if (!isValidUUID(optionId)) {\n    return {\n      success: false,\n      error: 'Invalid option ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const { error } = await supabase\n      .from('section_options')\n      .delete()\n      .eq('id', optionId);\n\n    return { data: !error, error };\n  });\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 870, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/data-access/leads.ts"],"sourcesContent":["/**\n * Leads Data Access Layer\n * \n * This module provides CRUD operations for leads, responses, and lead management.\n */\n\nimport type {\n  Lead,\n  LeadResponse,\n  CreateLead,\n  CreateLeadResponse,\n  UpdateLead,\n  UpdateLeadResponse,\n  LeadWithRelations,\n  LeadResponseWithRelations,\n  DatabaseResult,\n  PaginatedResponse\n} from '@/lib/types/database';\n\nimport {\n  getSupabaseClient,\n  withErrorHandling,\n  validateRequiredFields,\n  isValidUUID,\n  isValidEmail,\n  requireAuth,\n  applyPagination,\n  type PaginationParams\n} from './base';\n\n// =============================================================================\n// LEAD CRUD OPERATIONS\n// =============================================================================\n\n/**\n * Create a new lead\n */\nexport async function createLead(\n  leadData: CreateLead\n): Promise<DatabaseResult<Lead>> {\n  // Validate required fields\n  const validationErrors = validateRequiredFields(leadData, [\n    'campaign_id',\n    'email'\n  ]);\n  \n  if (validationErrors.length > 0) {\n    return {\n      success: false,\n      error: 'Validation failed',\n      validation_errors: validationErrors\n    };\n  }\n\n  // Validate UUID format\n  if (!isValidUUID(leadData.campaign_id)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  // Validate email format\n  if (!isValidEmail(leadData.email)) {\n    return {\n      success: false,\n      error: 'Invalid email format',\n      validation_errors: [{\n        field: 'email',\n        message: 'Please provide a valid email address',\n        code: 'INVALID_EMAIL',\n        value: leadData.email\n      }]\n    };\n  }\n\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('leads')\n      .insert(leadData)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Get lead by ID\n */\nexport async function getLeadById(\n  leadId: string,\n  includeRelations = false\n): Promise<DatabaseResult<Lead | LeadWithRelations>> {\n  if (!isValidUUID(leadId)) {\n    return {\n      success: false,\n      error: 'Invalid lead ID format'\n    };\n  }\n\n  await requireAuth(); // Ensure authenticated for RLS\n  const supabase = await getSupabaseClient();\n\n  if (!includeRelations) {\n    return withErrorHandling(async () => {\n      return await supabase\n        .from('leads')\n        .select('*')\n        .eq('id', leadId)\n        .single();\n    });\n  }\n\n  return withErrorHandling(async () => {\n    // Get lead with all relations\n    const { data: lead, error: leadError } = await supabase\n      .from('leads')\n      .select('*')\n      .eq('id', leadId)\n      .single();\n\n    if (leadError || !lead) {\n      return { data: null, error: leadError };\n    }\n\n    // Get responses\n    const { data: responses } = await supabase\n      .from('lead_responses')\n      .select(`\n        *,\n        sections (*)\n      `)\n      .eq('lead_id', leadId)\n      .order('created_at');\n\n    // Get variable values\n    const { data: variableValues } = await supabase\n      .from('lead_variable_values')\n      .select(`\n        *,\n        campaign_variables (*)\n      `)\n      .eq('lead_id', leadId);\n\n    // Get campaign\n    const { data: campaign } = await supabase\n      .from('campaigns')\n      .select('*')\n      .eq('id', lead.campaign_id)\n      .single();\n\n    const leadWithRelations: LeadWithRelations = {\n      ...lead,\n      responses: responses || [],\n      variable_values: variableValues || [],\n      campaign: campaign || undefined\n    };\n\n    return { data: leadWithRelations, error: null };\n  });\n}\n\n/**\n * Get leads for a campaign\n */\nexport async function getCampaignLeads(\n  campaignId: string,\n  params: PaginationParams & {\n    completed?: boolean;\n    search?: string;\n  } = {}\n): Promise<DatabaseResult<PaginatedResponse<Lead>>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n  const { completed, search, ...paginationParams } = params;\n\n  return withErrorHandling(async () => {\n    let query = supabase\n      .from('leads')\n      .select('*', { count: 'exact' })\n      .eq('campaign_id', campaignId);\n\n    // Apply filters\n    if (completed !== undefined) {\n      if (completed) {\n        query = query.not('completed_at', 'is', null);\n      } else {\n        query = query.is('completed_at', null);\n      }\n    }\n\n    if (search) {\n      query = query.or(`name.ilike.%${search}%,email.ilike.%${search}%`);\n    }\n\n    // Apply pagination and sorting\n    query = applyPagination(query, {\n      sort_by: 'created_at',\n      ...paginationParams\n    });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      return { data: null, error };\n    }\n\n    const { page = 1, per_page = 20 } = paginationParams;\n    const totalPages = Math.ceil((count || 0) / per_page);\n\n    return {\n      data: {\n        data: data || [],\n        meta: {\n          total: count || 0,\n          page,\n          per_page,\n          has_more: page < totalPages,\n          total_pages: totalPages\n        }\n      },\n      error: null\n    };\n  });\n}\n\n/**\n * Update lead\n */\nexport async function updateLead(\n  leadId: string,\n  updates: Partial<UpdateLead>\n): Promise<DatabaseResult<Lead>> {\n  if (!isValidUUID(leadId)) {\n    return {\n      success: false,\n      error: 'Invalid lead ID format'\n    };\n  }\n\n  // Validate email if provided\n  if (updates.email && !isValidEmail(updates.email)) {\n    return {\n      success: false,\n      error: 'Invalid email format',\n      validation_errors: [{\n        field: 'email',\n        message: 'Please provide a valid email address',\n        code: 'INVALID_EMAIL',\n        value: updates.email\n      }]\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('leads')\n      .update(updates)\n      .eq('id', leadId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Mark lead as completed\n */\nexport async function completeLead(leadId: string): Promise<DatabaseResult<Lead>> {\n  if (!isValidUUID(leadId)) {\n    return {\n      success: false,\n      error: 'Invalid lead ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('leads')\n      .update({ completed_at: new Date().toISOString() })\n      .eq('id', leadId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Delete lead\n */\nexport async function deleteLead(leadId: string): Promise<DatabaseResult<boolean>> {\n  if (!isValidUUID(leadId)) {\n    return {\n      success: false,\n      error: 'Invalid lead ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const { error } = await supabase\n      .from('leads')\n      .delete()\n      .eq('id', leadId);\n\n    return { data: !error, error };\n  });\n}\n\n// =============================================================================\n// LEAD RESPONSE CRUD OPERATIONS\n// =============================================================================\n\n/**\n * Create a lead response\n */\nexport async function createLeadResponse(\n  responseData: CreateLeadResponse\n): Promise<DatabaseResult<LeadResponse>> {\n  // Validate required fields\n  const validationErrors = validateRequiredFields(responseData, [\n    'lead_id',\n    'section_id',\n    'response_type',\n    'response_value'\n  ]);\n\n  if (validationErrors.length > 0) {\n    return {\n      success: false,\n      error: 'Validation failed',\n      validation_errors: validationErrors\n    };\n  }\n\n  // Validate UUIDs\n  if (!isValidUUID(responseData.lead_id)) {\n    return {\n      success: false,\n      error: 'Invalid lead ID format'\n    };\n  }\n\n  if (!isValidUUID(responseData.section_id)) {\n    return {\n      success: false,\n      error: 'Invalid section ID format'\n    };\n  }\n\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('lead_responses')\n      .insert(responseData)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Update or create lead response (upsert)\n */\nexport async function upsertLeadResponse(\n  responseData: CreateLeadResponse\n): Promise<DatabaseResult<LeadResponse>> {\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('lead_responses')\n      .upsert(responseData, {\n        onConflict: 'lead_id,section_id'\n      })\n      .select()\n      .single();\n  });\n}\n\n/**\n * Get responses for a lead\n */\nexport async function getLeadResponses(\n  leadId: string\n): Promise<DatabaseResult<LeadResponseWithRelations[]>> {\n  if (!isValidUUID(leadId)) {\n    return {\n      success: false,\n      error: 'Invalid lead ID format'\n    };\n  }\n\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('lead_responses')\n      .select(`\n        *,\n        sections (*),\n        leads (*)\n      `)\n      .eq('lead_id', leadId)\n      .order('created_at');\n  });\n}\n\n/**\n * Get responses for a section across all leads\n */\nexport async function getSectionResponses(\n  sectionId: string,\n  params: PaginationParams = {}\n): Promise<DatabaseResult<PaginatedResponse<LeadResponseWithRelations>>> {\n  if (!isValidUUID(sectionId)) {\n    return {\n      success: false,\n      error: 'Invalid section ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    let query = supabase\n      .from('lead_responses')\n      .select(`\n        *,\n        sections (*),\n        leads (*)\n      `, { count: 'exact' })\n      .eq('section_id', sectionId);\n\n    // Apply pagination and sorting\n    query = applyPagination(query, {\n      sort_by: 'created_at',\n      ...params\n    });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      return { data: null, error };\n    }\n\n    const { page = 1, per_page = 20 } = params;\n    const totalPages = Math.ceil((count || 0) / per_page);\n\n    return {\n      data: {\n        data: data || [],\n        meta: {\n          total: count || 0,\n          page,\n          per_page,\n          has_more: page < totalPages,\n          total_pages: totalPages\n        }\n      },\n      error: null\n    };\n  });\n}\n\n/**\n * Delete lead response\n */\nexport async function deleteLeadResponse(\n  responseId: string\n): Promise<DatabaseResult<boolean>> {\n  if (!isValidUUID(responseId)) {\n    return {\n      success: false,\n      error: 'Invalid response ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const { error } = await supabase\n      .from('lead_responses')\n      .delete()\n      .eq('id', responseId);\n\n    return { data: !error, error };\n  });\n}\n\n// =============================================================================\n// LEAD ANALYTICS AND UTILITIES\n// =============================================================================\n\n/**\n * Get lead statistics for a campaign\n */\nexport async function getCampaignLeadStats(\n  campaignId: string\n): Promise<DatabaseResult<{\n  total: number;\n  completed: number;\n  conversion_rate: number;\n  recent_leads: Lead[];\n}>> {\n  if (!isValidUUID(campaignId)) {\n    return {\n      success: false,\n      error: 'Invalid campaign ID format'\n    };\n  }\n\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    // Get total leads count\n    const { count: totalCount } = await supabase\n      .from('leads')\n      .select('*', { count: 'exact', head: true })\n      .eq('campaign_id', campaignId);\n\n    // Get completed leads count\n    const { count: completedCount } = await supabase\n      .from('leads')\n      .select('*', { count: 'exact', head: true })\n      .eq('campaign_id', campaignId)\n      .not('completed_at', 'is', null);\n\n    // Get recent leads\n    const { data: recentLeads } = await supabase\n      .from('leads')\n      .select('*')\n      .eq('campaign_id', campaignId)\n      .order('created_at', { ascending: false })\n      .limit(10);\n\n    const total = totalCount || 0;\n    const completed = completedCount || 0;\n    const conversion_rate = total > 0 ? (completed / total) * 100 : 0;\n\n    return {\n      data: {\n        total,\n        completed,\n        conversion_rate: Math.round(conversion_rate * 100) / 100, // Round to 2 decimal places\n        recent_leads: recentLeads || []\n      },\n      error: null\n    };\n  });\n}\n\n/**\n * Search leads across campaigns for a user\n */\nexport async function searchLeads(\n  searchTerm: string,\n  params: PaginationParams = {}\n): Promise<DatabaseResult<PaginatedResponse<LeadWithRelations>>> {\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    let query = supabase\n      .from('leads')\n      .select(`\n        *,\n        campaigns!inner (*)\n      `, { count: 'exact' })\n      .or(`name.ilike.%${searchTerm}%,email.ilike.%${searchTerm}%`);\n\n    // Apply pagination and sorting\n    query = applyPagination(query, {\n      sort_by: 'created_at',\n      ...params\n    });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      return { data: null, error };\n    }\n\n    const { page = 1, per_page = 20 } = params;\n    const totalPages = Math.ceil((count || 0) / per_page);\n\n    return {\n      data: {\n        data: data || [],\n        meta: {\n          total: count || 0,\n          page,\n          per_page,\n          has_more: page < totalPages,\n          total_pages: totalPages\n        }\n      },\n      error: null\n    };\n  });\n}\n\n/**\n * Get all leads for the authenticated user across their campaigns\n */\nexport async function getLeads(\n  params: PaginationParams & {\n    campaign_id?: string;\n    completed?: boolean;\n    search?: string;\n  } = {}\n): Promise<DatabaseResult<PaginatedResponse<Lead>>> {\n  await requireAuth();\n  const supabase = await getSupabaseClient();\n  const { campaign_id, completed, search, ...paginationParams } = params;\n\n  return withErrorHandling(async () => {\n    let query = supabase\n      .from('leads')\n      .select(`\n        *,\n        campaigns!inner (*)\n      `, { count: 'exact' });\n\n    // Apply filters\n    if (campaign_id) {\n      query = query.eq('campaign_id', campaign_id);\n    }\n\n    if (completed !== undefined) {\n      if (completed) {\n        query = query.not('completed_at', 'is', null);\n      } else {\n        query = query.is('completed_at', null);\n      }\n    }\n\n    if (search) {\n      query = query.or(`name.ilike.%${search}%,email.ilike.%${search}%,phone.ilike.%${search}%`);\n    }\n\n    // Apply pagination and sorting\n    query = applyPagination(query, {\n      sort_by: 'created_at',\n      sort_order: 'desc',\n      ...paginationParams\n    });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      return { data: null, error };\n    }\n\n    const { page = 1, per_page = 20 } = paginationParams;\n    const totalPages = Math.ceil((count || 0) / per_page);\n\n    return {\n      data: {\n        data: data || [],\n        meta: {\n          total: count || 0,\n          page,\n          per_page,\n          has_more: page < totalPages,\n          total_pages: totalPages\n        }\n      },\n      error: null\n    };\n  });\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1354, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/data-access/profiles.ts"],"sourcesContent":["/**\n * Profiles Data Access Layer\n * \n * This module provides CRUD operations for user profiles, subscription management,\n * and usage tracking.\n */\n\nimport type {\n  Profile,\n  CreateProfile,\n  UpdateProfile,\n  ProfileWithUsage,\n  SubscriptionPlan,\n  SubscriptionStatus,\n  UserPreferences,\n  DatabaseResult\n} from '@/lib/types/database';\n\nimport {\n  getSupabaseClient,\n  withErrorHandling,\n  validateRequiredFields,\n  isValidUUID,\n  isValidEmail,\n  requireAuth,\n  getCurrentUserId\n} from './base';\n\n// =============================================================================\n// PROFILE CRUD OPERATIONS\n// =============================================================================\n\n/**\n * Get current user's profile\n */\nexport async function getCurrentProfile(): Promise<DatabaseResult<Profile>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', userId)\n      .single();\n  });\n}\n\n/**\n * Get profile by ID (admin only or current user)\n */\nexport async function getProfileById(profileId: string): Promise<DatabaseResult<Profile>> {\n  if (!isValidUUID(profileId)) {\n    return {\n      success: false,\n      error: 'Invalid profile ID format'\n    };\n  }\n\n  const currentUserId = await requireAuth();\n  \n  // Only allow access to own profile for now (can be extended for admin access)\n  if (profileId !== currentUserId) {\n    return {\n      success: false,\n      error: 'Access denied: can only access your own profile'\n    };\n  }\n\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', profileId)\n      .single();\n  });\n}\n\n/**\n * Create a new profile (typically called during user registration)\n */\nexport async function createProfile(\n  profileData: CreateProfile\n): Promise<DatabaseResult<Profile>> {\n  // Validate required fields\n  const validationErrors = validateRequiredFields(profileData, ['id', 'email']);\n  if (validationErrors.length > 0) {\n    return {\n      success: false,\n      error: 'Validation failed',\n      validation_errors: validationErrors\n    };\n  }\n\n  // Validate UUID format\n  if (!isValidUUID(profileData.id)) {\n    return {\n      success: false,\n      error: 'Invalid profile ID format'\n    };\n  }\n\n  // Validate email format\n  if (!isValidEmail(profileData.email)) {\n    return {\n      success: false,\n      error: 'Invalid email format'\n    };\n  }\n\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .insert(profileData)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Update current user's profile\n */\nexport async function updateCurrentProfile(\n  updates: Partial<Omit<UpdateProfile, 'id'>>\n): Promise<DatabaseResult<Profile>> {\n  const userId = await requireAuth();\n\n  // Validate email if provided\n  if (updates.email && !isValidEmail(updates.email)) {\n    return {\n      success: false,\n      error: 'Invalid email format'\n    };\n  }\n\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Update profile by ID (admin only or current user)\n */\nexport async function updateProfile(\n  profileId: string,\n  updates: Partial<Omit<UpdateProfile, 'id'>>\n): Promise<DatabaseResult<Profile>> {\n  if (!isValidUUID(profileId)) {\n    return {\n      success: false,\n      error: 'Invalid profile ID format'\n    };\n  }\n\n  const currentUserId = await requireAuth();\n  \n  // Only allow access to own profile for now\n  if (profileId !== currentUserId) {\n    return {\n      success: false,\n      error: 'Access denied: can only update your own profile'\n    };\n  }\n\n  // Validate email if provided\n  if (updates.email && !isValidEmail(updates.email)) {\n    return {\n      success: false,\n      error: 'Invalid email format'\n    };\n  }\n\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', profileId)\n      .select()\n      .single();\n  });\n}\n\n// =============================================================================\n// USER PREFERENCES MANAGEMENT\n// =============================================================================\n\n/**\n * Get current user's preferences\n */\nexport async function getUserPreferences(): Promise<DatabaseResult<UserPreferences>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('preferences')\n      .eq('id', userId)\n      .single();\n\n    if (error) {\n      return { data: null, error };\n    }\n\n    return { data: data.preferences || {}, error: null };\n  });\n}\n\n/**\n * Update user preferences\n */\nexport async function updateUserPreferences(\n  preferences: Partial<UserPreferences>\n): Promise<DatabaseResult<UserPreferences>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    // First get current preferences\n    const { data: currentProfile, error: fetchError } = await supabase\n      .from('profiles')\n      .select('preferences')\n      .eq('id', userId)\n      .single();\n\n    if (fetchError) {\n      return { data: null, error: fetchError };\n    }\n\n    // Merge with existing preferences\n    const currentPrefs = currentProfile.preferences || {};\n    const updatedPrefs = { ...currentPrefs, ...preferences };\n\n    // Update profile with merged preferences\n    const { data, error } = await supabase\n      .from('profiles')\n      .update({\n        preferences: updatedPrefs,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId)\n      .select('preferences')\n      .single();\n\n    if (error) {\n      return { data: null, error };\n    }\n\n    return { data: data.preferences, error: null };\n  });\n}\n\n// =============================================================================\n// SUBSCRIPTION MANAGEMENT\n// =============================================================================\n\n/**\n * Update user subscription\n */\nexport async function updateSubscription(\n  plan: SubscriptionPlan,\n  status: SubscriptionStatus,\n  trialEndsAt?: string,\n  subscriptionEndsAt?: string\n): Promise<DatabaseResult<Profile>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  // Set limits based on plan\n  const planLimits = {\n    free: { campaigns: 3, leads: 100 },\n    starter: { campaigns: 10, leads: 1000 },\n    pro: { campaigns: 50, leads: 10000 },\n    enterprise: { campaigns: -1, leads: -1 } // -1 means unlimited\n  };\n\n  const limits = planLimits[plan];\n\n  const updates: any = {\n    subscription_plan: plan,\n    subscription_status: status,\n    monthly_campaign_limit: limits.campaigns,\n    monthly_leads_limit: limits.leads,\n    updated_at: new Date().toISOString()\n  };\n\n  if (trialEndsAt) {\n    updates.trial_ends_at = trialEndsAt;\n  }\n\n  if (subscriptionEndsAt) {\n    updates.subscription_ends_at = subscriptionEndsAt;\n  }\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .update(updates)\n      .eq('id', userId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Reset monthly usage counters (typically called at the start of each month)\n */\nexport async function resetMonthlyUsage(profileId?: string): Promise<DatabaseResult<Profile>> {\n  const userId = profileId || await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .update({\n        monthly_campaigns_used: 0,\n        monthly_leads_captured: 0,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Increment campaign usage\n */\nexport async function incrementCampaignUsage(): Promise<DatabaseResult<Profile>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  // First get current usage\n  const { data: profile, error: fetchError } = await supabase\n    .from('profiles')\n    .select('monthly_campaigns_used, monthly_campaign_limit')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    return {\n      success: false,\n      error: fetchError.message || 'Failed to fetch profile'\n    };\n  }\n\n  // Check if limit would be exceeded\n  const currentUsage = profile.monthly_campaigns_used || 0;\n  const limit = profile.monthly_campaign_limit || 0;\n\n  if (limit > 0 && currentUsage >= limit) {\n    return {\n      success: false,\n      error: 'Monthly campaign limit exceeded',\n      validation_errors: [{\n        field: 'monthly_campaigns_used',\n        message: `You have reached your monthly limit of ${limit} campaigns`,\n        code: 'LIMIT_EXCEEDED',\n        value: currentUsage\n      }]\n    };\n  }\n\n  // Increment usage\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .update({\n        monthly_campaigns_used: currentUsage + 1,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId)\n      .select()\n      .single();\n  });\n}\n\n/**\n * Increment leads usage\n */\nexport async function incrementLeadsUsage(count = 1): Promise<DatabaseResult<Profile>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  // First get current usage\n  const { data: profile, error: fetchError } = await supabase\n    .from('profiles')\n    .select('monthly_leads_captured, monthly_leads_limit')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    return {\n      success: false,\n      error: fetchError.message || 'Failed to fetch profile'\n    };\n  }\n\n  // Check if limit would be exceeded\n  const currentUsage = profile.monthly_leads_captured || 0;\n  const limit = profile.monthly_leads_limit || 0;\n\n  if (limit > 0 && (currentUsage + count) > limit) {\n    return {\n      success: false,\n      error: 'Monthly leads limit exceeded',\n      validation_errors: [{\n        field: 'monthly_leads_captured',\n        message: `Adding ${count} lead(s) would exceed your monthly limit of ${limit} leads`,\n        code: 'LIMIT_EXCEEDED',\n        value: currentUsage\n      }]\n    };\n  }\n\n  // Increment usage\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .update({\n        monthly_leads_captured: currentUsage + count,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId)\n      .select()\n      .single();\n  });\n}\n\n// =============================================================================\n// PROFILE ANALYTICS AND UTILITIES\n// =============================================================================\n\n/**\n * Get profile with usage statistics\n */\nexport async function getCurrentProfileWithUsage(): Promise<DatabaseResult<ProfileWithUsage>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    // Get profile\n    const { data: profile, error: profileError } = await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', userId)\n      .single();\n\n    if (profileError || !profile) {\n      return { data: null, error: profileError };\n    }\n\n    // Get total campaigns count\n    const { count: totalCampaigns } = await supabase\n      .from('campaigns')\n      .select('*', { count: 'exact', head: true })\n      .eq('user_id', userId);\n\n    // Get user's campaign IDs first\n    const { data: userCampaigns } = await supabase\n      .from('campaigns')\n      .select('id')\n      .eq('user_id', userId);\n\n    // Get total leads count for user's campaigns\n    let totalLeads = 0;\n    if (userCampaigns && userCampaigns.length > 0) {\n      const campaignIds = userCampaigns.map(c => c.id);\n      const { count: leadsCount } = await supabase\n        .from('leads')\n        .select('*', { count: 'exact', head: true })\n        .in('campaign_id', campaignIds);\n      totalLeads = leadsCount || 0;\n    }\n\n    // Calculate usage percentages\n    const campaignUsagePercentage = profile.monthly_campaign_limit > 0 \n      ? Math.round((profile.monthly_campaigns_used / profile.monthly_campaign_limit) * 100)\n      : 0;\n\n    const leadsUsagePercentage = profile.monthly_leads_limit > 0 \n      ? Math.round((profile.monthly_leads_captured / profile.monthly_leads_limit) * 100)\n      : 0;\n\n    const profileWithUsage: ProfileWithUsage = {\n      ...profile,\n      total_campaigns: totalCampaigns || 0,\n      total_leads: totalLeads,\n      current_month_campaigns: profile.monthly_campaigns_used,\n      current_month_leads: profile.monthly_leads_captured,\n      usage_percentage: {\n        campaigns: campaignUsagePercentage,\n        leads: leadsUsagePercentage\n      }\n    };\n\n    return { data: profileWithUsage, error: null };\n  });\n}\n\n/**\n * Check if user can create a new campaign\n */\nexport async function canCreateCampaign(): Promise<DatabaseResult<boolean>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const { data: profile, error } = await supabase\n      .from('profiles')\n      .select('monthly_campaigns_used, monthly_campaign_limit')\n      .eq('id', userId)\n      .single();\n\n    if (error) {\n      return { data: null, error };\n    }\n\n    const canCreate = profile.monthly_campaign_limit <= 0 || \n      profile.monthly_campaigns_used < profile.monthly_campaign_limit;\n\n    return { data: canCreate, error: null };\n  });\n}\n\n/**\n * Check if user can capture more leads\n */\nexport async function canCaptureLeads(count = 1): Promise<DatabaseResult<boolean>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    const { data: profile, error } = await supabase\n      .from('profiles')\n      .select('monthly_leads_captured, monthly_leads_limit')\n      .eq('id', userId)\n      .single();\n\n    if (error) {\n      return { data: null, error };\n    }\n\n    const canCapture = profile.monthly_leads_limit <= 0 || \n      (profile.monthly_leads_captured + count) <= profile.monthly_leads_limit;\n\n    return { data: canCapture, error: null };\n  });\n}\n\n/**\n * Mark onboarding as completed\n */\nexport async function completeOnboarding(): Promise<DatabaseResult<Profile>> {\n  const userId = await requireAuth();\n  const supabase = await getSupabaseClient();\n\n  return withErrorHandling(async () => {\n    return await supabase\n      .from('profiles')\n      .update({\n        onboarding_completed: true,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId)\n      .select()\n      .single();\n  });\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1763, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/data-access/index.ts"],"sourcesContent":["/**\n * Data Access Layer - Main Export\n * \n * This module serves as the main entry point for all data access operations\n * in the Flint Lead Magnet tool. It re-exports functions from individual modules\n * for easy importing throughout the application.\n */\n\nimport type {\n  Campaign,\n  Lead,\n  CreateCampaign,\n  CreateLead,\n  DatabaseResult\n} from '@/lib/types/database';\n\n// =============================================================================\n// BASE UTILITIES\n// =============================================================================\nexport {\n  getSupabaseClient,\n  withErrorHandling,\n  createApiResponse,\n  validateRequiredFields,\n  isValidUUID,\n  isValidEmail,\n  requireAuth,\n  getCurrentUserId,\n  applyPagination,\n  DataAccessError,\n  type PaginationParams,\n  type ApiResponse,\n  type DatabaseResult,\n  type ValidationError\n} from './base';\n\n// =============================================================================\n// CAMPAIGN OPERATIONS\n// =============================================================================\nexport {\n  // Campaign CRUD\n  createCampaign,\n  getCampaignById,\n  getCampaigns,\n  getCampaignsWithRelations,\n  updateCampaign,\n  deleteCampaign,\n  publishCampaign,\n  unpublishCampaign,\n  generateCampaignSlug,\n  validateCampaignForPublishing,\n  checkUrlAvailability,\n\n  // Campaign Activation Controls\n  activateCampaign,\n  deactivateCampaign,\n  getCampaignActivationStatus,\n\n  // Section CRUD\n  createSection,\n  getSectionById,\n  getCampaignSections,\n  updateSection,\n  deleteSection,\n  reorderSections,\n\n  // Section Options CRUD\n  createSectionOption,\n  updateSectionOption,\n  deleteSectionOption\n} from './campaigns';\n\n// =============================================================================\n// LEAD OPERATIONS\n// =============================================================================\nexport {\n  // Lead CRUD\n  createLead,\n  getLeadById,\n  getLeads,\n  getCampaignLeads,\n  updateLead,\n  completeLead,\n  deleteLead,\n\n  // Lead Response CRUD\n  createLeadResponse,\n  upsertLeadResponse,\n  getLeadResponses,\n  getSectionResponses,\n  deleteLeadResponse,\n\n  // Lead Analytics\n  getCampaignLeadStats,\n  searchLeads\n} from './leads';\n\n// =============================================================================\n// PROFILE OPERATIONS\n// =============================================================================\nexport {\n  // Profile CRUD\n  getCurrentProfile,\n  getProfileById,\n  createProfile,\n  updateCurrentProfile,\n  updateProfile,\n\n  // User Preferences\n  getUserPreferences,\n  updateUserPreferences,\n\n  // Subscription Management\n  updateSubscription,\n  resetMonthlyUsage,\n  incrementCampaignUsage,\n  incrementLeadsUsage,\n\n  // Profile Analytics\n  getCurrentProfileWithUsage,\n  canCreateCampaign,\n  canCaptureLeads,\n  completeOnboarding\n} from './profiles';\n\n// =============================================================================\n// TYPE RE-EXPORTS\n// =============================================================================\nexport type {\n  // Database Types\n  Campaign,\n  Section,\n  SectionOption,\n  Lead,\n  LeadResponse,\n  Profile,\n  CampaignVariable,\n  LeadVariableValue,\n  CampaignAnalytics,\n\n  // Create Types\n  CreateCampaign,\n  CreateSection,\n  CreateSectionOption,\n  CreateLead,\n  CreateLeadResponse,\n  CreateProfile,\n  CreateCampaignVariable,\n  CreateLeadVariableValue,\n  CreateCampaignAnalytics,\n\n  // Update Types\n  UpdateCampaign,\n  UpdateSection,\n  UpdateSectionOption,\n  UpdateLead,\n  UpdateLeadResponse,\n  UpdateProfile,\n  UpdateCampaignVariable,\n  UpdateLeadVariableValue,\n  UpdateCampaignAnalytics,\n\n  // Extended Types\n  CampaignWithRelations,\n  SectionWithOptions,\n  LeadWithRelations,\n  LeadResponseWithRelations,\n  ProfileWithUsage,\n\n  // Configuration Types\n  SectionConfiguration,\n  TextQuestionConfiguration,\n  MultipleChoiceConfiguration,\n  SliderConfiguration,\n  InfoConfiguration,\n  CaptureConfiguration,\n  LogicConfiguration,\n  OutputConfiguration,\n  VariableConfiguration,\n  CampaignSettings,\n  UserPreferences,\n\n  // Response Types\n  PaginatedResponse,\n\n  // Enum Types\n  CampaignStatus,\n  SectionType,\n  ResponseType,\n  VariableType,\n  VariableSource,\n  SubscriptionPlan,\n  SubscriptionStatus,\n\n  // Utility Types\n  UUID,\n  Timestamp,\n  JSONValue\n} from '../types/database';\n\n// =============================================================================\n// CONVENIENCE FUNCTIONS\n// =============================================================================\n\n/**\n * Create a new campaign with initial setup\n */\nexport async function createCampaignWithDefaults(\n  name: string,\n  description?: string\n): Promise<DatabaseResult<Campaign>> {\n  const { createCampaign } = await import('./campaigns');\n  \n  // Cast the data to CreateCampaign since we know createCampaign will handle user_id\n  const campaignData = {\n    name,\n    description: description || '',\n    status: 'draft' as const,\n    settings: {\n      theme: {\n        primary_color: '#3B82F6',\n        secondary_color: '#10B981',\n        background_color: '#FFFFFF',\n        font_family: 'Inter, sans-serif'\n      },\n      branding: {\n        show_powered_by: true\n      },\n      completion: {\n        email_notifications: true\n      }\n    },\n    published_at: null,\n    published_url: null\n  } as CreateCampaign;\n  \n  return createCampaign(campaignData);\n}\n\n/**\n * Create a lead and increment usage counter\n */\nexport async function createLeadWithUsageTracking(\n  leadData: CreateLead\n): Promise<DatabaseResult<Lead>> {\n  const { createLead } = await import('./leads');\n  const { incrementLeadsUsage, canCaptureLeads } = await import('./profiles');\n\n  // Check if user can capture more leads\n  const canCapture = await canCaptureLeads(1);\n  if (!canCapture.success) {\n    return canCapture as any;\n  }\n\n  if (!canCapture.data) {\n    return {\n      success: false,\n      error: 'Monthly leads limit reached'\n    };\n  }\n\n  // Create the lead\n  const leadResult = await createLead(leadData);\n  if (!leadResult.success) {\n    return leadResult;\n  }\n\n  // Increment usage counter\n  await incrementLeadsUsage(1);\n\n  return leadResult;\n}\n\n/**\n * Publish a campaign and increment usage counter\n */\nexport async function publishCampaignWithUsageTracking(\n  campaignId: string,\n  publishedUrl?: string\n): Promise<DatabaseResult<Campaign>> {\n  const { publishCampaign } = await import('./campaigns');\n\n  // Note: For publishing, we don't check campaign limits since the campaign already exists\n  // We only check limits during campaign creation\n\n  // Publish the campaign\n  const publishResult = await publishCampaign(campaignId, publishedUrl);\n  if (!publishResult.success) {\n    return publishResult;\n  }\n\n  return publishResult;\n}\n\n/**\n * Create a campaign and increment usage counter\n */\nexport async function createCampaignWithUsageTracking(\n  campaignData: CreateCampaign\n): Promise<DatabaseResult<Campaign>> {\n  const { createCampaign } = await import('./campaigns');\n  const { incrementCampaignUsage, canCreateCampaign } = await import('./profiles');\n\n  // Check if user can create more campaigns\n  const canCreate = await canCreateCampaign();\n  if (!canCreate.success) {\n    return canCreate as any;\n  }\n\n  if (!canCreate.data) {\n    return {\n      success: false,\n      error: 'Monthly campaign limit reached'\n    };\n  }\n\n  // Create the campaign\n  const campaignResult = await createCampaign(campaignData);\n  if (!campaignResult.success) {\n    return campaignResult;\n  }\n\n  // Increment usage counter\n  await incrementCampaignUsage();\n\n  return campaignResult;\n}\n\n/**\n * Create a lead from capture form data\n */\nexport async function createLeadFromCapture(\n  campaignId: string,\n  captureData: {\n    name?: string;\n    email?: string;\n    phone?: string;\n    gdprConsent?: boolean;\n    marketingConsent?: boolean;\n  },\n  metadata?: {\n    ip_address?: string;\n    user_agent?: string;\n    referrer?: string;\n    utm_source?: string;\n    utm_medium?: string;\n    utm_campaign?: string;\n    utm_term?: string;\n    utm_content?: string;\n  }\n): Promise<DatabaseResult<Lead>> {\n  // Validate required fields\n  if (!captureData.email) {\n    return {\n      success: false,\n      error: 'Email is required',\n      validation_errors: [{\n        field: 'email',\n        message: 'Email address is required',\n        code: 'REQUIRED_FIELD',\n        value: captureData.email\n      }]\n    };\n  }\n\n  // Prepare lead data\n  const leadData: CreateLead = {\n    campaign_id: campaignId,\n    name: captureData.name || null,\n    email: captureData.email,\n    phone: captureData.phone || null,\n    ip_address: metadata?.ip_address || null,\n    user_agent: metadata?.user_agent || null,\n    referrer: metadata?.referrer || null,\n    utm_source: metadata?.utm_source || null,\n    utm_medium: metadata?.utm_medium || null,\n    utm_campaign: metadata?.utm_campaign || null,\n    utm_term: metadata?.utm_term || null,\n    utm_content: metadata?.utm_content || null,\n    metadata: {\n      capture_form: true,\n      gdpr_consent: captureData.gdprConsent || false,\n      marketing_consent: captureData.marketingConsent || false,\n      capture_timestamp: new Date().toISOString()\n    },\n    completed_at: null // Will be set when the full campaign is completed\n  };\n\n  // Create lead with usage tracking\n  return createLeadWithUsageTracking(leadData);\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1941, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/types/campaign-builder.ts"],"sourcesContent":["// Campaign Builder Types\n\nexport interface SectionType {\n  id: string\n  name: string\n  description: string\n  icon: string\n  category: 'input' | 'content' | 'logic' | 'output'\n  color: string\n  defaultSettings?: Record<string, unknown>\n}\n\nexport interface CampaignSection {\n  id: string\n  type: string\n  title: string\n  settings: Record<string, unknown>\n  order: number\n  isVisible: boolean\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface DragItem {\n  id: string\n  type: 'section-type' | 'campaign-section'\n  sectionType?: string\n  data?: Record<string, unknown>\n}\n\n// Available section types for the drag-and-drop menu\nexport const SECTION_TYPES: SectionType[] = [\n  // Input Sections\n  {\n    id: 'question-multiple-choice',\n    name: 'Multiple Choice',\n    description: 'Single or multiple selection questions',\n    icon: 'CheckSquare',\n    category: 'input',\n    color: 'bg-blue-100 text-blue-800 border-blue-200',\n    defaultSettings: {\n      question: 'What is your preference?',\n      options: ['Option 1', 'Option 2', 'Option 3'],\n      allowMultiple: false,\n      required: true\n    }\n  },\n  {\n    id: 'question-text',\n    name: 'Text Input',\n    description: 'Short text or long text responses',\n    icon: 'Type',\n    category: 'input',\n    color: 'bg-blue-100 text-blue-800 border-blue-200',\n    defaultSettings: {\n      question: 'Please provide your answer',\n      placeholder: 'Type your answer here...',\n      maxLength: 500,\n      required: true,\n      inputType: 'text'\n    }\n  },\n  {\n    id: 'question-rating',\n    name: 'Rating Scale',\n    description: 'Star ratings or numeric scales',\n    icon: 'Star',\n    category: 'input',\n    color: 'bg-blue-100 text-blue-800 border-blue-200',\n    defaultSettings: {\n      question: 'How would you rate this?',\n      scale: 5,\n      scaleType: 'stars',\n      required: true\n    }\n  },\n  {\n    id: 'capture-email',\n    name: 'Email Capture',\n    description: 'Collect email addresses',\n    icon: 'Mail',\n    category: 'input',\n    color: 'bg-green-100 text-green-800 border-green-200',\n    defaultSettings: {\n      label: 'Email Address',\n      placeholder: 'Enter your email...',\n      required: true,\n      validation: 'email'\n    }\n  },\n  {\n    id: 'capture-contact',\n    name: 'Contact Form',\n    description: 'Full contact information collection',\n    icon: 'UserPlus',\n    category: 'input',\n    color: 'bg-green-100 text-green-800 border-green-200',\n    defaultSettings: {\n      fields: ['name', 'email', 'phone'],\n      requiredFields: ['name', 'email'],\n      title: 'Get in Touch'\n    }\n  },\n  {\n    id: 'capture',\n    name: 'Lead Capture',\n    description: 'Flexible lead data collection form',\n    icon: 'Users',\n    category: 'input',\n    color: 'bg-green-100 text-green-800 border-green-200',\n    defaultSettings: {\n      title: 'Get Your Results',\n      subheading: 'Enter your information to unlock your personalized results',\n      enabledFields: {\n        name: true,\n        email: true,\n        phone: false\n      },\n      requiredFields: {\n        name: true,\n        email: true,\n        phone: false\n      },\n      fieldLabels: {\n        name: 'Full Name',\n        email: 'Email Address',\n        phone: 'Phone Number'\n      },\n      fieldPlaceholders: {\n        name: 'Enter your full name',\n        email: 'your@email.com',\n        phone: '+1 (555) 123-4567'\n      },\n      submitButtonText: 'Get My Results',\n      gdprConsent: false,\n      marketingConsent: false\n    }\n  },\n\n  // Content Sections\n  {\n    id: 'info-text',\n    name: 'Text Block',\n    description: 'Rich text content and paragraphs',\n    icon: 'FileText',\n    category: 'content',\n    color: 'bg-purple-100 text-purple-800 border-purple-200',\n    defaultSettings: {\n      title: 'Information',\n      content: 'Add your content here...',\n      alignment: 'left'\n    }\n  },\n  {\n    id: 'info-image',\n    name: 'Image',\n    description: 'Images with optional captions',\n    icon: 'Image',\n    category: 'content',\n    color: 'bg-purple-100 text-purple-800 border-purple-200',\n    defaultSettings: {\n      src: '',\n      alt: '',\n      caption: '',\n      alignment: 'center'\n    }\n  },\n  {\n    id: 'info-video',\n    name: 'Video',\n    description: 'Embedded videos and media',\n    icon: 'Play',\n    category: 'content',\n    color: 'bg-purple-100 text-purple-800 border-purple-200',\n    defaultSettings: {\n      src: '',\n      title: '',\n      autoplay: false,\n      controls: true\n    }\n  },\n\n  // Logic Sections\n  {\n    id: 'logic-conditional',\n    name: 'Conditional Logic',\n    description: 'Show/hide content based on answers',\n    icon: 'GitBranch',\n    category: 'logic',\n    color: 'bg-orange-100 text-orange-800 border-orange-200',\n    defaultSettings: {\n      conditions: [],\n      actions: []\n    }\n  },\n  {\n    id: 'logic-calculator',\n    name: 'Score Calculator',\n    description: 'Calculate scores based on responses',\n    icon: 'Calculator',\n    category: 'logic',\n    color: 'bg-orange-100 text-orange-800 border-orange-200',\n    defaultSettings: {\n      scoring: {},\n      showScore: true\n    }\n  },\n\n  // Output Sections\n  {\n    id: 'output-results',\n    name: 'Results Page',\n    description: 'Display personalized results',\n    icon: 'Target',\n    category: 'output',\n    color: 'bg-emerald-100 text-emerald-800 border-emerald-200',\n    defaultSettings: {\n      title: 'Your Results',\n      content: 'Based on your answers...',\n      showScore: false\n    }\n  },\n  {\n    id: 'output-download',\n    name: 'Download Link',\n    description: 'Provide downloadable resources',\n    icon: 'Download',\n    category: 'output',\n    color: 'bg-emerald-100 text-emerald-800 border-emerald-200',\n    defaultSettings: {\n      title: 'Download Your Resource',\n      description: 'Click below to download',\n      fileUrl: '',\n      fileName: 'resource.pdf'\n    }\n  },\n  {\n    id: 'output-redirect',\n    name: 'Redirect',\n    description: 'Redirect to external URL',\n    icon: 'ExternalLink',\n    category: 'output',\n    color: 'bg-emerald-100 text-emerald-800 border-emerald-200',\n    defaultSettings: {\n      url: '',\n      delay: 0,\n      message: 'Redirecting...'\n    }\n  }\n]\n\n// Helper functions\nexport const getSectionTypeById = (id: string): SectionType | undefined => {\n  return SECTION_TYPES.find(type => type.id === id)\n}\n\nexport const getSectionTypesByCategory = (category: SectionType['category']): SectionType[] => {\n  return SECTION_TYPES.filter(type => type.category === category)\n}\n\nexport const SECTION_CATEGORIES = [\n  { id: 'input', name: 'Input & Questions', icon: 'HelpCircle' },\n  { id: 'content', name: 'Content', icon: 'FileText' },\n  { id: 'logic', name: 'Logic & Flow', icon: 'GitBranch' },\n  { id: 'output', name: 'Output & Results', icon: 'Target' }\n] as const "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2212, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n// This check can be removed, it is just for tutorial purposes\nexport const hasEnvVars =\n  process.env.NEXT_PUBLIC_SUPABASE_URL &&\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n"],"names":[],"mappings":";;;;AASE;AATF;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAGO,MAAM,aACX","debugId":null}},
    {"offset": {"line": 2234, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/types/output-section.ts"],"sourcesContent":["/**\n * Output Section Types\n * \n * Types for output sections that display personalized results combining\n * user inputs and AI-generated outputs with variable interpolation.\n */\n\nimport { CampaignSection } from './campaign-builder'\nimport { VariableInfo } from '@/lib/utils/variable-extractor'\n\n// =============================================================================\n// CORE OUTPUT SECTION TYPES\n// =============================================================================\n\nexport interface OutputSectionSettings {\n  title: string\n  content: string\n  template?: string\n  variables?: string[]\n  showScore?: boolean\n  fileUrl?: string\n  fileName?: string\n  url?: string\n  delay?: number\n  message?: string\n  enableVariableInterpolation?: boolean\n  formatting?: OutputFormattingOptions\n  conditionalContent?: ConditionalContentRule[]\n}\n\nexport interface OutputFormattingOptions {\n  dateFormat?: string\n  numberFormat?: {\n    style?: 'decimal' | 'currency' | 'percent'\n    currency?: string\n    minimumFractionDigits?: number\n    maximumFractionDigits?: number\n  }\n  textTransform?: 'none' | 'uppercase' | 'lowercase' | 'capitalize'\n  customFormatters?: Record<string, (value: any) => string>\n}\n\n// =============================================================================\n// VARIABLE INTERPOLATION TYPES\n// =============================================================================\n\nexport interface VariableInterpolationContext {\n  variables: Record<string, any>\n  availableVariables: VariableInfo[]\n  formatters?: Record<string, (value: any) => string>\n  conditionalRules?: ConditionalContentRule[]\n}\n\nexport interface VariableReference {\n  name: string\n  path?: string[] // For nested object access like @user.profile.name\n  formatter?: string\n  defaultValue?: any\n  condition?: VariableCondition\n}\n\nexport interface VariableCondition {\n  type: 'equals' | 'not_equals' | 'greater_than' | 'less_than' | 'contains' | 'exists'\n  value?: any\n  variableName?: string\n}\n\n// =============================================================================\n// CONDITIONAL CONTENT TYPES\n// =============================================================================\n\nexport interface ConditionalContentRule {\n  id: string\n  condition: VariableCondition\n  content: string\n  priority: number\n  fallbackContent?: string\n}\n\nexport interface ContentBlock {\n  id: string\n  type: 'text' | 'variable' | 'conditional' | 'formatted'\n  content: string\n  variable?: VariableReference\n  condition?: VariableCondition\n  formatting?: OutputFormattingOptions\n}\n\n// =============================================================================\n// INTERPOLATION RESULT TYPES\n// =============================================================================\n\nexport interface InterpolationResult {\n  success: boolean\n  content: string\n  processedVariables: string[]\n  missingVariables: string[]\n  errors: string[]\n  warnings: string[]\n  usedConditionalRules: string[]\n}\n\nexport interface VariablePreviewContext {\n  variables: Record<string, any>\n  previewMode: boolean\n  showMissingVariables: boolean\n  highlightVariables: boolean\n}\n\n// =============================================================================\n// OUTPUT SECTION COMPONENT TYPES\n// =============================================================================\n\nexport interface OutputSectionProps {\n  section: CampaignSection\n  isPreview?: boolean\n  onUpdate: (updates: Partial<CampaignSection>) => Promise<void>\n  className?: string\n  variableContext?: VariableInterpolationContext\n  previewContext?: VariablePreviewContext\n}\n\nexport interface VariableInterpolatorProps {\n  content: string\n  context: VariableInterpolationContext\n  onUpdate?: (result: InterpolationResult) => void\n  className?: string\n  enableRealTimePreview?: boolean\n}\n\n// =============================================================================\n// PARSING AND VALIDATION TYPES\n// =============================================================================\n\nexport interface VariableParseResult {\n  variables: VariableReference[]\n  blocks: ContentBlock[]\n  errors: string[]\n  warnings: string[]\n}\n\nexport interface OutputValidationResult {\n  isValid: boolean\n  errors: string[]\n  warnings: string[]\n  missingVariables: string[]\n  unresolvedReferences: string[]\n}\n\n// =============================================================================\n// UTILITY TYPES\n// =============================================================================\n\nexport interface VariableFormatter {\n  name: string\n  description: string\n  example: string\n  formatter: (value: any, options?: any) => string\n}\n\nexport interface InterpolationOptions {\n  enableConditionalContent?: boolean\n  enableFormatting?: boolean\n  enableNestedAccess?: boolean\n  strictMode?: boolean\n  maxDepth?: number\n  missingVariablePlaceholder?: string\n}\n\n// =============================================================================\n// CONSTANTS\n// =============================================================================\n\nexport const DEFAULT_INTERPOLATION_OPTIONS: InterpolationOptions = {\n  enableConditionalContent: true,\n  enableFormatting: true,\n  enableNestedAccess: true,\n  strictMode: false,\n  maxDepth: 5,\n  missingVariablePlaceholder: '[variable not found]'\n}\n\nexport const BUILT_IN_FORMATTERS: Record<string, VariableFormatter> = {\n  uppercase: {\n    name: 'uppercase',\n    description: 'Convert text to uppercase',\n    example: '@name | uppercase',\n    formatter: (value: any) => String(value).toUpperCase()\n  },\n  lowercase: {\n    name: 'lowercase',\n    description: 'Convert text to lowercase',\n    example: '@name | lowercase',\n    formatter: (value: any) => String(value).toLowerCase()\n  },\n  capitalize: {\n    name: 'capitalize',\n    description: 'Capitalize first letter of each word',\n    example: '@name | capitalize',\n    formatter: (value: any) => String(value).replace(/\\b\\w/g, l => l.toUpperCase())\n  },\n  currency: {\n    name: 'currency',\n    description: 'Format number as currency',\n    example: '@price | currency',\n    formatter: (value: any, options = { currency: 'USD' }) => {\n      const num = Number(value)\n      return isNaN(num) ? String(value) : new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: options.currency\n      }).format(num)\n    }\n  },\n  date: {\n    name: 'date',\n    description: 'Format date value',\n    example: '@created_at | date',\n    formatter: (value: any, options = { dateStyle: 'medium' }) => {\n      const date = new Date(value)\n      return isNaN(date.getTime()) ? String(value) : date.toLocaleDateString('en-US', options)\n    }\n  },\n  truncate: {\n    name: 'truncate',\n    description: 'Truncate text to specified length',\n    example: '@description | truncate:100',\n    formatter: (value: any, options = { length: 50 }) => {\n      const str = String(value)\n      return str.length > options.length ? str.substring(0, options.length) + '...' : str\n    }\n  }\n}\n\nexport const VARIABLE_REFERENCE_PATTERNS = {\n  // Basic variable: @variableName\n  basic: /@([a-zA-Z_][a-zA-Z0-9_]*)/g,\n  \n  // Nested variable: @user.profile.name\n  nested: /@([a-zA-Z_][a-zA-Z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z0-9_]*)*)/g,\n  \n  // Variable with formatter: @variableName | formatter\n  formatted: /@([a-zA-Z_][a-zA-Z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z0-9_]*)*)\\s*\\|\\s*([a-zA-Z_][a-zA-Z0-9_]*(?::[^@\\|\\}]+)?)/g,\n  \n  // Conditional variable: {if @variableName}content{/if}\n  conditional: /\\{if\\s+@([a-zA-Z_][a-zA-Z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z0-9_]*)*)\\s*([=!<>]+\\s*[^}]+)?\\}([\\s\\S]*?)\\{\\/if\\}/g\n} "],"names":[],"mappings":"AAAA;;;;;CAKC;;;;;AAwKM,MAAM,gCAAsD;IACjE,0BAA0B;IAC1B,kBAAkB;IAClB,oBAAoB;IACpB,YAAY;IACZ,UAAU;IACV,4BAA4B;AAC9B;AAEO,MAAM,sBAAyD;IACpE,WAAW;QACT,MAAM;QACN,aAAa;QACb,SAAS;QACT,WAAW,CAAC,QAAe,OAAO,OAAO,WAAW;IACtD;IACA,WAAW;QACT,MAAM;QACN,aAAa;QACb,SAAS;QACT,WAAW,CAAC,QAAe,OAAO,OAAO,WAAW;IACtD;IACA,YAAY;QACV,MAAM;QACN,aAAa;QACb,SAAS;QACT,WAAW,CAAC,QAAe,OAAO,OAAO,OAAO,CAAC,SAAS,CAAA,IAAK,EAAE,WAAW;IAC9E;IACA,UAAU;QACR,MAAM;QACN,aAAa;QACb,SAAS;QACT,WAAW,CAAC,OAAY,UAAU;YAAE,UAAU;QAAM,CAAC;YACnD,MAAM,MAAM,OAAO;YACnB,OAAO,MAAM,OAAO,OAAO,SAAS,IAAI,KAAK,YAAY,CAAC,SAAS;gBACjE,OAAO;gBACP,UAAU,QAAQ,QAAQ;YAC5B,GAAG,MAAM,CAAC;QACZ;IACF;IACA,MAAM;QACJ,MAAM;QACN,aAAa;QACb,SAAS;QACT,WAAW,CAAC,OAAY,UAAU;YAAE,WAAW;QAAS,CAAC;YACvD,MAAM,OAAO,IAAI,KAAK;YACtB,OAAO,MAAM,KAAK,OAAO,MAAM,OAAO,SAAS,KAAK,kBAAkB,CAAC,SAAS;QAClF;IACF;IACA,UAAU;QACR,MAAM;QACN,aAAa;QACb,SAAS;QACT,WAAW,CAAC,OAAY,UAAU;YAAE,QAAQ;QAAG,CAAC;YAC9C,MAAM,MAAM,OAAO;YACnB,OAAO,IAAI,MAAM,GAAG,QAAQ,MAAM,GAAG,IAAI,SAAS,CAAC,GAAG,QAAQ,MAAM,IAAI,QAAQ;QAClF;IACF;AACF;AAEO,MAAM,8BAA8B;IACzC,gCAAgC;IAChC,OAAO;IAEP,sCAAsC;IACtC,QAAQ;IAER,qDAAqD;IACrD,WAAW;IAEX,uDAAuD;IACvD,aAAa;AACf","debugId":null}},
    {"offset": {"line": 2327, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/utils/variable-interpolator.ts"],"sourcesContent":["/**\n * Variable Interpolation Utility\n * \n * Core system for processing variable references in content and replacing them\n * with actual values from user inputs and AI outputs.\n */\n\nimport { \n  VariableInterpolationContext,\n  VariableReference,\n  InterpolationResult,\n  VariableParseResult,\n  VariableCondition,\n  InterpolationOptions,\n  DEFAULT_INTERPOLATION_OPTIONS,\n  BUILT_IN_FORMATTERS,\n  VARIABLE_REFERENCE_PATTERNS\n} from '@/lib/types/output-section'\n\n// =============================================================================\n// MAIN INTERPOLATION CLASS\n// =============================================================================\n\nexport class VariableInterpolator {\n  private options: InterpolationOptions\n  private formatters: Record<string, (value: any, options?: any) => string>\n\n  constructor(options: Partial<InterpolationOptions> = {}) {\n    this.options = { ...DEFAULT_INTERPOLATION_OPTIONS, ...options }\n    this.formatters = {}\n    \n    // Register built-in formatters\n    Object.entries(BUILT_IN_FORMATTERS).forEach(([name, formatter]) => {\n      this.formatters[name] = formatter.formatter\n    })\n  }\n\n  // =============================================================================\n  // PUBLIC INTERFACE\n  // =============================================================================\n\n  /**\n   * Main interpolation method - processes content with variables\n   */\n  interpolate(content: string, context: VariableInterpolationContext): InterpolationResult {\n    const result: InterpolationResult = {\n      success: true,\n      content,\n      processedVariables: [],\n      missingVariables: [],\n      errors: [],\n      warnings: [],\n      usedConditionalRules: []\n    }\n\n    try {\n      // Step 1: Parse variable references\n      const parseResult = this.parseVariableReferences(content)\n      if (parseResult.errors.length > 0) {\n        result.errors.push(...parseResult.errors)\n      }\n      if (parseResult.warnings.length > 0) {\n        result.warnings.push(...parseResult.warnings)\n      }\n\n      // Step 2: Process conditional content\n      let processedContent = content\n      if (this.options.enableConditionalContent) {\n        processedContent = this.processConditionalContent(processedContent, context, result)\n      }\n\n      // Step 3: Replace variable references\n      processedContent = this.replaceVariableReferences(processedContent, context, result)\n\n      result.content = processedContent\n      result.success = result.errors.length === 0\n\n    } catch (error) {\n      result.success = false\n      result.errors.push(`Interpolation failed: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Parse content to find all variable references\n   */\n  parseVariableReferences(content: string): VariableParseResult {\n    const result: VariableParseResult = {\n      variables: [],\n      blocks: [],\n      errors: [],\n      warnings: []\n    }\n\n    try {\n      // Find all variable patterns\n      const patterns = [\n        { type: 'formatted', regex: VARIABLE_REFERENCE_PATTERNS.formatted },\n        { type: 'nested', regex: VARIABLE_REFERENCE_PATTERNS.nested },\n        { type: 'basic', regex: VARIABLE_REFERENCE_PATTERNS.basic }\n      ]\n\n      const foundVariables = new Set<string>()\n\n      patterns.forEach(({ type, regex }) => {\n        let match\n        const regexCopy = new RegExp(regex.source, regex.flags)\n        \n        while ((match = regexCopy.exec(content)) !== null) {\n          const fullMatch = match[0]\n          const variableName = match[1]\n          const formatter = type === 'formatted' ? match[2] : undefined\n\n          if (!foundVariables.has(variableName)) {\n            foundVariables.add(variableName)\n            \n            const variableRef: VariableReference = {\n              name: variableName,\n              path: variableName.includes('.') ? variableName.split('.') : undefined,\n              formatter: formatter\n            }\n\n            result.variables.push(variableRef)\n          }\n        }\n      })\n\n    } catch (error) {\n      result.errors.push(`Failed to parse variable references: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Add a custom formatter\n   */\n  addFormatter(name: string, formatter: (value: any, options?: any) => string): void {\n    this.formatters[name] = formatter\n  }\n\n  // =============================================================================\n  // PRIVATE IMPLEMENTATION\n  // =============================================================================\n\n  /**\n   * Process conditional content blocks\n   */\n  private processConditionalContent(\n    content: string, \n    context: VariableInterpolationContext, \n    result: InterpolationResult\n  ): string {\n    const conditionalRegex = new RegExp(VARIABLE_REFERENCE_PATTERNS.conditional.source, VARIABLE_REFERENCE_PATTERNS.conditional.flags)\n    \n    return content.replace(conditionalRegex, (match, variableName, condition, conditionalContent) => {\n      try {\n        const variableValue = this.getVariableValue(variableName, context)\n        const shouldShow = this.evaluateCondition(variableName, variableValue, condition, context)\n        \n        if (shouldShow) {\n          result.usedConditionalRules.push(`if ${variableName}`)\n          return conditionalContent\n        } else {\n          return ''\n        }\n      } catch (error) {\n        result.warnings.push(`Failed to process conditional content for ${variableName}: ${error instanceof Error ? error.message : 'Unknown error'}`)\n        return match // Return original if processing fails\n      }\n    })\n  }\n\n  /**\n   * Replace variable references with actual values\n   */\n  private replaceVariableReferences(\n    content: string, \n    context: VariableInterpolationContext, \n    result: InterpolationResult\n  ): string {\n    // Process formatted variables first\n    content = content.replace(VARIABLE_REFERENCE_PATTERNS.formatted, (match, variableName, formatterSpec) => {\n      return this.processVariableReplacement(variableName, context, result, formatterSpec)\n    })\n\n    // Process remaining basic variables\n    content = content.replace(VARIABLE_REFERENCE_PATTERNS.basic, (match, variableName) => {\n      // Skip if already processed as formatted\n      if (content.includes(`@${variableName} |`) || content.includes(`@${variableName}|`)) {\n        return match\n      }\n      return this.processVariableReplacement(variableName, context, result)\n    })\n\n    return content\n  }\n\n  /**\n   * Process a single variable replacement\n   */\n  private processVariableReplacement(\n    variableName: string,\n    context: VariableInterpolationContext,\n    result: InterpolationResult,\n    formatterSpec?: string\n  ): string {\n    try {\n      const value = this.getVariableValue(variableName, context)\n      \n      if (value === undefined || value === null) {\n        result.missingVariables.push(variableName)\n        return this.options.missingVariablePlaceholder || `[${variableName} not found]`\n      }\n\n      result.processedVariables.push(variableName)\n\n      // Apply formatting if specified\n      if (formatterSpec && this.options.enableFormatting) {\n        return this.applyFormatter(value, formatterSpec, result)\n      }\n\n      return this.formatValue(value)\n    } catch (error) {\n      result.errors.push(`Failed to process variable ${variableName}: ${error instanceof Error ? error.message : 'Unknown error'}`)\n      return `[Error: ${variableName}]`\n    }\n  }\n\n  /**\n   * Get variable value with nested property support\n   */\n  private getVariableValue(variableName: string, context: VariableInterpolationContext): any {\n    if (!this.options.enableNestedAccess || !variableName.includes('.')) {\n      return context.variables[variableName]\n    }\n\n    // Handle nested access like user.profile.name\n    const path = variableName.split('.')\n    let value = context.variables[path[0]]\n\n    for (let i = 1; i < path.length && value !== undefined && value !== null; i++) {\n      if (typeof value === 'object' && path[i] in value) {\n        value = value[path[i]]\n      } else {\n        return undefined\n      }\n    }\n\n    return value\n  }\n\n  /**\n   * Apply formatter to a value\n   */\n  private applyFormatter(value: any, formatterSpec: string, result: InterpolationResult): string {\n    try {\n      const [formatterName, optionsStr] = formatterSpec.split(':')\n      const formatter = this.formatters[formatterName]\n\n      if (!formatter) {\n        result.warnings.push(`Unknown formatter: ${formatterName}`)\n        return this.formatValue(value)\n      }\n\n      let options: any = {}\n      if (optionsStr) {\n        try {\n          // Simple options parsing (can be enhanced)\n          if (optionsStr.includes('=')) {\n            // Parse key=value pairs\n            optionsStr.split(',').forEach(pair => {\n              const [key, val] = pair.split('=')\n              if (key && val) {\n                options[key.trim()] = isNaN(Number(val)) ? val.trim() : Number(val)\n              }\n            })\n          } else {\n            // Single numeric option\n            options = { length: Number(optionsStr) }\n          }\n        } catch {\n          // Ignore parsing errors for options\n        }\n      }\n\n      return formatter(value, options)\n    } catch (error) {\n      result.warnings.push(`Formatter error: ${error instanceof Error ? error.message : 'Unknown error'}`)\n      return this.formatValue(value)\n    }\n  }\n\n  /**\n   * Basic value formatting\n   */\n  private formatValue(value: any): string {\n    if (value === null || value === undefined) {\n      return ''\n    }\n\n    if (typeof value === 'object') {\n      return JSON.stringify(value)\n    }\n\n    return String(value)\n  }\n\n  /**\n   * Evaluate a condition for conditional content\n   */\n  private evaluateCondition(\n    variableName: string,\n    variableValue: any,\n    conditionStr: string | undefined,\n    context: VariableInterpolationContext\n  ): boolean {\n    // If no condition specified, just check if variable exists and is truthy\n    if (!conditionStr) {\n      return variableValue !== undefined && variableValue !== null && variableValue !== ''\n    }\n\n    try {\n      // Parse simple conditions like \"= value\", \"> 5\", \"!= null\"\n      const trimmed = conditionStr.trim()\n      \n      if (trimmed.startsWith('=')) {\n        const expectedValue = trimmed.substring(1).trim()\n        return String(variableValue) === expectedValue\n      }\n      \n      if (trimmed.startsWith('!=')) {\n        const expectedValue = trimmed.substring(2).trim()\n        return String(variableValue) !== expectedValue\n      }\n      \n      if (trimmed.startsWith('>')) {\n        const expectedValue = trimmed.substring(1).trim()\n        return Number(variableValue) > Number(expectedValue)\n      }\n      \n      if (trimmed.startsWith('<')) {\n        const expectedValue = trimmed.substring(1).trim()\n        return Number(variableValue) < Number(expectedValue)\n      }\n\n      // Default to existence check\n      return variableValue !== undefined && variableValue !== null && variableValue !== ''\n    } catch {\n      // If parsing fails, default to existence check\n      return variableValue !== undefined && variableValue !== null && variableValue !== ''\n    }\n  }\n}\n\n// =============================================================================\n// CONVENIENCE FUNCTIONS\n// =============================================================================\n\n/**\n * Quick interpolation function for simple use cases\n */\nexport function interpolateVariables(\n  content: string, \n  variables: Record<string, any>, \n  options?: Partial<InterpolationOptions>\n): InterpolationResult {\n  const interpolator = new VariableInterpolator(options)\n  const context: VariableInterpolationContext = {\n    variables,\n    availableVariables: []\n  }\n  \n  return interpolator.interpolate(content, context)\n}\n\n/**\n * Extract all variable references from content\n */\nexport function extractVariableReferences(content: string): string[] {\n  const interpolator = new VariableInterpolator()\n  const parseResult = interpolator.parseVariableReferences(content)\n  return parseResult.variables.map(v => v.name)\n}\n\n/**\n * Validate content for variable interpolation\n */\nexport function validateInterpolationContent(content: string, availableVariables: string[]): {\n  isValid: boolean\n  errors: string[]\n  warnings: string[]\n  missingVariables: string[]\n} {\n  const references = extractVariableReferences(content)\n  const availableSet = new Set(availableVariables)\n  const missingVariables = references.filter(ref => !availableSet.has(ref))\n\n  return {\n    isValid: missingVariables.length === 0,\n    errors: [],\n    warnings: missingVariables.length > 0 ? [`Missing variables: ${missingVariables.join(', ')}`] : [],\n    missingVariables\n  }\n}\n\nexport default VariableInterpolator "],"names":[],"mappings":"AAAA;;;;;CAKC;;;;;;;AAED;;AAgBO,MAAM;IACH,QAA6B;IAC7B,WAAiE;IAEzE,YAAY,UAAyC,CAAC,CAAC,CAAE;QACvD,IAAI,CAAC,OAAO,GAAG;YAAE,GAAG,oIAAA,CAAA,gCAA6B;YAAE,GAAG,OAAO;QAAC;QAC9D,IAAI,CAAC,UAAU,GAAG,CAAC;QAEnB,+BAA+B;QAC/B,OAAO,OAAO,CAAC,oIAAA,CAAA,sBAAmB,EAAE,OAAO,CAAC,CAAC,CAAC,MAAM,UAAU;YAC5D,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,UAAU,SAAS;QAC7C;IACF;IAEA,gFAAgF;IAChF,mBAAmB;IACnB,gFAAgF;IAEhF;;GAEC,GACD,YAAY,OAAe,EAAE,OAAqC,EAAuB;QACvF,MAAM,SAA8B;YAClC,SAAS;YACT;YACA,oBAAoB,EAAE;YACtB,kBAAkB,EAAE;YACpB,QAAQ,EAAE;YACV,UAAU,EAAE;YACZ,sBAAsB,EAAE;QAC1B;QAEA,IAAI;YACF,oCAAoC;YACpC,MAAM,cAAc,IAAI,CAAC,uBAAuB,CAAC;YACjD,IAAI,YAAY,MAAM,CAAC,MAAM,GAAG,GAAG;gBACjC,OAAO,MAAM,CAAC,IAAI,IAAI,YAAY,MAAM;YAC1C;YACA,IAAI,YAAY,QAAQ,CAAC,MAAM,GAAG,GAAG;gBACnC,OAAO,QAAQ,CAAC,IAAI,IAAI,YAAY,QAAQ;YAC9C;YAEA,sCAAsC;YACtC,IAAI,mBAAmB;YACvB,IAAI,IAAI,CAAC,OAAO,CAAC,wBAAwB,EAAE;gBACzC,mBAAmB,IAAI,CAAC,yBAAyB,CAAC,kBAAkB,SAAS;YAC/E;YAEA,sCAAsC;YACtC,mBAAmB,IAAI,CAAC,yBAAyB,CAAC,kBAAkB,SAAS;YAE7E,OAAO,OAAO,GAAG;YACjB,OAAO,OAAO,GAAG,OAAO,MAAM,CAAC,MAAM,KAAK;QAE5C,EAAE,OAAO,OAAO;YACd,OAAO,OAAO,GAAG;YACjB,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,sBAAsB,EAAE,iBAAiB,QAAQ,MAAM,OAAO,GAAG,iBAAiB;QACxG;QAEA,OAAO;IACT;IAEA;;GAEC,GACD,wBAAwB,OAAe,EAAuB;QAC5D,MAAM,SAA8B;YAClC,WAAW,EAAE;YACb,QAAQ,EAAE;YACV,QAAQ,EAAE;YACV,UAAU,EAAE;QACd;QAEA,IAAI;YACF,6BAA6B;YAC7B,MAAM,WAAW;gBACf;oBAAE,MAAM;oBAAa,OAAO,oIAAA,CAAA,8BAA2B,CAAC,SAAS;gBAAC;gBAClE;oBAAE,MAAM;oBAAU,OAAO,oIAAA,CAAA,8BAA2B,CAAC,MAAM;gBAAC;gBAC5D;oBAAE,MAAM;oBAAS,OAAO,oIAAA,CAAA,8BAA2B,CAAC,KAAK;gBAAC;aAC3D;YAED,MAAM,iBAAiB,IAAI;YAE3B,SAAS,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE;gBAC/B,IAAI;gBACJ,MAAM,YAAY,IAAI,OAAO,MAAM,MAAM,EAAE,MAAM,KAAK;gBAEtD,MAAO,CAAC,QAAQ,UAAU,IAAI,CAAC,QAAQ,MAAM,KAAM;oBACjD,MAAM,YAAY,KAAK,CAAC,EAAE;oBAC1B,MAAM,eAAe,KAAK,CAAC,EAAE;oBAC7B,MAAM,YAAY,SAAS,cAAc,KAAK,CAAC,EAAE,GAAG;oBAEpD,IAAI,CAAC,eAAe,GAAG,CAAC,eAAe;wBACrC,eAAe,GAAG,CAAC;wBAEnB,MAAM,cAAiC;4BACrC,MAAM;4BACN,MAAM,aAAa,QAAQ,CAAC,OAAO,aAAa,KAAK,CAAC,OAAO;4BAC7D,WAAW;wBACb;wBAEA,OAAO,SAAS,CAAC,IAAI,CAAC;oBACxB;gBACF;YACF;QAEF,EAAE,OAAO,OAAO;YACd,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,qCAAqC,EAAE,iBAAiB,QAAQ,MAAM,OAAO,GAAG,iBAAiB;QACvH;QAEA,OAAO;IACT;IAEA;;GAEC,GACD,aAAa,IAAY,EAAE,SAAgD,EAAQ;QACjF,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG;IAC1B;IAEA,gFAAgF;IAChF,yBAAyB;IACzB,gFAAgF;IAEhF;;GAEC,GACD,AAAQ,0BACN,OAAe,EACf,OAAqC,EACrC,MAA2B,EACnB;QACR,MAAM,mBAAmB,IAAI,OAAO,oIAAA,CAAA,8BAA2B,CAAC,WAAW,CAAC,MAAM,EAAE,oIAAA,CAAA,8BAA2B,CAAC,WAAW,CAAC,KAAK;QAEjI,OAAO,QAAQ,OAAO,CAAC,kBAAkB,CAAC,OAAO,cAAc,WAAW;YACxE,IAAI;gBACF,MAAM,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,cAAc;gBAC1D,MAAM,aAAa,IAAI,CAAC,iBAAiB,CAAC,cAAc,eAAe,WAAW;gBAElF,IAAI,YAAY;oBACd,OAAO,oBAAoB,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,cAAc;oBACrD,OAAO;gBACT,OAAO;oBACL,OAAO;gBACT;YACF,EAAE,OAAO,OAAO;gBACd,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,0CAA0C,EAAE,aAAa,EAAE,EAAE,iBAAiB,QAAQ,MAAM,OAAO,GAAG,iBAAiB;gBAC7I,OAAO,MAAM,sCAAsC;;YACrD;QACF;IACF;IAEA;;GAEC,GACD,AAAQ,0BACN,OAAe,EACf,OAAqC,EACrC,MAA2B,EACnB;QACR,oCAAoC;QACpC,UAAU,QAAQ,OAAO,CAAC,oIAAA,CAAA,8BAA2B,CAAC,SAAS,EAAE,CAAC,OAAO,cAAc;YACrF,OAAO,IAAI,CAAC,0BAA0B,CAAC,cAAc,SAAS,QAAQ;QACxE;QAEA,oCAAoC;QACpC,UAAU,QAAQ,OAAO,CAAC,oIAAA,CAAA,8BAA2B,CAAC,KAAK,EAAE,CAAC,OAAO;YACnE,yCAAyC;YACzC,IAAI,QAAQ,QAAQ,CAAC,CAAC,CAAC,EAAE,aAAa,EAAE,CAAC,KAAK,QAAQ,QAAQ,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,GAAG;gBACnF,OAAO;YACT;YACA,OAAO,IAAI,CAAC,0BAA0B,CAAC,cAAc,SAAS;QAChE;QAEA,OAAO;IACT;IAEA;;GAEC,GACD,AAAQ,2BACN,YAAoB,EACpB,OAAqC,EACrC,MAA2B,EAC3B,aAAsB,EACd;QACR,IAAI;YACF,MAAM,QAAQ,IAAI,CAAC,gBAAgB,CAAC,cAAc;YAElD,IAAI,UAAU,aAAa,UAAU,MAAM;gBACzC,OAAO,gBAAgB,CAAC,IAAI,CAAC;gBAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,0BAA0B,IAAI,CAAC,CAAC,EAAE,aAAa,WAAW,CAAC;YACjF;YAEA,OAAO,kBAAkB,CAAC,IAAI,CAAC;YAE/B,gCAAgC;YAChC,IAAI,iBAAiB,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;gBAClD,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,eAAe;YACnD;YAEA,OAAO,IAAI,CAAC,WAAW,CAAC;QAC1B,EAAE,OAAO,OAAO;YACd,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,2BAA2B,EAAE,aAAa,EAAE,EAAE,iBAAiB,QAAQ,MAAM,OAAO,GAAG,iBAAiB;YAC5H,OAAO,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QACnC;IACF;IAEA;;GAEC,GACD,AAAQ,iBAAiB,YAAoB,EAAE,OAAqC,EAAO;QACzF,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,IAAI,CAAC,aAAa,QAAQ,CAAC,MAAM;YACnE,OAAO,QAAQ,SAAS,CAAC,aAAa;QACxC;QAEA,8CAA8C;QAC9C,MAAM,OAAO,aAAa,KAAK,CAAC;QAChC,IAAI,QAAQ,QAAQ,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;QAEtC,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,IAAI,UAAU,aAAa,UAAU,MAAM,IAAK;YAC7E,IAAI,OAAO,UAAU,YAAY,IAAI,CAAC,EAAE,IAAI,OAAO;gBACjD,QAAQ,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;YACxB,OAAO;gBACL,OAAO;YACT;QACF;QAEA,OAAO;IACT;IAEA;;GAEC,GACD,AAAQ,eAAe,KAAU,EAAE,aAAqB,EAAE,MAA2B,EAAU;QAC7F,IAAI;YACF,MAAM,CAAC,eAAe,WAAW,GAAG,cAAc,KAAK,CAAC;YACxD,MAAM,YAAY,IAAI,CAAC,UAAU,CAAC,cAAc;YAEhD,IAAI,CAAC,WAAW;gBACd,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,mBAAmB,EAAE,eAAe;gBAC1D,OAAO,IAAI,CAAC,WAAW,CAAC;YAC1B;YAEA,IAAI,UAAe,CAAC;YACpB,IAAI,YAAY;gBACd,IAAI;oBACF,2CAA2C;oBAC3C,IAAI,WAAW,QAAQ,CAAC,MAAM;wBAC5B,wBAAwB;wBACxB,WAAW,KAAK,CAAC,KAAK,OAAO,CAAC,CAAA;4BAC5B,MAAM,CAAC,KAAK,IAAI,GAAG,KAAK,KAAK,CAAC;4BAC9B,IAAI,OAAO,KAAK;gCACd,OAAO,CAAC,IAAI,IAAI,GAAG,GAAG,MAAM,OAAO,QAAQ,IAAI,IAAI,KAAK,OAAO;4BACjE;wBACF;oBACF,OAAO;wBACL,wBAAwB;wBACxB,UAAU;4BAAE,QAAQ,OAAO;wBAAY;oBACzC;gBACF,EAAE,OAAM;gBACN,oCAAoC;gBACtC;YACF;YAEA,OAAO,UAAU,OAAO;QAC1B,EAAE,OAAO,OAAO;YACd,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,QAAQ,MAAM,OAAO,GAAG,iBAAiB;YACnG,OAAO,IAAI,CAAC,WAAW,CAAC;QAC1B;IACF;IAEA;;GAEC,GACD,AAAQ,YAAY,KAAU,EAAU;QACtC,IAAI,UAAU,QAAQ,UAAU,WAAW;YACzC,OAAO;QACT;QAEA,IAAI,OAAO,UAAU,UAAU;YAC7B,OAAO,KAAK,SAAS,CAAC;QACxB;QAEA,OAAO,OAAO;IAChB;IAEA;;GAEC,GACD,AAAQ,kBACN,YAAoB,EACpB,aAAkB,EAClB,YAAgC,EAChC,OAAqC,EAC5B;QACT,yEAAyE;QACzE,IAAI,CAAC,cAAc;YACjB,OAAO,kBAAkB,aAAa,kBAAkB,QAAQ,kBAAkB;QACpF;QAEA,IAAI;YACF,2DAA2D;YAC3D,MAAM,UAAU,aAAa,IAAI;YAEjC,IAAI,QAAQ,UAAU,CAAC,MAAM;gBAC3B,MAAM,gBAAgB,QAAQ,SAAS,CAAC,GAAG,IAAI;gBAC/C,OAAO,OAAO,mBAAmB;YACnC;YAEA,IAAI,QAAQ,UAAU,CAAC,OAAO;gBAC5B,MAAM,gBAAgB,QAAQ,SAAS,CAAC,GAAG,IAAI;gBAC/C,OAAO,OAAO,mBAAmB;YACnC;YAEA,IAAI,QAAQ,UAAU,CAAC,MAAM;gBAC3B,MAAM,gBAAgB,QAAQ,SAAS,CAAC,GAAG,IAAI;gBAC/C,OAAO,OAAO,iBAAiB,OAAO;YACxC;YAEA,IAAI,QAAQ,UAAU,CAAC,MAAM;gBAC3B,MAAM,gBAAgB,QAAQ,SAAS,CAAC,GAAG,IAAI;gBAC/C,OAAO,OAAO,iBAAiB,OAAO;YACxC;YAEA,6BAA6B;YAC7B,OAAO,kBAAkB,aAAa,kBAAkB,QAAQ,kBAAkB;QACpF,EAAE,OAAM;YACN,+CAA+C;YAC/C,OAAO,kBAAkB,aAAa,kBAAkB,QAAQ,kBAAkB;QACpF;IACF;AACF;AASO,SAAS,qBACd,OAAe,EACf,SAA8B,EAC9B,OAAuC;IAEvC,MAAM,eAAe,IAAI,qBAAqB;IAC9C,MAAM,UAAwC;QAC5C;QACA,oBAAoB,EAAE;IACxB;IAEA,OAAO,aAAa,WAAW,CAAC,SAAS;AAC3C;AAKO,SAAS,0BAA0B,OAAe;IACvD,MAAM,eAAe,IAAI;IACzB,MAAM,cAAc,aAAa,uBAAuB,CAAC;IACzD,OAAO,YAAY,SAAS,CAAC,GAAG,CAAC,CAAA,IAAK,EAAE,IAAI;AAC9C;AAKO,SAAS,6BAA6B,OAAe,EAAE,kBAA4B;IAMxF,MAAM,aAAa,0BAA0B;IAC7C,MAAM,eAAe,IAAI,IAAI;IAC7B,MAAM,mBAAmB,WAAW,MAAM,CAAC,CAAA,MAAO,CAAC,aAAa,GAAG,CAAC;IAEpE,OAAO;QACL,SAAS,iBAAiB,MAAM,KAAK;QACrC,QAAQ,EAAE;QACV,UAAU,iBAAiB,MAAM,GAAG,IAAI;YAAC,CAAC,mBAAmB,EAAE,iBAAiB,IAAI,CAAC,OAAO;SAAC,GAAG,EAAE;QAClG;IACF;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 2646, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevindunbar/Desktop/Design%20Club/Clients/Flint/Lead%20Magnet/flint-prod/lib/utils/variable-extractor.ts"],"sourcesContent":["/**\n * Variable Extractor Utility\n * \n * This utility extracts variables from campaign sections to make them available\n * for use in logic sections via the @-mention system.\n */\n\nimport type { CampaignSection } from '@/lib/types/campaign-builder'\nimport type { CampaignVariable, VariableType, CreateCampaignVariable } from '@/lib/types/database'\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface VariableInfo {\n  id: string\n  name: string\n  displayName: string\n  type: VariableType\n  description: string\n  sectionId: string\n  sectionTitle: string\n  sectionType: string\n  previewValue?: string\n  source: 'user_input'\n}\n\nexport interface VariableExtractionOptions {\n  includePreviewValues?: boolean\n  filterByType?: VariableType[]\n  excludeSectionTypes?: string[]\n}\n\n// =============================================================================\n// VARIABLE EXTRACTION FUNCTIONS\n// =============================================================================\n\n/**\n * Extract variables from a single section\n */\nexport function extractVariablesFromSection(\n  section: CampaignSection,\n  options: VariableExtractionOptions = {}\n): VariableInfo[] {\n  const variables: VariableInfo[] = []\n  \n  // Skip hidden sections or unsupported types\n  if (!section.isVisible || \n      options.excludeSectionTypes?.includes(section.type)) {\n    return variables\n  }\n\n  switch (section.type) {\n    case 'question-text':\n      variables.push({\n        id: `${section.id}_response`,\n        name: createVariableName(section.title),\n        displayName: section.title || 'Text Response',\n        type: 'text',\n        description: `Text response from: ${section.title}`,\n        sectionId: section.id,\n        sectionTitle: section.title,\n        sectionType: section.type,\n        previewValue: options.includePreviewValues ? 'Sample text response...' : undefined,\n        source: 'user_input'\n      })\n      break\n\n    case 'question-multiple-choice':\n      const settings = section.settings as any\n      const selectionType = settings?.selectionType || 'single'\n      \n      variables.push({\n        id: `${section.id}_response`,\n        name: createVariableName(section.title),\n        displayName: section.title || 'Choice Response',\n        type: selectionType === 'multiple' ? 'array' : 'text',\n        description: `${selectionType === 'multiple' ? 'Multiple choice' : 'Single choice'} response from: ${section.title}`,\n        sectionId: section.id,\n        sectionTitle: section.title,\n        sectionType: section.type,\n        previewValue: options.includePreviewValues ? \n          (selectionType === 'multiple' ? '[\"Option 1\", \"Option 2\"]' : 'Option 1') : \n          undefined,\n        source: 'user_input'\n      })\n      break\n\n    case 'question-slider':\n      variables.push({\n        id: `${section.id}_response`,\n        name: createVariableName(section.title),\n        displayName: section.title || 'Slider Value',\n        type: 'number',\n        description: `Numeric slider value from: ${section.title}`,\n        sectionId: section.id,\n        sectionTitle: section.title,\n        sectionType: section.type,\n        previewValue: options.includePreviewValues ? '75' : undefined,\n        source: 'user_input'\n      })\n      break\n\n    case 'capture':\n      const captureSettings = section.settings as any\n      const enabledFields = captureSettings?.enabledFields || {}\n      \n      // Extract each enabled field as a separate variable\n      if (enabledFields.name) {\n        variables.push({\n          id: `${section.id}_name`,\n          name: createVariableName(`${section.title}_name`),\n          displayName: `${section.title} - Name`,\n          type: 'text',\n          description: `Name field from: ${section.title}`,\n          sectionId: section.id,\n          sectionTitle: section.title,\n          sectionType: section.type,\n          previewValue: options.includePreviewValues ? 'John Doe' : undefined,\n          source: 'user_input'\n        })\n      }\n      \n      if (enabledFields.email) {\n        variables.push({\n          id: `${section.id}_email`,\n          name: createVariableName(`${section.title}_email`),\n          displayName: `${section.title} - Email`,\n          type: 'text',\n          description: `Email field from: ${section.title}`,\n          sectionId: section.id,\n          sectionTitle: section.title,\n          sectionType: section.type,\n          previewValue: options.includePreviewValues ? 'john@example.com' : undefined,\n          source: 'user_input'\n        })\n      }\n      \n      if (enabledFields.phone) {\n        variables.push({\n          id: `${section.id}_phone`,\n          name: createVariableName(`${section.title}_phone`),\n          displayName: `${section.title} - Phone`,\n          type: 'text',\n          description: `Phone field from: ${section.title}`,\n          sectionId: section.id,\n          sectionTitle: section.title,\n          sectionType: section.type,\n          previewValue: options.includePreviewValues ? '+1 (555) 123-4567' : undefined,\n          source: 'user_input'\n        })\n      }\n      break\n\n    // Skip other section types for now (info, output, etc.)\n    default:\n      break\n  }\n\n  // Filter by type if specified\n  if (options.filterByType?.length) {\n    return variables.filter(v => options.filterByType!.includes(v.type))\n  }\n\n  return variables\n}\n\n/**\n * Extract variables from all sections in a campaign\n */\nexport function extractVariablesFromCampaign(\n  sections: CampaignSection[],\n  options: VariableExtractionOptions = {}\n): VariableInfo[] {\n  // Sort sections by order to ensure proper dependency resolution\n  const sortedSections = [...sections].sort((a, b) => a.order - b.order)\n  \n  const allVariables: VariableInfo[] = []\n  \n  for (const section of sortedSections) {\n    const sectionVariables = extractVariablesFromSection(section, options)\n    allVariables.push(...sectionVariables)\n  }\n  \n  return allVariables\n}\n\n/**\n * Extract variables available for a specific section (only previous sections)\n */\nexport function extractAvailableVariablesForSection(\n  sections: CampaignSection[],\n  targetSectionOrder: number,\n  options: VariableExtractionOptions = {}\n): VariableInfo[] {\n  // Only include sections that come before the target section\n  const previousSections = sections.filter(section => \n    section.order < targetSectionOrder && section.isVisible\n  )\n  \n  return extractVariablesFromCampaign(previousSections, options)\n}\n\n/**\n * Convert variable info to campaign variable format for database storage\n */\nexport function variableInfoToCampaignVariable(\n  variable: VariableInfo,\n  campaignId: string\n): CreateCampaignVariable {\n  return {\n    campaign_id: campaignId,\n    name: variable.name,\n    type: variable.type,\n    default_value: variable.previewValue || null,\n    description: variable.description,\n    source: variable.source,\n    configuration: {\n      section_id: variable.sectionId,\n      section_type: variable.sectionType,\n      display_name: variable.displayName\n    }\n  }\n}\n\n// =============================================================================\n// UTILITY FUNCTIONS\n// =============================================================================\n\n/**\n * Create a valid variable name from a section title\n */\nfunction createVariableName(title: string): string {\n  if (!title) return 'untitled_variable'\n  \n  return title\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s]/g, '') // Remove special characters\n    .replace(/\\s+/g, '_') // Replace spaces with underscores\n    .replace(/^_+|_+$/g, '') // Remove leading/trailing underscores\n    .replace(/_+/g, '_') // Replace multiple underscores with single\n    .substring(0, 50) // Limit length\n    || 'untitled_variable' // Fallback if empty\n}\n\n/**\n * Validate variable name format\n */\nexport function isValidVariableName(name: string): boolean {\n  // Must start with letter or underscore, contain only alphanumeric and underscores\n  const variableNameRegex = /^[a-zA-Z_][a-zA-Z0-9_]*$/\n  return variableNameRegex.test(name) && name.length <= 50\n}\n\n/**\n * Sanitize variable name to make it valid\n */\nexport function sanitizeVariableName(name: string): string {\n  if (!name) return 'variable'\n  \n  let sanitized = name\n    .replace(/[^a-zA-Z0-9_]/g, '_')\n    .replace(/^[0-9]+/, '') // Remove leading numbers\n    .replace(/_+/g, '_') // Replace multiple underscores\n    .replace(/^_+|_+$/g, '') // Remove leading/trailing underscores\n  \n  // Ensure it starts with a letter or underscore\n  if (sanitized && !/^[a-zA-Z_]/.test(sanitized)) {\n    sanitized = 'var_' + sanitized\n  }\n  \n  return sanitized.substring(0, 50) || 'variable'\n} "],"names":[],"mappings":"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","debugId":null}}]
}